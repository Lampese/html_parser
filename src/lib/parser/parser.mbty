%derive<Show> Token
%derive<Show> ParseError
%position<Int>
%start document

%token<String> TEXT
%token<String> TAG_OPEN        "<"
%token<String> TAG_CLOSE       ">"
%token<String> TAG_END_OPEN    "</"
%token<String> TAG_SELF_CLOSE  "/>"
%token<String> TAG_NAME
%token<String> ATTR_NAME
%token<String> ATTR_EQ         "="
%token<String> ATTR_VALUE
%token<String> COMMENT_OPEN    "<!--"
%token<String> COMMENT_CLOSE   "-->"

%type<Node> document
%type<Node> element
%type<Node> content
%type<Node> text
%type<Node> comment
%type<Array[(String, Option[String])]> attrs

%{
type Node =
  | Element of string * (string * string option) list * Node list
  | Text of string
  | Comment of string

exception ParseError of string
%}

%%

document
  : content                   { $1 }
  ;

content
  : element content           { $1 :: $2 }
  | text content              { $1 :: $2 }
  | comment content           { $1 :: $2 }
  |                           { [] }
  ;

element
  : TAG_OPEN TAG_NAME attrs TAG_CLOSE content TAG_END_OPEN TAG_NAME TAG_CLOSE
      { if $2 = $7 then Element($2, $3, $5) else raise (ParseError("Tag mismatch: " ^ $2 ^ " vs " ^ $7)) }
  | TAG_OPEN TAG_NAME attrs TAG_SELF_CLOSE
      { Element($2, $3, []) }
  ;

attrs
  : ATTR_NAME ATTR_EQ ATTR_VALUE attrs
      { ($1, Some($3)) :: $4 }
  | ATTR_NAME attrs
      { ($1, None) :: $2 }
  |                           { [] }
  ;

text
  : TEXT                      { Text($1) }
  ;

comment
  : COMMENT_OPEN TEXT COMMENT_CLOSE
      { Comment($2) }
  | COMMENT_OPEN COMMENT_CLOSE
      { Comment("") }
  ;