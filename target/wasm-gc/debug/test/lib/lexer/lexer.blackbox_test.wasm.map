{"version":3,"sources":["/Users/Zhuanz2/html_parser/src/lib/lexer/__generated_driver_for_blackbox_test.mbt","/Users/Zhuanz2/html_parser/src/lib/lexer/lexer_test.mbt","/Users/Zhuanz2/html_parser/src/lib/lexer/lexer.mbt","/Users/Zhuanz2/.moon/lib/core/string/methods.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/array.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/console.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/hasher.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/arraycore_nonjs.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/linked_hash_map.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/option.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/show.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/stringbuilder_buffer.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/to_string.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/output.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/deprecated.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/traits.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/bytes.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/op.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/byte.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/intrinsics.mbt","/Users/Zhuanz2/.moon/lib/core/builtin/uninitialized_array.mbt","/Users/Zhuanz2/.moon/lib/core/char/char.mbt","/Users/Zhuanz2/.moon/lib/core/abort/abort.mbt"],"sourcesContent":[null,"// HTML parser test file\n// Provides test functions to verify the tokenizer functionality\n\n/// Test basic HTML tokenizing functionality\ntest \"basic_html_tokenizer\" {\n  println(\"üîç Testing HTML Tokenizer\")\n  println(\"=========================\")\n  \n  let html = \"<div><p>Hello World!</p><!-- comment --><br/></div>\"\n  println(\"Input: \" + html)\n  \n  let tokens = tokenize(html)\n  println(\"\\nTokens (\" + tokens.length().to_string() + \" found):\")\n  \n  let mut i = 0\n  while i < tokens.length() {\n    println(\"  \" + (i + 1).to_string() + \". \" + token_to_string(tokens[i]))\n    i = i + 1\n  }\n}\n\n/// Test complex HTML tokenizing\ntest \"complex_html_tokenizing\" {\n  println(\"\\nüß™ Testing Complex HTML Tokenizing\")\n  println(\"===================================\")\n  \n  let complex_html = \"<div class=\\\"container\\\"><p>Hello <strong>World</strong>!</p></div>\"\n  println(\"Input: \" + complex_html)\n  \n  let tokens = tokenize(complex_html)\n  println(\"\\nTokens: \" + tokens.length().to_string())\n  \n  let mut i = 0\n  while i < tokens.length() {\n    println(\"  \" + (i + 1).to_string() + \". \" + token_to_string(tokens[i]))\n    i = i + 1\n  }\n}\n\n/// Test self-closing tags tokenizing\ntest \"self_closing_tags_tokenizing\" {\n  println(\"\\nüè∑Ô∏è  Testing Self-Closing Tags Tokenizing\")\n  println(\"=========================================\")\n  \n  let html = \"<div><img src=\\\"test.jpg\\\"/><br/><hr/><input type=\\\"text\\\"/></div>\"\n  println(\"Input: \" + html)\n  \n  let tokens = tokenize(html)\n  println(\"\\nTokens:\")\n  let mut i = 0\n  while i < tokens.length() {\n    println(\"  \" + (i + 1).to_string() + \". \" + token_to_string(tokens[i]))\n    i = i + 1\n  }\n}\n\n/// Test comment tokenizing\ntest \"comment_tokenizing\" {\n  println(\"\\nüí¨ Testing Comment Tokenizing\")\n  println(\"==============================\")\n  \n  let html = \"<!-- Header comment --><div><!-- Inline comment --><p>Text</p><!-- Footer comment --></div>\"\n  println(\"Input: \" + html)\n  \n  let tokens = tokenize(html)\n  println(\"\\nTokens:\")\n  let mut i = 0\n  while i < tokens.length() {\n    println(\"  \" + (i + 1).to_string() + \". \" + token_to_string(tokens[i]))\n    i = i + 1\n  }\n}\n\n/// Test basic case\ntest \"basic_functionality\" {\n  println(\"\\n‚úÖ Testing Basic Functionality\")\n  println(\"===============================\")\n  \n  let simple_html = \"<div><p>Hello!</p></div>\"\n  let tokens = tokenize(simple_html)\n  \n  println(\"Input: \" + simple_html)\n  println(\"Token count: \" + tokens.length().to_string())\n  \n  // Verify basic structure\n  if tokens.length() == 4 {\n    println(\"‚úÖ Correct token count\")\n  } else {\n    println(\"‚ùå Unexpected token count\")\n  }\n}\n","// HTML ÂàÜËØçÂô®Ê®°Âùó\n// Ë¥üË¥£Â∞Ü HTML Â≠óÁ¨¶‰∏≤ÂàÜËß£‰∏∫Ê†áËÆ∞(Token)Â∫èÂàó\n\n/// HTML token type definition\npub enum HtmlToken {\n  /// Start tag, e.g. <div>, <p>\n  StartTag(String)\n  /// End tag, e.g. </div>, </p>\n  EndTag(String)\n  /// Self-closing tag, e.g. <br/>, <img/>\n  SelfClosingTag(String)\n  /// Text content\n  Text(String)\n  /// HTML comment\n  Comment(String)\n}\n\n/// Internal state of the tokenizer\npriv struct TokenizerState {\n  input: String      // Input HTML string\n  position: Int      // Current parsing position\n  length: Int        // Total string length\n}\n\n//\n\n/// Create a new tokenizer state from the given HTML string.\n/// \n/// # Arguments\n/// * `html` - The HTML string to be tokenized.\n/// \n/// # Returns\n/// A TokenizerState struct initialized at position 0.\nfn create_state(html: String) -> TokenizerState {\n  { input: html, position: 0, length: html.length() }\n}\n\n/// Get the character at the current position in the tokenizer state.\n/// \n/// # Arguments\n/// * `state` - The current TokenizerState.\n/// \n/// # Returns\n/// An Option[Char] containing the character at the current position, or None if out of bounds.\nfn current_char(state: TokenizerState) -> Option[Char] {\n  if state.position < state.length {\n    match state.input.get(state.position) {\n      Some(code) => Some(code.unsafe_to_char())\n      None => None\n    }\n  } else {\n    None\n  }\n}\n\n/// Safely get the character at the specified position in the input string.\n/// \n/// # Arguments\n/// * `input` - The HTML input string.\n/// * `position` - The position to retrieve the character from.\n/// \n/// # Returns\n/// An Option[Char] containing the character at the given position, or None if out of bounds.\nfn get_char_at(input: String, position: Int) -> Option[Char] {\n  match input.get(position) {\n    Some(code) => Some(code.unsafe_to_char())\n    None => None\n  }\n}\n\n/// Advance the tokenizer state to the next character.\n/// \n/// # Arguments\n/// * `state` - The current TokenizerState.\n/// \n/// # Returns\n/// A new TokenizerState with the position incremented by 1.\nfn advance(state: TokenizerState) -> TokenizerState {\n  { input: state.input, position: state.position + 1, length: state.length }\n}\n\n/// Skip whitespace characters (space, tab, newline, carriage return) in the tokenizer state.\n/// \n/// # Arguments\n/// * `state` - The current TokenizerState.\n/// \n/// # Returns\n/// A TokenizerState advanced past any whitespace characters.\nfn skip_whitespace(state: TokenizerState) -> TokenizerState {\n  let mut current_state = state\n  while true {\n    match current_char(current_state) {\n      Some(' ') | Some('\\t') | Some('\\n') | Some('\\r') => {\n        current_state = advance(current_state)\n      }\n      _ => break\n    }\n  }\n  current_state\n}\n\n/// Read the tag name from the current position until a '>', '/', or whitespace character is encountered.\n/// \n/// # Arguments\n/// * `state` - The current TokenizerState, positioned at the start of a tag name.\n/// \n/// # Returns\n/// A tuple containing the tag name as a String and the updated TokenizerState.\nfn read_tag_name(state: TokenizerState) -> (String, TokenizerState) {\n  let mut current_state = state\n  let chars = []\n  \n  while true {\n    match current_char(current_state) {\n      Some(c) => {\n        if c == '>' || c == '/' || c == ' ' || c == '\\t' || c == '\\n' || c == '\\r' {\n          break\n        }\n        chars.push(c)\n        current_state = advance(current_state)\n      }\n      None => break\n    }\n  }\n  \n  // Â∞ÜÂ≠óÁ¨¶Êï∞ÁªÑËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤\n  let mut result = \"\"\n  for char in chars {\n    result = result + char.to_string()\n  }\n  \n  (result, current_state)\n}\n\n/// Read text content from the current position until a '<' character is encountered.\n/// \n/// # Arguments\n/// * `state` - The current TokenizerState, positioned at the start of text content.\n/// \n/// # Returns\n/// A tuple containing the text content as a String and the updated TokenizerState.\nfn read_text_content(state: TokenizerState) -> (String, TokenizerState) {\n  let mut current_state = state\n  let chars = []\n  \n  while true {\n    match current_char(current_state) {\n      Some('<') => break\n      Some(c) => {\n        chars.push(c)\n        current_state = advance(current_state)\n      }\n      None => break\n    }\n  }\n  \n  // Â∞ÜÂ≠óÁ¨¶Êï∞ÁªÑËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤\n  let mut result = \"\"\n  for char in chars {\n    result = result + char.to_string()\n  }\n  \n  (result, current_state)\n}\n\n/// Check if the current tag is a self-closing tag by looking for a '/' before the '>' character.\n/// \n/// # Arguments\n/// * `state` - The current TokenizerState.\n/// \n/// # Returns\n/// True if the tag is self-closing, otherwise false.\nfn is_self_closing(state: TokenizerState) -> Bool {\n  if state.position > 0 {\n    match get_char_at(state.input, state.position - 1) {\n      Some('/') => true\n      _ => false\n    }\n  } else {\n    false\n  }\n}\n\n/// Process a tag (start tag, end tag, or self-closing tag) and return the corresponding token.\n/// \n/// # Arguments\n/// * `state` - The TokenizerState at the start of a tag (at '<').\n/// \n/// # Returns\n/// A tuple containing the parsed HtmlToken and the updated TokenizerState.\nfn process_tag(state: TokenizerState) -> (HtmlToken, TokenizerState) {\n  let mut current_state = advance(state) // Ë∑≥Ëøá '<'\n  \n  // Ê£ÄÊü•ÊòØÂê¶‰∏∫ÁªìÊùüÊ†áÁ≠æ\n  let is_end_tag = match current_char(current_state) {\n    Some('/') => {\n      current_state = advance(current_state)\n      true\n    }\n    _ => false\n  }\n  \n  // ËØªÂèñÊ†áÁ≠æÂêç\n  let (tag_name, new_state) = read_tag_name(current_state)\n  current_state = new_state\n  \n  // Ë∑≥ËøáÂà∞ '>'\n  while true {\n    match current_char(current_state) {\n      Some('>') => {\n        current_state = advance(current_state)\n        break\n      }\n      Some(_) => {\n        current_state = advance(current_state)\n      }\n      None => break\n    }\n  }\n  \n  // Ê£ÄÊü•ÊòØÂê¶‰∏∫Ëá™Èó≠ÂêàÊ†áÁ≠æÔºàÂú® '>' ÂâçÊúâ '/'Ôºâ\n  if current_state.position > 1 {\n    match get_char_at(current_state.input, current_state.position - 2) {\n      Some('/') => (SelfClosingTag(tag_name), current_state)\n      _ => {\n        if is_end_tag {\n          (EndTag(tag_name), current_state)\n        } else {\n          (StartTag(tag_name), current_state)\n        }\n      }\n    }\n  } else if is_end_tag {\n    (EndTag(tag_name), current_state)\n  } else {\n    (StartTag(tag_name), current_state)\n  }\n}\n\n/// Process an HTML comment and return the comment token.\n/// \n/// # Arguments\n/// * `state` - The TokenizerState at the start of a comment (at '<').\n/// \n/// # Returns\n/// A tuple containing the Comment token and the updated TokenizerState.\nfn process_comment(state: TokenizerState) -> (HtmlToken, TokenizerState) {\n  let mut current_state = state\n  \n  // Ë∑≥Ëøá \"<!--\"\n  if current_state.position + 3 < current_state.length &&\n     get_char_at(current_state.input, current_state.position + 1) == Some('!') &&\n     get_char_at(current_state.input, current_state.position + 2) == Some('-') &&\n     get_char_at(current_state.input, current_state.position + 3) == Some('-') {\n    current_state = { input: current_state.input, position: current_state.position + 4, length: current_state.length }\n  }\n  \n  let comment_chars = []\n  \n  // ËØªÂèñÊ≥®ÈáäÂÜÖÂÆπÁõ¥Âà∞ \"-->\"\n  while current_state.position + 2 < current_state.length {\n    if get_char_at(current_state.input, current_state.position) == Some('-') &&\n       get_char_at(current_state.input, current_state.position + 1) == Some('-') &&\n       get_char_at(current_state.input, current_state.position + 2) == Some('>') {\n      current_state = { input: current_state.input, position: current_state.position + 3, length: current_state.length }\n      break\n    }\n    \n    match current_char(current_state) {\n      Some(c) => {\n        comment_chars.push(c)\n        current_state = advance(current_state)\n      }\n      None => break\n    }\n  }\n  \n  // Â∞ÜÂ≠óÁ¨¶Êï∞ÁªÑËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤\n  let mut comment_text = \"\"\n  for char in comment_chars {\n    comment_text = comment_text + char.to_string()\n  }\n  \n  (Comment(comment_text), current_state)\n}\n\n/// Check if the current position is the start of an HTML comment (\"<!--\").\n/// \n/// # Arguments\n/// * `state` - The current TokenizerState.\n/// \n/// # Returns\n/// True if the next characters are \"<!--\", otherwise false.\nfn is_comment_start(state: TokenizerState) -> Bool {\n  state.position + 3 < state.length &&\n  get_char_at(state.input, state.position + 1) == Some('!') &&\n  get_char_at(state.input, state.position + 2) == Some('-') &&\n  get_char_at(state.input, state.position + 3) == Some('-')\n}\n\n/// Check if the current position is the start of an end tag (\"</\").\n/// \n/// # Arguments\n/// * `state` - The current TokenizerState.\n/// \n/// # Returns\n/// True if the next characters are \"</\", otherwise false.\nfn is_end_tag_start(state: TokenizerState) -> Bool {\n  state.position + 1 < state.length &&\n  get_char_at(state.input, state.position + 1) == Some('/')\n}\n\n// ============================================================================\n// ÂÖ¨ÂÖ±Êé•Âè£ÂáΩÊï∞\n// ============================================================================\n\n/// ‰∏ªË¶ÅÁöÑÂàÜËØçÂáΩÊï∞\n/// Main tokenization function. Converts an HTML string into an array of tokens.\n/// \n/// # Arguments\n/// * `html` - The HTML string to tokenize.\n/// \n/// # Returns\n/// An array of HtmlToken representing the tokenized HTML input.\npub fn tokenize(html: String) -> Array[HtmlToken] {\n  let tokens = []\n  let mut state = create_state(html)\n  \n  while state.position < state.length {\n    // Ë∑≥ËøáÁ©∫ÁôΩÂ≠óÁ¨¶\n    state = skip_whitespace(state)\n    \n    if state.position >= state.length {\n      break\n    }\n    \n    match current_char(state) {\n      Some('<') => {\n        if is_comment_start(state) {\n          // Â§ÑÁêÜÊ≥®Èáä\n          let (token, new_state) = process_comment(state)\n          tokens.push(token)\n          state = new_state\n        } else {\n          // Â§ÑÁêÜÊ†áÁ≠æ\n          let (token, new_state) = process_tag(state)\n          tokens.push(token)\n          state = new_state\n        }\n      }\n      Some(_) => {\n        // Â§ÑÁêÜÊñáÊú¨ÂÜÖÂÆπ\n        let (text, new_state) = read_text_content(state)\n        if text != \"\" {\n          tokens.push(Text(text))\n        }\n        state = new_state\n      }\n      None => break\n    }\n  }\n  \n  tokens\n}\n\n/// Â∞ÜÊ†áËÆ∞ËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤Ë°®Á§∫ÔºàÁî®‰∫éË∞ÉËØïÂíåÊµãËØïÔºâ\n/// Convert an HTML token to its string representation (for debugging and testing).\n/// \n/// # Arguments\n/// * `token` - The HtmlToken to convert.\n/// \n/// # Returns\n/// A String representation of the token.\npub fn token_to_string(token: HtmlToken) -> String {\n  match token {\n    StartTag(name) => \"<\" + name + \">\"\n    EndTag(name) => \"</\" + name + \">\"\n    SelfClosingTag(name) => \"<\" + name + \"/>\"\n    Text(content) => \"TEXT(\\\"\" + content + \"\\\")\"\n    Comment(content) => \"<!-- \" + content + \" -->\"\n  }\n}\n\n\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Returns the offset (charcode index) of the first occurrence of the given\n/// substring. If the substring is not found, it returns None.\npub fn View::find(self : View, str : View) -> Int? {\n  let len = self.length()\n  let sub_len = str.length()\n  // Handle empty substring case\n  guard sub_len > 0 else { return Some(0) }\n  // If substring is longer than string, it can't be found\n  guard sub_len <= len else { return None }\n  let max_idx = len - sub_len\n  let first = str.unsafe_charcode_at(0)\n  let mut i = 0\n  while i <= max_idx {\n    // find first character\n    while i < len && self.unsafe_charcode_at(i) != first {\n      i += 1\n    }\n    // check the rest\n    if i <= max_idx {\n      for j in 1..<sub_len {\n        if self.unsafe_charcode_at(i + j) != str.unsafe_charcode_at(j) {\n          break\n        }\n      } else {\n        // the substring is found\n        return Some(i)\n      }\n    }\n    i += 1\n  }\n  None\n}\n\n///|\n/// Returns the offset of the first occurrence of the given substring. If the\n/// substring is not found, it returns None.\npub fn String::find(self : String, str : View) -> Int? {\n  self[:].find(str)\n}\n\n///|\ntest \"find\" {\n  inspect(\"hello\".find(\"o\"), content=\"Some(4)\")\n  inspect(\"hello\".find(\"l\"), content=\"Some(2)\")\n  inspect(\"hello\".find(\"hello\"), content=\"Some(0)\")\n  inspect(\"hello\".find(\"h\"), content=\"Some(0)\")\n  inspect(\"hello\".find(\"\"), content=\"Some(0)\")\n  inspect(\"hello\".find(\"world\"), content=\"None\")\n  inspect(\"\".find(\"\"), content=\"Some(0)\")\n  inspect(\"\".find(\"a\"), content=\"None\")\n  inspect(\"hello hello\".find(\"hello\"), content=\"Some(0)\")\n  inspect(\"aaa\".find(\"aa\"), content=\"Some(0)\")\n  inspect(\"üòÄüòÄ\".find(\"üòÄ\"), content=\"Some(0)\")\n}\n\n///|\n/// Returns the offset of the first character that satisfies the given predicate.\n/// If no such character is found, it returns None.\npub fn View::find_by(self : View, pred : (Char) -> Bool) -> Int? {\n  for i, c in self {\n    if pred(c) {\n      return Some(i)\n    }\n  }\n  None\n}\n\n///|\n/// Returns the offset of the first character that satisfies the given predicate.\n/// If no such character is found, it returns None.\npub fn String::find_by(self : String, pred : (Char) -> Bool) -> Int? {\n  self[:].find_by(pred)\n}\n\n///|\ntest \"find_by\" {\n  inspect(\"hello\".find_by(c => c == 'o'), content=\"Some(4)\")\n  inspect(\"hello\".find_by(c => c == 'l'), content=\"Some(2)\")\n  inspect(\"hello\".find_by(c => c == 'z'), content=\"None\")\n  inspect(\"\".find_by(c => c == 'a'), content=\"None\")\n  inspect(\"hello\".find_by(c => c is ('0'..='9')), content=\"None\")\n  inspect(\"hello123\".find_by(c => c is ('0'..='9')), content=\"Some(5)\")\n  inspect(\"hello\".find_by(c => c is ('A'..='Z')), content=\"None\")\n  inspect(\"Hello\".find_by(c => c is ('A'..='Z')), content=\"Some(0)\")\n  inspect(\"Œ±Œ≤Œ≥\".find_by(c => c == 'Œ≤'), content=\"Some(1)\")\n  inspect(\"üòÄüòÅüòÇ\".find_by(c => c == 'üòÇ'), content=\"Some(2)\")\n}\n\n///|\n/// Returns the offset of the last occurrence of the given substring. If the\n/// substring is not found, it returns None.\npub fn View::rev_find(self : View, str : View) -> Int? {\n  let len = self.length()\n  let sub_len = str.length()\n  guard sub_len > 0 else { return Some(len) }\n  guard sub_len <= len else { return None }\n  let min_idx = sub_len - 1\n  let last = str.unsafe_charcode_at(sub_len - 1)\n  let mut i = len - 1\n  while i >= min_idx {\n    while i >= 0 && self.unsafe_charcode_at(i) != last {\n      i -= 1\n    }\n    if i >= min_idx {\n      for j in 1..<sub_len {\n        if self.unsafe_charcode_at(i - j) !=\n          str.unsafe_charcode_at(sub_len - 1 - j) {\n          break\n        }\n      } else {\n        return Some(i - sub_len + 1)\n      }\n    }\n    i -= 1\n  }\n  None\n}\n\n///|\n/// Returns the offset (charcode index) of the last occurrence of the given\n/// substring. If the substring is not found, it returns None.\npub fn String::rev_find(self : String, str : View) -> Int? {\n  self[:].rev_find(str)\n}\n\n///|\ntest \"rev_find\" {\n  inspect(\"hello\".rev_find(\"o\"), content=\"Some(4)\")\n  inspect(\"hello\".rev_find(\"l\"), content=\"Some(3)\")\n  inspect(\"hello\".rev_find(\"hello\"), content=\"Some(0)\")\n  inspect(\"hello\".rev_find(\"h\"), content=\"Some(0)\")\n  inspect(\"hello\".rev_find(\"\"), content=\"Some(5)\")\n  inspect(\"hello\".rev_find(\"world\"), content=\"None\")\n  inspect(\"\".rev_find(\"\"), content=\"Some(0)\")\n  inspect(\"\".rev_find(\"a\"), content=\"None\")\n  inspect(\"hello hello\".rev_find(\"hello\"), content=\"Some(6)\")\n  inspect(\"aaa\".rev_find(\"aa\"), content=\"Some(1)\")\n  inspect(\"üòÄüòÄ\".rev_find(\"üòÄ\"), content=\"Some(2)\")\n}\n\n///| \n/// Returns true if the given substring is suffix of this string.\npub fn View::has_suffix(self : View, str : View) -> Bool {\n  self.rev_find(str) is Some(i) && i == self.length() - str.length()\n}\n\n///|\n/// Returns true if the given substring is suffix of this string.\npub fn String::has_suffix(self : String, str : View) -> Bool {\n  self[:].has_suffix(str)\n}\n\n///|\ntest \"has_suffix\" {\n  inspect(\"hello\".has_suffix(\"lo\"), content=\"true\")\n  inspect(\"hello\".has_suffix(\"hello\"), content=\"true\")\n  inspect(\"hello\".has_suffix(\"\"), content=\"true\")\n  inspect(\"hello\".has_suffix(\"world\"), content=\"false\")\n  inspect(\"hello\".has_suffix(\"hel\"), content=\"false\")\n  inspect(\"\".has_suffix(\"\"), content=\"true\")\n  inspect(\"\".has_suffix(\"a\"), content=\"false\")\n  inspect(\"hello world\".has_suffix(\"world\"), content=\"true\")\n  inspect(\"üòÄüòÄ\".has_suffix(\"üòÄ\"), content=\"true\")\n  inspect(\"üòÄüòÄ\".has_suffix(\"üòÄüòÄ\"), content=\"true\")\n}\n\n///|\n/// Returns true if this string starts with the given substring.\npub fn View::has_prefix(self : View, str : View) -> Bool {\n  self.find(str) is Some(i) && i == 0\n}\n\n///|\n/// Returns true if this string starts with the given substring.\npub fn String::has_prefix(self : String, str : View) -> Bool {\n  self[:].has_prefix(str)\n}\n\n///|\ntest \"has_prefix\" {\n  inspect(\"hello\".has_prefix(\"h\"), content=\"true\")\n  inspect(\"hello\".has_prefix(\"he\"), content=\"true\")\n  inspect(\"hello\".has_prefix(\"\"), content=\"true\")\n  inspect(\"hello\".has_prefix(\"world\"), content=\"false\")\n  inspect(\"hello\".has_prefix(\"lo\"), content=\"false\")\n  inspect(\"\".has_prefix(\"\"), content=\"true\")\n  inspect(\"\".has_prefix(\"a\"), content=\"false\")\n  inspect(\"üòÄhello\".has_prefix(\"üòÄ\"), content=\"true\")\n  inspect(\"üòÄüòÉhello\".has_prefix(\"üòÄüòÉ\"), content=\"true\")\n  inspect(\"üòÄhello\".has_prefix(\"üòÉ\"), content=\"false\")\n  inspect(\"helloüòÄ\".has_prefix(\"üòÄ\"), content=\"false\")\n}\n\n///|\n/// Returns true if this string contains the given substring.\npub fn View::contains(self : View, str : View) -> Bool {\n  self.find(str) is Some(_)\n}\n\n///|\n/// Returns true if this string contains the given substring.\npub fn contains(self : String, str : View) -> Bool {\n  self[:].contains(str)\n}\n\n///|\ntest \"contains\" {\n  inspect(\"hello\".contains(\"o\"), content=\"true\")\n  inspect(\"hello\".contains(\"l\"), content=\"true\")\n  inspect(\"hello\".contains(\"hello\"), content=\"true\")\n  inspect(\"hello\".contains(\"h\"), content=\"true\")\n  inspect(\"hello\".contains(\"\"), content=\"true\")\n  inspect(\"hello\".contains(\"world\"), content=\"false\")\n  inspect(\"\".contains(\"\"), content=\"true\")\n  inspect(\"\".contains(\"a\"), content=\"false\")\n  inspect(\"hello hello\".contains(\"hello\"), content=\"true\")\n  inspect(\"aaa\".contains(\"aa\"), content=\"true\")\n  inspect(\"üòÄüòÄ\".contains(\"üòÄ\"), content=\"true\")\n}\n\n///|\n/// Returns true if this string contains the given character.\npub fn View::contains_char(self : View, c : Char) -> Bool {\n  let len = self.length()\n  // Check empty\n  guard len > 0 else { return false }\n  let c = c.to_int()\n  if c <= 0xFFFF {\n    // Search BMP\n    for i in 0..<len {\n      if self.unsafe_charcode_at(i) == c {\n        return true\n      }\n    }\n  } else {\n    // Check insufficient\n    guard len >= 2 else { return false }\n    // Calc surrogate pair\n    let adj = c - 0x10000\n    let high = 0xD800 + (adj >> 10)\n    let low = 0xDC00 + (adj & 0x3FF)\n    // Search surrogate pair\n    let mut i = 0\n    while i < len - 1 {\n      if self.unsafe_charcode_at(i) == high {\n        i += 1\n        if self.unsafe_charcode_at(i) == low {\n          return true\n        }\n      }\n      i += 1\n    }\n  }\n  false\n}\n\n///|\n/// Returns true if this string contains the given character.\npub fn contains_char(self : String, c : Char) -> Bool {\n  self[:].contains_char(c)\n}\n\n///|\ntest \"contains_char\" {\n  inspect(\"hello\".contains_char('h'), content=\"true\")\n  inspect(\"hello\".contains_char('e'), content=\"true\")\n  inspect(\"hello\".contains_char('l'), content=\"true\")\n  inspect(\"hello\".contains_char('o'), content=\"true\")\n  inspect(\"hello\".contains_char('x'), content=\"false\")\n  inspect(\"\".contains_char('a'), content=\"false\")\n  inspect(\"hello world\".contains_char(' '), content=\"true\")\n  inspect(\"hello world\".contains_char('w'), content=\"true\")\n  inspect(\"üòÄüòÄ\".contains_char('üòÄ'), content=\"true\")\n  inspect(\"üòÄüòÄ\".contains_char('üòÉ'), content=\"false\")\n  inspect(\"hello\".contains_char((104).unsafe_to_char()), content=\"true\") // 'h' is 104 in ASCII\n}\n\n///|\n/// Returns the view of the string without the leading characters that are in\n/// the given string.\npub fn View::trim_start(self : View, char_set : View) -> View {\n  loop self {\n    [] as v => v\n    [c, .. rest] as v =>\n      if char_set.contains_char(c) {\n        continue rest\n      } else {\n        v\n      }\n  }\n}\n\n///|\n/// Returns the view of the string without the leading characters that are in\n/// the given string.\npub fn trim_start(self : String, char_set : View) -> View {\n  self[:].trim_start(char_set)\n}\n\n///|\ntest \"trim_start\" {\n  inspect(\"hello\".trim_start(\"h\"), content=\"ello\")\n  inspect(\"hello\".trim_start(\"he\"), content=\"llo\")\n  inspect(\"hello\".trim_start(\"eh\"), content=\"llo\")\n  inspect(\"hello\".trim_start(\"x\"), content=\"hello\")\n  inspect(\"hello\".trim_start(\"\"), content=\"hello\")\n  inspect(\"\".trim_start(\"a\"), content=\"\")\n  inspect(\"   hello\".trim_start(\" \"), content=\"hello\")\n  inspect(\"hello world\".trim_start(\"helo\"), content=\" world\")\n  inspect(\"üòÄüòÄhello\".trim_start(\"üòÄ\"), content=\"hello\")\n  inspect(\"üòÄüòÉhello\".trim_start(\"üòÄüòÉ\"), content=\"hello\")\n  inspect(\"aaaabc\".trim_start(\"a\"), content=\"bc\")\n  inspect(\"aaaa\".trim_start(\"a\"), content=\"\")\n}\n\n///|\n/// Returns the view of the string without the trailing characters that are in\n/// the given string.\npub fn View::trim_end(self : View, char_set : View) -> View {\n  loop self {\n    [] as v => v\n    [.. rest, c] as v =>\n      if char_set.contains_char(c) {\n        continue rest\n      } else {\n        v\n      }\n  }\n}\n\n///|\n/// Returns the view of the string without the trailing characters that are in\n/// the given string.\npub fn trim_end(self : String, char_set : View) -> View {\n  self[:].trim_end(char_set)\n}\n\n///|\ntest \"trim_end\" {\n  inspect(\"hello\".trim_end(\"o\"), content=\"hell\")\n  inspect(\"hello\".trim_end(\"lo\"), content=\"he\")\n  inspect(\"hello\".trim_end(\"x\"), content=\"hello\")\n  inspect(\"hello\".trim_end(\"\"), content=\"hello\")\n  inspect(\"\".trim_end(\"a\"), content=\"\")\n  inspect(\"hello   \".trim_end(\" \"), content=\"hello\")\n  inspect(\"hello world\".trim_end(\"dlrow \"), content=\"he\")\n  inspect(\"helloüòÄüòÄ\".trim_end(\"üòÄ\"), content=\"hello\")\n  inspect(\"helloüòÄüòÉ\".trim_end(\"üòÄüòÉ\"), content=\"hello\")\n  inspect(\"abcccc\".trim_end(\"c\"), content=\"ab\")\n  inspect(\"cccc\".trim_end(\"c\"), content=\"\")\n}\n\n///|\n/// Returns the view of the string without the leading and trailing characters\n/// that are in the given string.\npub fn View::trim(self : View, char_set : View) -> View {\n  self.trim_start(char_set).trim_end(char_set)\n}\n\n///|\n/// Returns the view of the string without the leading and trailing characters\n/// that are in the given string.\npub fn trim(self : String, char_set : View) -> View {\n  self[:].trim(char_set)\n}\n\n///|\ntest \"trim\" {\n  inspect(\"hello\".trim(\"h\"), content=\"ello\")\n  inspect(\"hello\".trim(\"o\"), content=\"hell\")\n  inspect(\"hello\".trim(\"ho\"), content=\"ell\")\n  inspect(\"hello\".trim(\"oh\"), content=\"ell\")\n  inspect(\"hello\".trim(\"x\"), content=\"hello\")\n  inspect(\"hello\".trim(\"\"), content=\"hello\")\n  inspect(\"\".trim(\"a\"), content=\"\")\n  inspect(\"   hello   \".trim(\" \"), content=\"hello\")\n  inspect(\"hello world\".trim(\"hd\"), content=\"ello worl\")\n  inspect(\"üòÄhelloüòÄ\".trim(\"üòÄ\"), content=\"hello\")\n  inspect(\"üòÄüòÉhelloüòÄüòÉ\".trim(\"üòÄüòÉ\"), content=\"hello\")\n  inspect(\"aaaabcaaa\".trim(\"a\"), content=\"bc\")\n  inspect(\"aaaa\".trim(\"a\"), content=\"\")\n  inspect(\"  hello world  \".trim(\" \"), content=\"hello world\")\n  inspect(\"abcabc\".trim(\"abc\"), content=\"\")\n}\n\n///| \n/// Returns the view of the string without the leading and trailing spaces.\npub fn View::trim_space(self : View) -> View {\n  self.trim(\" \\n\\r\\t\")\n}\n\n///|\n/// Returns the view of the string without the leading and trailing spaces.\npub fn trim_space(self : String) -> View {\n  self[:].trim_space()\n}\n\n///|\ntest \"trim_space\" {\n  inspect(\"hello\".trim_space(), content=\"hello\")\n  inspect(\"  hello  \".trim_space(), content=\"hello\")\n  inspect(\"hello  \".trim_space(), content=\"hello\")\n  inspect(\"  hello\".trim_space(), content=\"hello\")\n  inspect(\"\\t\\nhello\\r\\n\".trim_space(), content=\"hello\")\n  inspect(\"  hello world  \".trim_space(), content=\"hello world\")\n  inspect(\"  \".trim_space(), content=\"\")\n  inspect(\"\\n\\r\\t\".trim_space(), content=\"\")\n  inspect(\"\".trim_space(), content=\"\")\n  inspect(\"  hello\\nworld\\t\".trim_space(), content=\"hello\\nworld\")\n}\n\n///|\n/// Returns true if this string is empty.\npub fn View::is_empty(self : View) -> Bool {\n  self.length() == 0\n}\n\n///|\n/// Returns true if this string is empty.\npub fn is_empty(self : String) -> Bool {\n  self == \"\"\n}\n\n///|\ntest \"is_empty\" {\n  inspect(\"\".is_empty(), content=\"true\")\n  inspect(\"hello\".is_empty(), content=\"false\")\n  inspect(\" \".is_empty(), content=\"false\")\n  inspect(\"\\n\".is_empty(), content=\"false\")\n  inspect(\"\\t\".is_empty(), content=\"false\")\n  inspect(\"   \".is_empty(), content=\"false\")\n\n  // Test with string views\n  let s = \"hello\"\n  let empty_view = s[0:0]\n  let non_empty_view = s[0:3]\n  inspect(empty_view.is_empty(), content=\"true\")\n  inspect(non_empty_view.is_empty(), content=\"false\")\n}\n\n///|\n/// Returns true if this string is blank.\npub fn View::is_blank(self : View) -> Bool {\n  self.trim_space().is_empty()\n}\n\n///|\n/// Returns true if this string is blank.\npub fn is_blank(self : String) -> Bool {\n  self[:].is_blank()\n}\n\n///|\ntest \"is_blank\" {\n  inspect(\"\".is_blank(), content=\"true\")\n  inspect(\"hello\".is_blank(), content=\"false\")\n  inspect(\" \".is_blank(), content=\"true\")\n  inspect(\"\\n\".is_blank(), content=\"true\")\n  inspect(\"\\t\".is_blank(), content=\"true\")\n  inspect(\"   \".is_blank(), content=\"true\")\n  inspect(\" \\n\\t\\r \".is_blank(), content=\"true\")\n  inspect(\"hello world\".is_blank(), content=\"false\")\n  inspect(\"  hello  \".is_blank(), content=\"false\")\n\n  // Test with string views\n  let s = \"   hello  \"\n  let blank_view = s[0:3] // \"   \"\n  let non_blank_view = s[3:8] // \"hello\"\n  inspect(blank_view.is_blank(), content=\"true\")\n  inspect(non_blank_view.is_blank(), content=\"false\")\n}\n\n///|\n/// Returns a new string with `padding_char`s prefixed to `self` if\n/// `self.char_length() < total_width`. The number of unicode characters in\n/// the returned string is `total_width` if padding is added.\npub fn View::pad_start(\n  self : View,\n  total_width : Int,\n  padding_char : Char\n) -> String {\n  let len = self.char_length()\n  guard len < total_width else { return self.to_string() }\n  let padding = String::make(total_width - len, padding_char)\n  [..padding, ..self]\n}\n\n///|\n/// Returns a new string with `padding_char`s prefixed to `self` if\n/// `self.char_length() < total_width`. The number of unicode characters in\n/// the returned string is `total_width` if padding is added.\npub fn pad_start(\n  self : String,\n  total_width : Int,\n  padding_char : Char\n) -> String {\n  self[:].pad_start(total_width, padding_char)\n}\n\n///|\ntest \"pad_start\" {\n  // Test with regular strings\n  inspect(\"2\".pad_start(3, '0'), content=\"002\")\n  inspect(\"abc\".pad_start(5, 'x'), content=\"xxabc\")\n  inspect(\"hello\".pad_start(4, ' '), content=\"hello\") // No padding needed\n  inspect(\"\".pad_start(3, '-'), content=\"---\")\n\n  // Test with different padding characters\n  inspect(\"test\".pad_start(8, '*'), content=\"****test\")\n  inspect(\"123\".pad_start(6, '0'), content=\"000123\")\n\n  // Test with string views\n  let s = \"hello\"\n  let view = s[2:5] // \"llo\"\n  inspect(view.pad_start(5, 'x'), content=\"xxllo\")\n\n  // Test with Unicode characters\n  inspect(\"üåü\".pad_start(3, '‚ú®'), content=\"‚ú®‚ú®üåü\")\n\n  // Edge cases\n  inspect(\"abc\".pad_start(0, 'x'), content=\"abc\") // width less than string length\n  inspect(\"abc\".pad_start(3, 'x'), content=\"abc\") // width equal to string length\n}\n\n///|\n/// Returns a new string with `padding_char`s appended to `self` if\n/// `self.length() < total_width`. The number of unicode characters in\n/// the returned string is `total_width` if padding is added.\npub fn View::pad_end(\n  self : View,\n  total_width : Int,\n  padding_char : Char\n) -> String {\n  let len = self.char_length()\n  guard len < total_width else { return self.to_string() }\n  let padding = String::make(total_width - len, padding_char)\n  [..self, ..padding]\n}\n\n///|\n/// Returns a new string with `padding_char`s appended to `self` if\n/// `self.length() < total_width`. The number of unicode characters in\n/// the returned string is `total_width` if padding is added.\npub fn pad_end(self : String, total_width : Int, padding_char : Char) -> String {\n  self[:].pad_end(total_width, padding_char)\n}\n\n///|\ntest \"pad_end\" {\n  // Test with regular strings\n  inspect(\"2\".pad_end(3, '0'), content=\"200\")\n  inspect(\"abc\".pad_end(5, 'x'), content=\"abcxx\")\n  inspect(\"hello\".pad_end(4, ' '), content=\"hello\") // No padding needed\n  inspect(\"\".pad_end(3, '-'), content=\"---\")\n\n  // Test with different padding characters\n  inspect(\"test\".pad_end(8, '*'), content=\"test****\")\n  inspect(\"123\".pad_end(6, '0'), content=\"123000\")\n\n  // Test with string views\n  let s = \"hello\"\n  let view = s[2:5] // \"llo\"\n  inspect(view.pad_end(5, 'x'), content=\"lloxx\")\n\n  // Test with Unicode characters\n  inspect(\"üåü\".pad_end(3, '‚ú®'), content=\"üåü‚ú®‚ú®\")\n\n  // Edge cases\n  inspect(\"abc\".pad_end(0, 'x'), content=\"abc\") // width less than string length\n  inspect(\"abc\".pad_end(3, 'x'), content=\"abc\") // width equal to string length\n}\n\n///|\n/// Returns a new string with `self` repeated `n` times.\npub fn View::repeat(self : View, n : Int) -> View {\n  match n {\n    _..=0 => \"\"\n    1 => self\n    _ => {\n      let len = self.length()\n      let buf = StringBuilder::new(size_hint=len * n)\n      let str = self.to_string()\n      for _ in 0..<n {\n        buf.write_string(str)\n      }\n      buf.to_string()\n    }\n  }\n}\n\n///|\n/// Returns a new string with `self` repeated `n` times.\npub fn repeat(self : String, n : Int) -> String {\n  match n {\n    _..=0 => \"\"\n    1 => self\n    _ => {\n      let len = self.length()\n      let buf = StringBuilder::new(size_hint=len * n)\n      let str = self.to_string()\n      for _ in 0..<n {\n        buf.write_string(str)\n      }\n      buf.to_string()\n    }\n  }\n}\n\n///|\ntest \"repeat\" {\n  // Test with regular strings\n  inspect(\"abc\".repeat(3), content=\"abcabcabc\")\n  inspect(\"x\".repeat(5), content=\"xxxxx\")\n  inspect(\"hello \".repeat(2), content=\"hello hello \")\n\n  // Test with empty string\n  inspect(\"\".repeat(10), content=\"\")\n\n  // Test with string views\n  let s = \"hello world\"\n  let view = s[6:11] // \"world\"\n  inspect(view.repeat(2), content=\"worldworld\")\n\n  // Test with Unicode characters\n  inspect(\"üåü\".repeat(3), content=\"üåüüåüüåü\")\n  inspect(\"‚ú®üåü\".repeat(2), content=\"‚ú®üåü‚ú®üåü\")\n\n  // Edge cases\n  inspect(\"abc\".repeat(0), content=\"\")\n  inspect(\"abc\".repeat(-5), content=\"\")\n  inspect(\"abc\".repeat(1), content=\"abc\")\n}\n\n///|\n/// Returns a new string with the characters in reverse order. It respects\n/// Unicode characters and surrogate pairs but not grapheme clusters.\npub fn View::rev(self : View) -> String {\n  let buf = StringBuilder::new(size_hint=self.length())\n  for c in self.rev_iter() {\n    buf.write_char(c)\n  }\n  buf.to_string()\n}\n\n///|\n/// Returns a new string with the characters in reverse order. It respects\n/// Unicode characters and surrogate pairs but not grapheme clusters.\npub fn rev(self : String) -> String {\n  self[:].rev()\n}\n\n///|\ntest \"rev\" {\n  inspect(\"hello\".rev(), content=\"olleh\")\n  inspect(\"\".rev(), content=\"\")\n  inspect(\"abc\".rev(), content=\"cba\")\n  inspect(\"üòÄüòÉ\".rev(), content=\"üòÉüòÄ\")\n}\n\n///|\n/// Splits the string into all substrings separated by the given separator.\n/// \n/// If the string does not contain the separator and the separator is not empty,\n/// the returned iterator will contain only one element, which is the original\n/// string.\n/// \n/// If the separator is empty, the returned iterator will contain all the\n/// characters in the string as single elements.\npub fn View::split(self : View, sep : View) -> Iter[View] {\n  let sep_len = sep.length()\n  if sep_len == 0 {\n    return self.iter().map(c => c.to_string().view())\n  }\n  Iter::new(yield_ => {\n    let mut view = self\n    while view.find(sep) is Some(end) {\n      guard yield_(view.view(end_offset=end)) is IterContinue else {\n        break IterEnd\n      }\n      view = view.view(start_offset=end + sep_len)\n    } else {\n      yield_(view)\n    }\n  })\n}\n\n///|\n/// Splits the string into all substrings separated by the given separator.\n/// \n/// If the string does not contain the separator and the separator is not empty,\n/// the returned iterator will contain only one element, which is the original\n/// string.\n/// \n/// If the separator is empty, the returned iterator will contain all the\n/// characters in the string as single elements.\npub fn split(self : String, sep : View) -> Iter[View] {\n  self[:].split(sep)\n}\n\n///|\ntest \"split\" {\n  assert_eq(\"a,b,c\".split(\",\").map(View::to_string).collect(), [\"a\", \"b\", \"c\"])\n  assert_eq(\"a,b,c\".split(\"\").map(View::to_string).collect(), [\n    \"a\", \",\", \"b\", \",\", \"c\",\n  ])\n  assert_eq(\n    \"apple::orange::banana\".split(\"::\").map(View::to_string).collect(),\n    [\"apple\", \"orange\", \"banana\"],\n  )\n  assert_eq(\"abc\".split(\"\").map(View::to_string).collect(), [\"a\", \"b\", \"c\"])\n  assert_eq(\"hello\".split(\",\").map(View::to_string).collect(), [\"hello\"])\n  assert_eq(\",a,b,c\".split(\",\").map(View::to_string).collect(), [\n    \"\", \"a\", \"b\", \"c\",\n  ])\n  assert_eq(\"a,b,c,\".split(\",\").map(View::to_string).collect(), [\n    \"a\", \"b\", \"c\", \"\",\n  ])\n  assert_eq(\"a,b,c\".split(\"\").map(View::to_string).collect(), [\n    \"a\", \",\", \"b\", \",\", \"c\",\n  ])\n  assert_eq(\"\".split(\"\").map(View::to_string).collect(), [])\n  assert_eq(\"\".split(\",\").map(View::to_string).collect(), [\"\"])\n  assert_eq(\"üòÄ,üòÉ,üòÑ\".split(\",\").map(View::to_string).collect(), [\n    \"üòÄ\", \"üòÉ\", \"üòÑ\",\n  ])\n  assert_eq(\"aüòÄbüòÄc\".split(\"üòÄ\").map(View::to_string).collect(), [\n    \"a\", \"b\", \"c\",\n  ])\n}\n\n///|\n/// Replaces the first occurrence of `old` with `new` in `self`.\n/// \n/// If `old` is empty, it matches the beginning of the string, and `new` is\n/// prepended to the string.\npub fn View::replace(self : View, old~ : View, new~ : View) -> View {\n  match self.find(old) {\n    Some(end) =>\n      [\n        ..self.view(end_offset=end),\n        ..new,\n        ..self.view(start_offset=end + old.length()),\n      ]\n    None => self\n  }\n}\n\n///|\n/// Replaces the first occurrence of `old` with `new` in `self`.\n/// \n/// If `old` is empty, it matches the beginning of the string, and `new` is\n/// prepended to the string.\npub fn replace(self : String, old~ : View, new~ : View) -> String {\n  match self.find(old) {\n    Some(end) =>\n      [\n        ..self.view(end_offset=end),\n        ..new,\n        ..self.view(start_offset=end + old.length()),\n      ]\n    None => self\n  }\n}\n\n///|\ntest \"replace\" {\n  inspect(\"hello\".replace(old=\"o\", new=\"a\"), content=\"hella\")\n  inspect(\"hello\".replace(old=\"l\", new=\"a\"), content=\"healo\")\n  inspect(\"hello\".replace(old=\"hello\", new=\"a\"), content=\"a\")\n  inspect(\"hello\".replace(old=\"h\", new=\"a\"), content=\"aello\")\n  inspect(\"hello\".replace(old=\"\", new=\"a\"), content=\"ahello\")\n  inspect(\"hello\".replace(old=\"world\", new=\"a\"), content=\"hello\")\n  inspect(\"\".replace(old=\"\", new=\"a\"), content=\"a\")\n}\n\n///|\n/// Replaces all non-overlapping occurrences of `old` with `new` in `self`.\n/// \n/// If `old` is empty, it matches at the beginning of the string and after each\n/// character in the string, so `new` is inserted at the beginning of the string\n/// and after each character.\npub fn View::replace_all(self : View, old~ : View, new~ : View) -> View {\n  let len = self.length()\n  let buf = StringBuilder::new(size_hint=len)\n  let old_len = old.length()\n  let new = new.to_string()\n  // use write_substring to avoid intermediate allocations\n  if old_len == 0 {\n    buf.write_string(new)\n    for c in self {\n      buf.write_char(c)\n      buf.write_string(new)\n    }\n    buf.to_string()\n  } else {\n    let first_end = self.find(old)\n    if first_end is Some(end) {\n      for view = self, end = end {\n        let seg = view.view(end_offset=end)\n        buf.write_substring(seg.data(), seg.start_offset(), seg.length())\n        buf.write_string(new)\n        // check if there is no more characters after the last occurrence of `old`\n        guard end + old_len <= len else { break }\n        let next_view = view.view(start_offset=end + old_len)\n        guard next_view.find(old) is Some(next_end) else {\n          buf.write_substring(\n            next_view.data(),\n            next_view.start_offset(),\n            next_view.length(),\n          )\n          break\n        }\n        continue next_view, next_end\n      }\n      buf.to_string()\n    } else {\n      self\n    }\n  }\n}\n\n///|\n/// Replaces all non-overlapping occurrences of `old` with `new` in `self`.\n/// \n/// If `old` is empty, it matches at the beginning of the string and after each\n/// character in the string, so `new` is inserted at the beginning of the string\n/// and after each character.\npub fn replace_all(self : String, old~ : View, new~ : View) -> String {\n  let len = self.length()\n  let buf = StringBuilder::new(size_hint=len)\n  let old_len = old.length()\n  let new = new.to_string()\n  // use write_substring to avoid intermediate allocations\n  if old_len == 0 {\n    buf.write_string(new)\n    for c in self {\n      buf.write_char(c)\n      buf.write_string(new)\n    }\n    buf.to_string()\n  } else {\n    let first_end = self.find(old)\n    if first_end is Some(end) {\n      for view = self[:], end = end {\n        let seg = view.view(end_offset=end)\n        buf.write_substring(seg.data(), seg.start_offset(), seg.length())\n        buf.write_string(new)\n        // check if there is no more characters after the last occurrence of `old`\n        guard end + old_len <= len else { break }\n        let next_view = view.view(start_offset=end + old_len)\n        guard next_view.find(old) is Some(next_end) else {\n          buf.write_substring(\n            next_view.data(),\n            next_view.start_offset(),\n            next_view.length(),\n          )\n          break\n        }\n        continue next_view, next_end\n      }\n      buf.to_string()\n    } else {\n      self\n    }\n  }\n}\n\n///|\ntest \"replace_all\" {\n  assert_eq(\"hello\".replace_all(old=\"o\", new=\"a\"), \"hella\")\n  assert_eq(\"hello\".replace_all(old=\"l\", new=\"a\"), \"heaao\")\n  assert_eq(\"hello\".replace_all(old=\"ll\", new=\"rr\"), \"herro\")\n  assert_eq(\"hello\".replace_all(old=\"hello\", new=\"world\"), \"world\")\n  assert_eq(\"hello hello hello\".replace_all(old=\"hello\", new=\"hi\"), \"hi hi hi\")\n  assert_eq(\n    \"hello hello helloi\".replace_all(old=\"hello\", new=\"hi\"),\n    \"hi hi hii\",\n  )\n  assert_eq(\n    \"hi hi hii\".replace_all(old=\"hi\", new=\"hello\"),\n    \"hello hello helloi\",\n  )\n  assert_eq(\"hello\".replace_all(old=\"\", new=\"a\"), \"ahaealalaoa\")\n  assert_eq(\"hello\".replace_all(old=\"world\", new=\"a\"), \"hello\")\n  assert_eq(\"\".replace_all(old=\"\", new=\"a\"), \"a\")\n  assert_eq(\"aaa\".replace_all(old=\"a\", new=\"b\"), \"bbb\")\n  assert_eq(\"aaa\".replace_all(old=\"a\", new=\"bb\"), \"bbbbbb\")\n  assert_eq(\"aaa\".replace_all(old=\"aa\", new=\"b\"), \"ba\")\n  assert_eq(\"ü§£ü§£ü§£\".replace_all(old=\"ü§£\", new=\"üòä\"), \"üòäüòäüòä\")\n  assert_eq(\"abc123abc\".replace_all(old=\"abc\", new=\"xyz\"), \"xyz123xyz\")\n  assert_eq(\"abcabcabc\".replace_all(old=\"abc\", new=\"\"), \"\")\n  assert_eq(\"abc\".replace_all(old=\"abc\", new=\"\"), \"\")\n  assert_eq(\"abc\".replace_all(old=\"\", new=\"x\"), \"xaxbxcx\")\n}\n\n///|\ntest \"View::replace_all\" {\n  assert_eq(\"hello\"[:].replace_all(old=\"o\", new=\"a\"), \"hella\")\n  assert_eq(\"hello\"[:].replace_all(old=\"l\", new=\"a\"), \"heaao\")\n  assert_eq(\"hello\"[:].replace_all(old=\"ll\", new=\"rr\"), \"herro\")\n  assert_eq(\"hello\"[:].replace_all(old=\"hello\", new=\"world\"), \"world\")\n  assert_eq(\n    \"hello hello hello\"[:].replace_all(old=\"hello\", new=\"hi\"),\n    \"hi hi hi\",\n  )\n  assert_eq(\n    \"hello hello helloi\"[:].replace_all(old=\"hello\", new=\"hi\"),\n    \"hi hi hii\",\n  )\n  assert_eq(\n    \"hi hi hii\"[:].replace_all(old=\"hi\", new=\"hello\"),\n    \"hello hello helloi\",\n  )\n  assert_eq(\"hello\"[:].replace_all(old=\"\", new=\"a\"), \"ahaealalaoa\")\n  assert_eq(\"hello\"[:].replace_all(old=\"world\", new=\"a\"), \"hello\")\n  assert_eq(\"\"[:].replace_all(old=\"\", new=\"a\"), \"a\")\n  assert_eq(\"aaa\"[:].replace_all(old=\"a\", new=\"b\"), \"bbb\")\n  assert_eq(\"aaa\"[:].replace_all(old=\"a\", new=\"bb\"), \"bbbbbb\")\n  assert_eq(\"aaa\"[:].replace_all(old=\"aa\", new=\"b\"), \"ba\")\n  assert_eq(\n    \"ü§£ü§£ü§£\"[:].replace_all(old=\"ü§£\", new=\"üòä\"),\n    \"üòäüòäüòä\",\n  )\n  assert_eq(\"abc123abc\"[:].replace_all(old=\"abc\", new=\"xyz\"), \"xyz123xyz\")\n  assert_eq(\"abcabcabc\"[:].replace_all(old=\"abc\", new=\"\"), \"\")\n  assert_eq(\"abc\"[:].replace_all(old=\"abc\", new=\"\"), \"\")\n  assert_eq(\"abc\"[:].replace_all(old=\"\", new=\"x\"), \"xaxbxcx\")\n}\n\n///|\n/// Converts this string to lowercase.\npub fn View::to_lower(self : View) -> View {\n  // TODO: deal with non-ascii characters\n  guard self.find_by(_.is_ascii_uppercase()) is Some(idx) else { return self }\n  let buf = StringBuilder::new(size_hint=self.length())\n  let head = self.view(end_offset=idx)\n  buf.write_substring(head.data(), head.start_offset(), head.length())\n  for c in self.view(start_offset=idx) {\n    if c.is_ascii_uppercase() {\n      // 'A' is 65 in ASCII, 'a' is 97, the difference is 32\n      buf.write_char((c.to_int() + 32).unsafe_to_char())\n    } else {\n      buf.write_char(c)\n    }\n  }\n  buf.to_string()\n}\n\n///|\n/// Converts this string to lowercase.\npub fn to_lower(self : String) -> String {\n  // TODO: deal with non-ascii characters\n  guard self.find_by(_.is_ascii_uppercase()) is Some(idx) else { return self }\n  let buf = StringBuilder::new(size_hint=self.length())\n  let head = self.view(end_offset=idx)\n  buf.write_substring(head.data(), head.start_offset(), head.length())\n  for c in self.view(start_offset=idx) {\n    if c.is_ascii_uppercase() {\n      // 'A' is 65 in ASCII, 'a' is 97, the difference is 32\n      buf.write_char((c.to_int() + 32).unsafe_to_char())\n    } else {\n      buf.write_char(c)\n    }\n  }\n  buf.to_string()\n}\n\n///|\ntest \"to_lower\" {\n  assert_eq(\"Hello\".to_lower(), \"hello\")\n  assert_eq(\"HELLO\".to_lower(), \"hello\")\n  assert_eq(\"Hello, World!\".to_lower(), \"hello, world!\")\n}\n\n///|\ntest \"View::to_lower\" {\n  assert_eq(\"Hello\"[:].to_lower(), \"hello\")\n  assert_eq(\"HELLO\"[:].to_lower(), \"hello\")\n  assert_eq(\"Hello, World!\"[:].to_lower(), \"hello, world!\")\n}\n\n///|\n/// Converts this string to uppercase.\npub fn View::to_upper(self : View) -> View {\n  // TODO: deal with non-ascii characters\n  guard self.find_by(_.is_ascii_lowercase()) is Some(idx) else { return self }\n  let buf = StringBuilder::new(size_hint=self.length())\n  let head = self.view(end_offset=idx)\n  buf.write_substring(head.data(), head.start_offset(), head.length())\n  for c in self.view(start_offset=idx) {\n    if c.is_ascii_lowercase() {\n      buf.write_char((c.to_int() - 32).unsafe_to_char())\n    } else {\n      buf.write_char(c)\n    }\n  }\n  buf.to_string()\n}\n\n///|\n/// Converts this string to uppercase.\npub fn to_upper(self : String) -> String {\n  // TODO: deal with non-ascii characters\n  guard self.find_by(_.is_ascii_lowercase()) is Some(idx) else { return self }\n  let buf = StringBuilder::new(size_hint=self.length())\n  let head = self.view(end_offset=idx)\n  buf.write_substring(head.data(), head.start_offset(), head.length())\n  for c in self.view(start_offset=idx) {\n    if c.is_ascii_lowercase() {\n      buf.write_char((c.to_int() - 32).unsafe_to_char())\n    } else {\n      buf.write_char(c)\n    }\n  }\n  buf.to_string()\n}\n\n///|\ntest \"to_upper\" {\n  assert_eq(\"hello\".to_upper(), \"HELLO\")\n  assert_eq(\"HELLO\".to_upper(), \"HELLO\")\n  assert_eq(\"Hello, World!\".to_upper(), \"HELLO, WORLD!\")\n}\n\n///|\ntest \"View::to_upper\" {\n  assert_eq(\"hello\"[:].to_upper(), \"HELLO\")\n  assert_eq(\"HELLO\"[:].to_upper(), \"HELLO\")\n  assert_eq(\"Hello, World!\"[:].to_upper(), \"HELLO, WORLD!\")\n}\n\n///|\n/// Folds the characters of the string into a single value.\npub fn[A] View::fold(self : View, init~ : A, f : (A, Char) -> A) -> A {\n  let mut rv = init\n  for c in self {\n    rv = f(rv, c)\n  }\n  rv\n}\n\n///| Folds the characters of the string into a single value.\npub fn[A] fold(self : String, init~ : A, f : (A, Char) -> A) -> A {\n  self[:].fold(init~, f)\n}\n\n///|\ntest \"fold\" {\n  assert_eq(\n    \"hello\".fold(init=[], (acc, c) => {\n      acc.push(c)\n      acc\n    }),\n    ['h', 'e', 'l', 'l', 'o'],\n  )\n  assert_eq(\n    \"hello\".fold(init=0, (acc, c) => acc + c.to_int()),\n    104 + 101 + 108 + 108 + 111,\n  )\n}\n\n///|\npub fn[A] View::rev_fold(self : View, init~ : A, f : (A, Char) -> A) -> A {\n  let mut rv = init\n  for c in self.rev_iter() {\n    rv = f(rv, c)\n  }\n  rv\n}\n\n///|\npub fn[A] rev_fold(self : String, init~ : A, f : (A, Char) -> A) -> A {\n  self[:].rev_fold(init~, f)\n}\n\n///|\ntest \"rev_fold\" {\n  assert_eq(\n    \"hello\".rev_fold(init=[], (acc, c) => {\n      acc.push(c)\n      acc\n    }),\n    ['o', 'l', 'l', 'e', 'h'],\n  )\n  assert_eq(\n    \"hello\".rev_fold(init=0, (acc, c) => acc + c.to_int()),\n    111 + 108 + 108 + 101 + 104,\n  )\n}\n\n///|\n/// Returns the UTF-16 code unit at the given index. Returns `None` if the index\n/// is out of bounds.\npub fn String::get(self : String, idx : Int) -> Int? {\n  guard idx >= 0 && idx < self.length() else { return None }\n  Some(self.unsafe_charcode_at(idx))\n}\n\n///|\n/// Returns the UTF-16 code unit at the given index. Returns `None` if the index\n/// is out of bounds.\npub fn View::get(self : View, idx : Int) -> Int? {\n  guard idx >= 0 && idx < self.length() else { return None }\n  Some(self.unsafe_charcode_at(idx))\n}\n\n///|\ntest \"String::get supports emoji (surrogate pair)\" {\n  let s = \"hello\"\n  inspect(s.get(0), content=\"Some(104)\")\n  inspect(s.get(4), content=\"Some(111)\")\n  inspect(s.get(5), content=\"None\")\n  inspect(s.get(-1), content=\"None\")\n  let s = \"aü§£b\"\n  inspect(s.get(0), content=\"Some(97)\")\n  inspect(s.get(1), content=\"Some(55358)\")\n  inspect(s.get(2), content=\"Some(56611)\")\n  inspect(s.get(3), content=\"Some(98)\")\n  inspect(s.get(4), content=\"None\")\n}\n\n///|\ntest \"View::get basic cases\" {\n  let v = \"hello\"[1:-1]\n  inspect(v.get(0), content=\"Some(101)\")\n  inspect(v.get(2), content=\"Some(108)\")\n  inspect(v.get(3), content=\"None\")\n  inspect(v.get(-1), content=\"None\")\n  let v = \"abü§£cd\"[1:-1]\n  inspect(v.get(0), content=\"Some(98)\")\n  inspect(v.get(1), content=\"Some(55358)\")\n  inspect(v.get(2), content=\"Some(56611)\")\n}\n\n///|\n/// Returns the character at the given index. Returns `None` if the index is out\n/// of bounds or the index splits a surrogate pair.\npub fn String::get_char(self : String, idx : Int) -> Char? {\n  guard idx >= 0 && idx < self.length() else { return None }\n  let c = self.unsafe_charcode_at(idx)\n  if is_leading_surrogate(c) {\n    guard idx + 1 < self.length() else { return None }\n    let next = self.unsafe_charcode_at(idx + 1)\n    if is_trailing_surrogate(next) {\n      Some(code_point_of_surrogate_pair(c, next))\n    } else {\n      None\n    }\n  } else if is_trailing_surrogate(c) {\n    None\n  } else {\n    Some(c.unsafe_to_char())\n  }\n}\n\n///|\n/// Returns the character at the given index. Returns `None` if the index is out\n/// of bounds or the index splits a surrogate pair.\npub fn View::get_char(self : View, idx : Int) -> Char? {\n  guard idx >= 0 && idx < self.length() else { return None }\n  let c = self.unsafe_charcode_at(idx)\n  if is_leading_surrogate(c) {\n    guard idx + 1 < self.length() else { return None }\n    let next = self.unsafe_charcode_at(idx + 1)\n    if is_trailing_surrogate(next) {\n      Some(code_point_of_surrogate_pair(c, next))\n    } else {\n      None\n    }\n  } else if is_trailing_surrogate(c) {\n    None\n  } else {\n    Some(c.unsafe_to_char())\n  }\n}\n\n///|\ntest \"String::get_char basic cases\" {\n  // Basic ASCII characters\n  let s = \"hello\"\n  inspect(s.get_char(0), content=\"Some('h')\")\n  inspect(s.get_char(1), content=\"Some('e')\")\n  inspect(s.get_char(4), content=\"Some('o')\")\n  inspect(s.get_char(5), content=\"None\")\n  inspect(s.get_char(-1), content=\"None\")\n\n  // Contains emoji (surrogate pair)\n  let s = \"aü§£b\"\n  inspect(s.get_char(0), content=\"Some('a')\")\n  inspect(s.get_char(1), content=\"Some('ü§£')\")\n  inspect(s.get_char(2), content=\"None\") // Second half of surrogate pair is not a valid char\n  inspect(s.get_char(3), content=\"Some('b')\")\n  inspect(s.get_char(4), content=\"None\")\n}\n\n///|\ntest \"View::get_char basic cases\" {\n  let s = \"aü§£b\"\n  let v = s[0:-1]\n  inspect(v.get_char(0), content=\"Some('a')\")\n  inspect(v.get_char(1), content=\"Some('ü§£')\")\n  inspect(v.get_char(2), content=\"None\")\n  inspect(v.get_char(3), content=\"None\")\n  inspect(v.get_char(4), content=\"None\")\n\n  // Test substring view\n  let v2 = s[1:3] // Only contains the emoji surrogate pair\n  inspect(v2.get_char(0), content=\"Some('ü§£')\")\n  inspect(v2.get_char(1), content=\"None\")\n  inspect(v2.get_char(2), content=\"None\")\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Creates a new dynamic array from a fixed-size array.\n///\n/// Parameters:\n///\n/// * `arr` : The fixed-size array to convert. The elements of this array will be\n/// copied to the new array.\n///\n/// Returns a new dynamic array containing all elements from the input fixed-size\n/// array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let fixed = FixedArray::make(3, 42)\n///   let dynamic = Array::from_fixed_array(fixed)\n///   inspect(dynamic, content=\"[42, 42, 42]\")\n/// ```\npub fn[T] Array::from_fixed_array(arr : FixedArray[T]) -> Array[T] {\n  let len = arr.length()\n  let arr2 = Array::make_uninit(len)\n  UninitializedArray::unsafe_blit_fixed(arr2.buffer(), 0, arr, 0, len)\n  arr2\n}\n\n///|\n/// Creates a new array with a specified length and initializes all elements with\n/// the given value.\n///\n/// Parameters:\n///\n/// * `length` : The length of the array to create. Must be a non-negative\n/// integer.\n/// * `initial_value` : The value used to initialize all elements in the array.\n///\n/// Returns a new array of type `Array[T]` with `length` elements, where each\n/// element is initialized to `initial_value`.\n///\n/// Throws an error if `length` is negative.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = Array::make(3, 42)\n///   inspect(arr, content=\"[42, 42, 42]\")\n/// ```\n/// \n/// WARNING: A common pitfall is creating with the same initial value, for example:\n/// ```moonbit\n///   let two_dimension_array = Array::make(10, Array::make(10, 0))\n///   two_dimension_array[0][5] = 10\n///   assert_eq(two_dimension_array[5][5], 10)\n/// ```\n/// This is because all the cells reference to the same object (the Array[Int] in this case). \n/// One should use makei() instead which creates an object for each index.\npub fn[T] Array::make(len : Int, elem : T) -> Array[T] {\n  let arr = Array::make_uninit(len)\n  for i in 0..<len {\n    arr.unsafe_set(i, elem)\n  }\n  arr\n}\n\n///|\n/// Returns the total capacity of the array, which is the number of elements that\n/// the array can hold without requiring reallocation of its internal buffer.\n///\n/// Parameters:\n///\n/// * `array` : The array whose capacity is to be determined.\n///\n/// Returns the current capacity of the array as an integer.\n///\n/// NOTE: The capacity of an array may not be consistent across different backends\n/// and/or different versions of the MoonBit compiler/core.\npub fn[T] Array::capacity(self : Array[T]) -> Int {\n  self.buffer().inner().length()\n}\n\n///|\n/// Retrieves the element at the specified index from an array without bounds\n/// checking.\n///\n/// Parameters:\n///\n/// * `array` : The array from which to retrieve the element.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   inspect(arr.unsafe_get(1), content=\"2\")\n/// ```\n///\n#intrinsic(\"%array.unsafe_get\")\npub fn[T] Array::unsafe_get(self : Array[T], idx : Int) -> T {\n  self.buffer()[idx]\n}\n\n///|\n/// Retrieves an element from the array at the specified index.\n///\n/// Parameters:\n///\n/// * `array` : The array to get the element from.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index.\n///\n/// Throws a panic if the index is negative or greater than or equal to the\n/// length of the array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   inspect(arr[1], content=\"2\")\n/// ```\n///\n#intrinsic(\"%array.get\")\npub fn[T] Array::op_get(self : Array[T], index : Int) -> T {\n  let len = self.length()\n  guard index >= 0 && index < len\n  self.buffer()[index]\n}\n\n///|\n/// Retrieves the element at the specified index from the array.\n///\n/// Parameters:\n///\n/// * `self` : The array to get the element from.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns `Some(element)` if the index is within bounds, or `None` if the index\n/// is out of bounds.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   inspect(arr.get(-1), content=\"None\")\n///   inspect(arr.get(0), content=\"Some(1)\")\n///   inspect(arr.get(3), content=\"None\")\n/// ```\npub fn[T] Array::get(self : Array[T], index : Int) -> T? {\n  let len = self.length()\n  guard index >= 0 && index < len else { None }\n  Some(self.unsafe_get(index))\n}\n\n///|\n#intrinsic(\"%array.unsafe_set\")\nfn[T] Array::unsafe_set(self : Array[T], idx : Int, val : T) -> Unit {\n  self.buffer()[idx] = val\n}\n\n///|\n/// Sets the element at the specified index in the array to a new value. The\n/// original value at that index is overwritten.\n///\n/// Parameters:\n///\n/// * `array` : The array to modify.\n/// * `index` : The position in the array where the value will be set.\n/// * `value` : The new value to assign at the specified index.\n///\n/// Throws an error if `index` is negative or greater than or equal to the length\n/// of the array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   arr[1] = 42\n///   inspect(arr, content=\"[1, 42, 3]\")\n/// ```\n///\n#intrinsic(\"%array.set\")\npub fn[T] Array::op_set(self : Array[T], index : Int, value : T) -> Unit {\n  let len = self.length()\n  guard index >= 0 && index < len\n  self.buffer()[index] = value\n}\n\n///|\n/// Compares two arrays for equality. Returns true if both arrays have the same\n/// length and contain equal elements in the same order.\n///\n/// Parameters:\n///\n/// * `self` : The first array to compare.\n/// * `other` : The second array to compare.\n///\n/// Returns true if the arrays are equal, false otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr1 = [1, 2, 3]\n///   let arr2 = [1, 2, 3]\n///   let arr3 = [1, 2, 4]\n///   inspect(arr1 == arr2, content=\"true\")\n///   inspect(arr1 == arr3, content=\"false\")\n/// ```\npub impl[T : Eq] Eq for Array[T] with op_equal(self, other) {\n  let self_len = self.length()\n  let other_len = other.length()\n  guard self_len == other_len else { return false }\n  for i in 0..<self_len {\n    guard self.unsafe_get(i) == other.unsafe_get(i) else { break false }\n  } else {\n    true\n  }\n}\n\n///|\npub impl[T : Hash] Hash for Array[T] with hash_combine(self, hasher) {\n  for v in self {\n    v.hash_combine(hasher)\n  }\n}\n\n///|\n/// Compares two arrays lexicographically.\n///\n/// First compares the lengths of the arrays. If they differ, returns -1 if the\n/// first array is shorter, 1 if it's longer. If the lengths are equal, compares\n/// elements pairwise until a difference is found or all elements have been\n/// compared.\n///\n/// Parameters:\n///\n/// * `self` : The first array to compare.\n/// * `other` : The second array to compare.\n///\n/// Returns an integer that indicates the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr1 = [1, 2, 3]\n///   let arr2 = [1, 2, 4]\n///   let arr3 = [1, 2]\n///   inspect(arr1.compare(arr2), content=\"-1\") // arr1 < arr2\n///   inspect(arr2.compare(arr1), content=\"1\") // arr2 > arr1\n///   inspect(arr1.compare(arr3), content=\"1\") // arr1 > arr3 (longer)\n///   inspect(arr1.compare(arr1), content=\"0\") // arr1 = arr1\n/// ```\npub impl[T : Compare] Compare for Array[T] with compare(self, other) {\n  let len_self = self.length()\n  let len_other = other.length()\n  let cmp = len_self.compare(len_other)\n  guard cmp is 0 else { return cmp }\n  for i in 0..<len_self {\n    let cmp = self.unsafe_get(i).compare(other.unsafe_get(i))\n    guard cmp is 0 else { break cmp }\n  } else {\n    0\n  }\n}\n\n///|\n/// Concatenates two arrays into a new array. The resulting array contains all\n/// elements from the first array followed by all elements from the second array.\n///\n/// Parameters:\n///\n/// * `self` : The first array to concatenate.\n/// * `other` : The second array to concatenate.\n///\n/// Returns a new array containing all elements from both arrays in order.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = [1, 2, 3]\n///   let b = [4, 5]\n///   inspect(a + b, content=\"[1, 2, 3, 4, 5]\")\n/// ```\npub impl[T] Add for Array[T] with op_add(self, other) {\n  let result = Array::make_uninit(self.length() + other.length())\n  UninitializedArray::unsafe_blit(\n    result.buffer(),\n    0,\n    self.buffer(),\n    0,\n    self.length(),\n  )\n  UninitializedArray::unsafe_blit(\n    result.buffer(),\n    self.length(),\n    other.buffer(),\n    0,\n    other.length(),\n  )\n  result\n}\n\n///|\n/// Appends all elements from one array to the end of another array. The elements\n/// are added in-place, modifying the original array.\n///\n/// Parameters:\n///\n/// * `self` : The array to append to.\n/// * `other` : The array whose elements will be appended.\n///\n/// Example:\n///\n/// ```moonbit\n///   let v1 = [1, 2, 3]\n///   let v2 = [4, 5, 6]\n///   v1.append(v2)\n///   inspect(v1, content=\"[1, 2, 3, 4, 5, 6]\")\n///\n///   let v1 = [1, 2, 3]\n///   let v2 : Array[Int] = []\n///   v1.append(v2)\n///   inspect(v1, content=\"[1, 2, 3]\")\n/// ```\npub fn[T] Array::append(self : Array[T], other : Array[T]) -> Unit {\n  other.blit_to(\n    self,\n    len=other.length(),\n    src_offset=0,\n    dst_offset=self.length(),\n  )\n}\n\n///|\n/// Iterates through each element of the array in order, applying the given\n/// function to each element.\n///\n/// Parameters:\n///\n/// * `array` : The array to iterate over.\n/// * `function` : A function that takes a single element of type `T` as input\n/// and returns `Unit`. This function is applied to each element of the array in\n/// order.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   let mut sum = 0\n///   arr.each((x) => { sum = sum + x })\n///   inspect(sum, content=\"6\")\n/// ```\n#locals(f)\npub fn[T] Array::each(self : Array[T], f : (T) -> Unit raise?) -> Unit raise? {\n  for v in self {\n    f(v)\n  }\n}\n\n///|\n/// Iterates over the elements of the array in reverse order, applying the given\n/// function to each element.\n///\n/// Parameters:\n///\n/// * `array` : The array to iterate over.\n/// * `f` : A function that takes an element of type `T` and returns `Unit`. This\n/// function is applied to each element of the array in reverse order.\n///\n/// Example:\n///\n/// ```mbt\n///   let v = [3, 4, 5]\n///   let mut sum = 0\n///   v.rev_each((x) => { sum = sum - x })\n///   @json.inspect(sum, content=-12)\n/// ```\n#locals(f)\npub fn[T] Array::rev_each(self : Array[T], f : (T) -> Unit) -> Unit {\n  let len = self.length()\n  for i in 0..<len {\n    f(self[len - i - 1])\n  }\n}\n\n///|\n/// Iterates over the elements of the array with index in reversed order.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   let mut sum = 0\n///   v.rev_eachi((i, x) => { sum = sum + x + i })\n///   assert_eq(sum, 15)\n/// ```\n#locals(f)\npub fn[T] Array::rev_eachi(\n  self : Array[T],\n  f : (Int, T) -> Unit raise?\n) -> Unit raise? {\n  let len = self.length()\n  for i in 0..<len {\n    f(i, self[len - i - 1])\n  }\n}\n\n///|\n/// Iterates over the elements of the array with index.\n///\n/// # Example\n/// ```moonbit\n///   let v = [3, 4, 5]\n///   let mut sum = 0\n///   v.eachi((i, x) => {sum = sum + x + i})\n///   inspect(sum, content=\"15\")\n/// ```\n#locals(f)\npub fn[T] Array::eachi(\n  self : Array[T],\n  f : (Int, T) -> Unit raise?\n) -> Unit raise? {\n  for i, v in self {\n    f(i, v)\n  }\n}\n\n///|\n/// Clears the array, removing all values.\n///\n/// This method has no effect on the allocated capacity of the array, only setting the length to 0.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   v.clear()\n///   assert_eq(v.length(), 0)\n/// ```\npub fn[T] Array::clear(self : Array[T]) -> Unit {\n  self.unsafe_truncate_to_length(0)\n}\n\n///|\n/// Maps a function over the elements of the array.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   let v2 = v.map((x) => {x + 1})\n///   assert_eq(v2, [4, 5, 6])\n/// ```\n#locals(f)\npub fn[T, U] Array::map(\n  self : Array[T],\n  f : (T) -> U raise?\n) -> Array[U] raise? {\n  let arr = Array::make_uninit(self.length())\n  for i, v in self {\n    arr.unsafe_set(i, f(v))\n  }\n  arr\n}\n\n///|\n/// Maps a function over the elements of the array in place.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   v.map_inplace((x) => {x + 1})\n///   assert_eq(v, [4, 5, 6])\n/// ```\n#locals(f)\npub fn[T] Array::map_inplace(\n  self : Array[T],\n  f : (T) -> T raise?\n) -> Unit raise? {\n  for i, v in self {\n    self[i] = f(v)\n  }\n}\n\n///|\n/// Maps a function over the elements of the array with index.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   let v2 = v.mapi((i, x) => {x + i})\n///   assert_eq(v2, [3, 5, 7])\n/// ```\n#locals(f)\npub fn[T, U] Array::mapi(\n  self : Array[T],\n  f : (Int, T) -> U raise?\n) -> Array[U] raise? {\n  if self.length() == 0 {\n    return []\n  }\n  let arr = Array::make_uninit(self.length())\n  for i, v in self {\n    arr.unsafe_set(i, f(i, v))\n  }\n  arr\n}\n\n///|\n/// Maps a function over the elements of the array with index in place.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   v.mapi_inplace((i, x) => {x + i})\n///   assert_eq(v, [3, 5, 7])\n/// ```\n#locals(f)\npub fn[T] Array::mapi_inplace(\n  self : Array[T],\n  f : (Int, T) -> T raise?\n) -> Unit raise? {\n  for i, v in self {\n    self[i] = f(i, v)\n  }\n}\n\n///|\n/// Creates a new array containing all elements from the input array that satisfy\n/// the given predicate function.\n///\n/// Parameters:\n///\n/// * `array` : The array to filter.\n/// * `predicate` : A function that takes an element and returns a boolean\n/// indicating whether the element should be included in the result.\n///\n/// Returns a new array containing only the elements for which the predicate\n/// function returns `true`. The relative order of the elements is preserved.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   let evens = arr.filter((x) => { x % 2 == 0 })\n///   inspect(evens, content=\"[2, 4]\")\n/// ```\n#locals(f)\npub fn[T] Array::filter(\n  self : Array[T],\n  f : (T) -> Bool raise?\n) -> Array[T] raise? {\n  let arr = []\n  for v in self {\n    if f(v) {\n      arr.push(v)\n    }\n  }\n  arr\n}\n\n///|\n/// Tests whether the array contains no elements.\n///\n/// Parameters:\n///\n/// * `array` : The array to check.\n///\n/// Returns `true` if the array has no elements, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let empty : Array[Int] = []\n///   inspect(empty.is_empty(), content=\"true\")\n///   let non_empty = [1, 2, 3]\n///   inspect(non_empty.is_empty(), content=\"false\")\n/// ```\npub fn[T] Array::is_empty(self : Array[T]) -> Bool {\n  self.length() == 0\n}\n\n///|\n/// Tests whether the array is sorted in ascending order.\n///\n/// Parameters:\n///\n/// * `self` : The array to be tested.\n/// * `T` : The type of elements in the array. Must implement the `Compare`\n/// trait.\n///\n/// Returns a boolean value indicating whether the array is sorted in ascending\n/// order:\n///\n/// * `true` if the array is empty, contains only one element, or all elements\n/// are in ascending order.\n/// * `false` if any element is greater than the element that follows it.\n///\n/// Example:\n///\n/// ```moonbit\n///   let ascending = [1, 2, 3, 4, 5]\n///   let descending = [5, 4, 3, 2, 1]\n///   let unsorted = [1, 3, 2, 4, 5]\n///   inspect(ascending.is_sorted(), content=\"true\")\n///   inspect(descending.is_sorted(), content=\"false\")\n///   inspect(unsorted.is_sorted(), content=\"false\")\n/// ```\npub fn[T : Compare] Array::is_sorted(self : Array[T]) -> Bool {\n  for i = 1 {\n    if i >= self.length() {\n      break true\n    }\n    if self[i - 1] > self[i] {\n      break false\n    }\n    continue i + 1\n  }\n}\n\n///|\n/// Reverses the order of elements in an array in place, modifying the original\n/// array.\n///\n/// Parameters:\n///\n/// * `self` : The array to be reversed.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   arr.rev_inplace()\n///   inspect(arr, content=\"[5, 4, 3, 2, 1]\")\n///\n///   let arr : Array[Int] = []\n///   arr.rev_inplace()\n///   inspect(arr, content=\"[]\")\n/// ```\npub fn[T] Array::rev_inplace(self : Array[T]) -> Unit {\n  let len = self.length()\n  for i in 0..<(len / 2) {\n    let temp = self.unsafe_get(i)\n    self.unsafe_set(i, self.unsafe_get(len - i - 1))\n    self.unsafe_set(len - i - 1, temp)\n  }\n}\n\n///|\n/// Creates a new array with elements in reversed order.\n///\n/// Parameters:\n///\n/// * `self` : The array to be reversed.\n///\n/// Returns a new array containing the same elements as the input array but in\n/// reverse order. The original array remains unchanged.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.rev(), content=\"[5, 4, 3, 2, 1]\")\n///   inspect(arr, content=\"[1, 2, 3, 4, 5]\") // original array unchanged\n/// ```\npub fn[T] Array::rev(self : Array[T]) -> Array[T] {\n  let len = self.length()\n  let arr = Array::make_uninit(len)\n  for i in 0..<len {\n    arr.unsafe_set(i, self.unsafe_get(len - i - 1))\n  }\n  arr\n}\n\n///|\n/// Split the array into two at the given index.\n/// This function will panic if the index is out of bounds.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   let (v1, v2) = v.split_at(1)\n///   assert_eq(v1, [3])\n///   assert_eq(v2, [4, 5])\n/// ```\n/// TODO: perf could be optimized\npub fn[T] Array::split_at(self : Array[T], index : Int) -> (Array[T], Array[T]) {\n  if index < 0 || index > self.length() {\n    let len = self.length()\n    abort(\n      \"index out of bounds: the len is from 0 to \\{len} but the index is \\{index}\",\n    )\n  }\n  let v1 = Array::make_uninit(index)\n  let v2 = Array::make_uninit(self.length() - index)\n  UninitializedArray::unsafe_blit(v1.buffer(), 0, self.buffer(), 0, index)\n  if index != self.length() {\n    UninitializedArray::unsafe_blit(\n      v2.buffer(),\n      0,\n      self.buffer(),\n      index,\n      self.length() - index,\n    )\n  }\n  (v1, v2)\n}\n\n///|\n/// Checks whether the array contains an element equal to the given value.\n///\n/// Parameters:\n///\n/// * `array` : The array to search in.\n/// * `value` : The value to search for.\n///\n/// Returns `true` if the array contains an element equal to the given value,\n/// `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.contains(3), content=\"true\")\n///   inspect(arr.contains(6), content=\"false\")\n///\n///   let arr : Array[Int] = []\n///   inspect(arr.contains(1), content=\"false\")\n/// ```\npub fn[T : Eq] Array::contains(self : Array[T], value : T) -> Bool {\n  for v in self {\n    if v == value {\n      break true\n    }\n  } else {\n    false\n  }\n}\n\n///|\n/// Checks if the array begins with all elements of the provided prefix array in\n/// order.\n///\n/// Parameters:\n///\n/// * `self` : The array to check against.\n/// * `prefix` : The array containing the sequence of elements to look for at the\n/// beginning.\n///\n/// Returns `true` if the array starts with all elements in `prefix` in the same\n/// order, `false` otherwise. An empty prefix array always returns `true`, and a\n/// prefix longer than the array always returns `false`.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.starts_with([1, 2]), content=\"true\")\n///   inspect(arr.starts_with([2, 3]), content=\"false\")\n///   inspect(arr.starts_with([]), content=\"true\")\n///   inspect(arr.starts_with([1, 2, 3, 4, 5, 6]), content=\"false\")\n/// ```\npub fn[T : Eq] Array::starts_with(self : Array[T], prefix : Array[T]) -> Bool {\n  if prefix.length() > self.length() {\n    return false\n  }\n  for i in 0..<prefix.length() {\n    if self.unsafe_get(i) != prefix.unsafe_get(i) {\n      break false\n    }\n  } else {\n    true\n  }\n}\n\n///|\n/// Tests if an array ends with the given suffix.\n///\n/// Parameters:\n///\n/// * `self` : The array to check.\n/// * `suffix` : The array to test against.\n///\n/// Returns `true` if the array ends with the given suffix, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.ends_with([4, 5]), content=\"true\")\n///   inspect(arr.ends_with([3, 4]), content=\"false\")\n///   inspect(arr.ends_with([]), content=\"true\")\n///\n///   let arr : Array[Int] = []\n///   inspect(arr.ends_with([]), content=\"true\")\n///   inspect(arr.ends_with([1]), content=\"false\")\n/// ```\npub fn[T : Eq] Array::ends_with(self : Array[T], suffix : Array[T]) -> Bool {\n  if suffix.length() > self.length() {\n    return false\n  }\n  for i in 0..<suffix.length() {\n    if self.unsafe_get(self.length() - suffix.length() + i) !=\n      suffix.unsafe_get(i) {\n      break false\n    }\n  } else {\n    true\n  }\n}\n\n///|\n/// Removes a prefix from an array if it exists.\n///\n/// Parameters:\n///\n/// * `array` : The array to remove the prefix from.\n/// * `prefix` : The array to be removed from the beginning of `array`.\n///\n/// Returns `Some(array)` containing the remaining elements after removing the\n/// prefix if the array starts with the prefix, or `None` if the array doesn't\n/// start with the prefix.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.strip_prefix([1, 2]), content=\"Some([3, 4, 5])\")\n///   inspect(arr.strip_prefix([2, 3]), content=\"None\")\n/// ```\npub fn[T : Eq] Array::strip_prefix(\n  self : Array[T],\n  prefix : Array[T]\n) -> Array[T]? {\n  if self.starts_with(prefix) {\n    let v = Array::make_uninit(self.length() - prefix.length())\n    UninitializedArray::unsafe_blit(\n      v.buffer(),\n      0,\n      self.buffer(),\n      prefix.length(),\n      self.length() - prefix.length(),\n    )\n    Some(v)\n  } else {\n    None\n  }\n}\n\n///|\n/// Strip a suffix from the array.\n///\n/// If the array ends with the suffix, return the array before the suffix, otherwise return None.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   let v2 = v.strip_suffix([5])\n///   assert_eq(v2, Some([3, 4]))\n/// ```\npub fn[T : Eq] Array::strip_suffix(\n  self : Array[T],\n  suffix : Array[T]\n) -> Array[T]? {\n  if self.ends_with(suffix) {\n    let v = Array::make_uninit(self.length() - suffix.length())\n    let len = self.length() - suffix.length()\n    UninitializedArray::unsafe_blit(v.buffer(), 0, self.buffer(), 0, len)\n    Some(v)\n  } else {\n    None\n  }\n}\n\n///|\n/// Searches for the first occurrence of a value in the array and returns its\n/// index.\n///\n/// Parameters:\n///\n/// * `self` : The array to search in.\n/// * `value` : The value to search for.\n///\n/// Returns an `Option` containing the index of the first occurrence of `value`\n/// if found, or `None` if the value is not present in the array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 2, 4]\n///   inspect(arr.search(2), content=\"Some(1)\") // first occurrence\n///   inspect(arr.search(5), content=\"None\") // not found\n/// ```\npub fn[T : Eq] Array::search(self : Array[T], value : T) -> Int? {\n  for i, v in self {\n    if v == value {\n      break Some(i)\n    }\n  } else {\n    None\n  }\n}\n\n///| Search the index of the first element that satisfies the predicate.\n///\n/// # Example\n///\n/// ```mbt\n///   let v = [1, 2, 3, 4, 5]\n///   match v.search_by((x) => { x == 3 }) {\n///     Some(index) => assert_eq(index, 2) // 2\n///     None => println(\"Not found\")\n///   }\n/// ```\n#locals(f)\npub fn[T] Array::search_by(self : Array[T], f : (T) -> Bool) -> Int? {\n  for i, v in self {\n    if f(v) {\n      break Some(i)\n    }\n  } else {\n    None\n  }\n}\n\n///|\n/// Performs a binary search on a sorted array to find the index of a given element.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   let result = v.binary_search(3)\n///   assert_eq(result, Ok(0)) // The element 3 is found at index 0\n/// ```\n///\n/// # Arguments\n/// - `self`: The array in which to perform the search.\n/// - `value`: The element to search for in the array.\n///\n/// # Returns\n/// - `Result[Int, Int]`:\n/// If the element is found, an `Ok` variant is returned, containing the index of the matching element in the array.\n/// If there are multiple matches, the leftmost match will be returned.\n/// If the element is not found, an `Err` variant is returned, containing the index where the element could be inserted to maintain the sorted order.\n///\n/// # Notes\n/// - Ensure that the array is sorted in increasing order before calling this function.\n/// - If the array is not sorted, the returned result is undefined and should not be relied on.\npub fn[T : Compare] Array::binary_search(\n  self : Array[T],\n  value : T\n) -> Result[Int, Int] {\n  let len = self.length()\n  for i = 0, j = len; i < j; {\n    let h = i + (j - i) / 2\n    // Note even if self[h] == value, we still continue the search\n    // because we want to find the leftmost match\n    if self.unsafe_get(h) < value {\n      continue h + 1, j\n    } else {\n      continue i, h\n    }\n  } else {\n    if i < len && self.unsafe_get(i) == value {\n      Ok(i)\n    } else {\n      Err(i)\n    }\n  }\n}\n\n///|\n/// Performs a binary search on a sorted array using a custom comparison\n/// function. Returns the position of the matching element if found, or the\n/// position where the element could be inserted while maintaining the sorted\n/// order.\n///\n/// Parameters:\n///\n/// * `array` : The sorted array to search in.\n/// * `comparator` : A function that compares each element with the target value,\n/// returning:\n///  * A negative integer if the element is less than the target\n///  * Zero if the element equals the target\n///  * A positive integer if the element is greater than the target\n///\n/// Returns a `Result` containing either:\n///\n/// * `Ok(index)` if a matching element is found at position `index`\n/// * `Err(index)` if no match is found, where `index` is the position where the\n/// element could be inserted\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 3, 5, 7, 9]\n///   let find_3 = arr.binary_search_by((x) => {\n///     x.compare(3)\n///   })\n///   inspect(find_3, content=\"Ok(1)\")\n///   let find_4 = arr.binary_search_by((x) => {\n///     x.compare(4)\n///   })\n///   inspect(find_4, content=\"Err(2)\")\n/// ```\n///\n/// Notes:\n///\n/// * Assumes the array is sorted according to the ordering implied by the\n/// comparison function\n/// * For multiple matches, returns the leftmost matching position\n/// * Returns an insertion point that maintains the sort order when no match is\n/// found\n#locals(cmp)\npub fn[T] Array::binary_search_by(\n  self : Array[T],\n  cmp : (T) -> Int\n) -> Result[Int, Int] {\n  let len = self.length()\n  for i = 0, j = len; i < j; {\n    let h = i + (j - i) / 2\n    // Note even if self[h] == value, we still continue the search\n    // because we want to find the leftmost match\n    if cmp(self.unsafe_get(h)) < 0 {\n      continue h + 1, j\n    } else {\n      continue i, h\n    }\n  } else {\n    if i < len && cmp(self.unsafe_get(i)) == 0 {\n      Ok(i)\n    } else {\n      Err(i)\n    }\n  }\n}\n\n///|\n/// Swaps the values at two positions in the array.\n///\n/// Parameters:\n///\n/// * `array` : The array in which to swap elements.\n/// * `index1` : The index of the first element to be swapped.\n/// * `index2` : The index of the second element to be swapped.\n///\n/// This function will panic if either index is negative or greater than or equal to\n/// the length of the array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   arr.swap(0, 2)\n///   inspect(arr, content=\"[3, 2, 1]\")\n/// ```\npub fn[T] Array::swap(self : Array[T], i : Int, j : Int) -> Unit {\n  if i >= self.length() || j >= self.length() || i < 0 || j < 0 {\n    let len = self.length()\n    abort(\n      \"index out of bounds: the len is from 0 to \\{len} but the index is (\\{i}, \\{j})\",\n    )\n  }\n  let temp = self.unsafe_get(i)\n  self.unsafe_set(i, self.unsafe_get(j))\n  self.unsafe_set(j, temp)\n}\n\n///|\n/// Removes all elements from the array that do not satisfy the predicate\n/// function, modifying the array in place. The order of remaining elements is\n/// preserved.\n///\n/// Parameters:\n///\n/// * `array` : The array to be filtered.\n/// * `predicate` : A function that takes an element and returns `true` if the\n/// element should be kept, `false` if it should be removed.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   arr.retain((x) => { x % 2 == 0 })\n///   inspect(arr, content=\"[2, 4]\")\n///\n///   let arr = [1, 2, 3]\n///   arr.retain((x) => { x > 10 })\n///   inspect(arr, content=\"[]\")\n///\n///   let arr = [1, 2, 3]\n///   arr.retain(_ => true)\n///   inspect(arr, content=\"[1, 2, 3]\")\n/// ```\n/// TODO: perf could be improved\n#locals(f)\npub fn[T] Array::retain(self : Array[T], f : (T) -> Bool raise?) -> Unit raise? {\n  let len = self.length()\n  for i = 0, j = 0; i < len; {\n    let item = self.unsafe_get(i)\n    if f(item) {\n      self.unsafe_set(j, item)\n      continue i + 1, j + 1\n    }\n    continue i + 1, j\n  } else {\n    // we use `else` here to capture `j`\n    self.unsafe_truncate_to_length(j)\n  }\n}\n\n///|\n/// Resizes an array to a specified length, either by truncating if the new\n/// length is smaller, or by appending copies of a default value if the new\n/// length is larger.\n///\n/// Parameters:\n///\n/// * `array` : The array to be resized.\n/// * `new_length` : The desired length of the array after resizing.\n/// * `default_value` : The value to append when extending the array.\n///\n/// Throws a panic if `new_length` is negative.\n///\n/// Examples:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   arr.resize(3, 0)\n///   inspect(arr, content=\"[1, 2, 3]\")\n///\n///   let arr = [1, 2, 3]\n///   arr.resize(5, 0)\n///   inspect(arr, content=\"[1, 2, 3, 0, 0]\")\n/// ```\n///\npub fn[T] Array::resize(self : Array[T], new_len : Int, f : T) -> Unit {\n  if new_len < 0 {\n    abort(\"negative new length\")\n  }\n  if new_len < self.length() {\n    self.unsafe_truncate_to_length(new_len)\n  } else {\n    let len = self.length()\n    for _ in len..<new_len {\n      self.push(f)\n    }\n  }\n}\n\n///|\n/// Flattens a array of arrays into a array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let v = [[3, 4], [5, 6]].flatten()\n///   assert_eq(v, [3, 4, 5, 6])\n/// ```\npub fn[T] Array::flatten(self : Array[Array[T]]) -> Array[T] {\n  let mut len = 0\n  for x in self {\n    len += x.length()\n  }\n  let res = Array::make_uninit(len)\n  let mut i = 0\n  for xs in self {\n    res.unsafe_blit(i, xs, 0, xs.length())\n    i += xs.length()\n  }\n  res\n}\n\n///|\n/// Create a array by repeat a given array for a given times.\n///\n/// Example:\n///\n/// ```moonbit\n///   let v = [3, 4].repeat(2)\n///   assert_eq(v, [3, 4, 3, 4])\n/// ```\npub fn[T] Array::repeat(self : Array[T], times : Int) -> Array[T] {\n  let v = Array::new(capacity=self.length() * times)\n  for i in 0..<times {\n    v.append(self)\n  }\n  v\n}\n\n///|\n/// Fold out values from an array according to certain rules.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sum = [1, 2, 3, 4, 5].fold(init=0, (sum, elem) => sum + elem)\n///   assert_eq(sum, 15)\n/// ```\n#locals(f)\npub fn[A, B] Array::fold(\n  self : Array[A],\n  init~ : B,\n  f : (B, A) -> B raise?\n) -> B raise? {\n  for i = 0, acc = init; i < self.length(); {\n    continue i + 1, f(acc, self[i])\n  } else {\n    acc\n  }\n}\n\n///|\n/// Fold out values from an array according to certain rules in reversed turn.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sum = [1, 2, 3, 4, 5].rev_fold(init=0, (sum, elem) => sum + elem)\n///   assert_eq(sum, 15)\n/// ```\n#locals(f)\npub fn[A, B] Array::rev_fold(\n  self : Array[A],\n  init~ : B,\n  f : (B, A) -> B raise?\n) -> B raise? {\n  for i = self.length() - 1, acc = init; i >= 0; {\n    continue i - 1, f(acc, self[i])\n  } else {\n    acc\n  }\n}\n\n///|\n/// Fold out values from an array according to certain rules with index.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sum = [1, 2, 3, 4, 5].foldi(init=0, (index, sum, _elem) => sum + index)\n///   assert_eq(sum, 10)\n/// ```\n#locals(f)\npub fn[A, B] Array::foldi(\n  self : Array[A],\n  init~ : B,\n  f : (Int, B, A) -> B raise?\n) -> B raise? {\n  for i = 0, acc = init; i < self.length(); {\n    continue i + 1, f(i, acc, self[i])\n  } else {\n    acc\n  }\n}\n\n///|\n/// Fold out values from an array according to certain rules in reversed turn with index.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sum = [1, 2, 3, 4, 5].rev_foldi(init=0, (index, sum, _elem) => sum + index)\n///   assert_eq(sum, 10)\n/// ```\n#locals(f)\npub fn[A, B] Array::rev_foldi(\n  self : Array[A],\n  init~ : B,\n  f : (Int, B, A) -> B raise?\n) -> B raise? {\n  let len = self.length()\n  for i = len - 1, acc = init; i >= 0; {\n    continue i - 1, f(len - i - 1, acc, self[i])\n  } else {\n    acc\n  }\n}\n\n///|\n/// Removes consecutive duplicate elements from an array in-place, using equality\n/// comparison. The first occurrence of each element is retained while subsequent\n/// equal elements are removed.\n///\n/// Parameters:\n///\n/// * `array` : The array to remove duplicates from. Must contain elements that\n/// implement the `Eq` trait for equality comparison.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 2, 3, 3, 3, 2]\n///   arr.dedup()\n///   inspect(arr, content=\"[1, 2, 3, 2]\")\n///\n///   let arr = [1, 2, 2, 2, 3, 3]\n///   arr.dedup()\n///   inspect(arr, content=\"[1, 2, 3]\")\n///\n///   let arr : Array[Int] = []\n///   arr.dedup()\n///   inspect(arr, content=\"[]\")\n/// ```\n///\n/// Note: For best results when removing all duplicates regardless of position,\n/// sort the array before calling this function. When used on an unsorted array,\n/// this function only removes consecutive duplicates.\npub fn[T : Eq] Array::dedup(self : Array[T]) -> Unit {\n  if self.is_empty() {\n    return\n  }\n  let mut w = 1\n  for i in 1..<self.length() {\n    if self[i] != self[w - 1] {\n      self[w] = self[i]\n      w = w + 1\n    }\n  }\n  self.unsafe_truncate_to_length(w)\n}\n\n///|\n/// Extracts elements from an array that satisfy a given predicate function. The\n/// extracted elements are removed from the original array and returned as a new\n/// array. The relative order of the extracted elements is preserved.\n///\n/// Parameters:\n///\n/// * `array` : The array to extract elements from.\n/// * `predicate` : A function that takes an element and returns `true` if the\n/// element should be extracted, `false` otherwise.\n///\n/// Returns a new array containing all elements that satisfy the predicate\n/// function, in the order they appeared in the original array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   let extracted = arr.extract_if((x) => { x % 2 == 0 })\n///   inspect(extracted, content=\"[2, 4]\")\n///   inspect(arr, content=\"[1, 3, 5]\")\n/// ```\n#locals(f)\npub fn[T] Array::extract_if(self : Array[T], f : (T) -> Bool) -> Array[T] {\n  let v = []\n  let indices = []\n  for i in 0..<self.length() {\n    if f(self[i]) {\n      v.push(self[i])\n      indices.push(i)\n    }\n  }\n  for i in 0..<indices.length() {\n    self.remove(indices[i] - i) |> ignore\n  }\n  v\n}\n\n///|\n/// Divides an array into smaller arrays (chunks) of the specified size.\n///\n/// Parameters:\n///\n/// * `array` : The array to be divided into chunks.\n/// * `size` : The size of each chunk. Must be a positive integer.\n///\n/// Returns an array of arrays, where each inner array is a chunk containing\n/// elements from the original array. If the length of the original array is not\n/// divisible by the chunk size, the last chunk will contain fewer elements.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   let chunks = arr.chunks(2)\n///   inspect(chunks, content=\"[[1, 2], [3, 4], [5]]\")\n///\n///   let arr : Array[Int] = []\n///   inspect(arr.chunks(3), content=\"[]\")\n/// ```\npub fn[T] Array::chunks(self : Array[T], size : Int) -> Array[Array[T]] {\n  let chunks = []\n  let mut i = 0\n  while i < self.length() {\n    let chunk = Array::new(capacity=size)\n    for j = 0; j < size && i < self.length(); j = j + 1 {\n      chunk.push(self[i])\n      i = i + 1\n    }\n    chunks.push(chunk)\n  }\n  chunks\n}\n\n///|\n/// Groups consecutive elements of the array into chunks where adjacent elements\n/// satisfy the given predicate function.\n///\n/// Parameters:\n///\n/// * `array` : The array to be chunked.\n/// * `predicate` : A function that takes two adjacent elements and returns\n/// `true` if they should be in the same chunk, `false` otherwise.\n///\n/// Returns an array of arrays, where each inner array is a chunk of consecutive\n/// elements that satisfy the predicate with their adjacent elements.\n///\n/// Example:\n///\n/// ```moonbit\n///   let v = [1, 1, 2, 3, 2, 3, 2, 3, 4]\n///   let chunks = v.chunk_by((x, y) => { x <= y })\n///   inspect(chunks, content=\"[[1, 1, 2, 3], [2, 3], [2, 3, 4]]\")\n///\n///   let v : Array[Int] = []\n///   inspect(v.chunk_by((x, y) => { x <= y }), content=\"[]\")\n/// ```\n#locals(pred)\npub fn[T] Array::chunk_by(\n  self : Array[T],\n  pred : (T, T) -> Bool raise?\n) -> Array[Array[T]] raise? {\n  let chunks = []\n  let mut i = 0\n  while i < self.length() {\n    let chunk = []\n    chunk.push(self[i])\n    i = i + 1\n    while i < self.length() && pred(self[i - 1], self[i]) {\n      chunk.push(self[i])\n      i = i + 1\n    }\n    chunks.push(chunk)\n  }\n  chunks\n}\n\n///|\n/// Generates overlapping subslices (sliding windows) of the specified size.\n///\n/// Parameters:\n///\n/// * `array` : The array to be processed with sliding windows.\n/// * `size` : The window length. Must be a positive integer.\n///\n/// Returns an array of slices, where each inner slice is a contiguous subslice\n/// of the original array. Windows are produced with a step size of 1. If the\n/// original array's length is less than the specified window size, the result\n/// will be an empty array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   let windows = arr.windows(2)\n///   inspect(windows, content=\"[[1, 2], [2, 3], [3, 4], [4, 5]]\")\n///\n///   let arr = [1, 2]\n///   inspect(arr.windows(3), content=\"[]\")\n/// ```\npub fn[T] Array::windows(self : Array[T], size : Int) -> Array[ArrayView[T]] {\n  let len = self.length() - size + 1\n  if len < 1 {\n    return []\n  }\n  let windows = Array::new(capacity=len)\n  for i in 0..<len {\n    windows.push(self[i:i + size])\n  }\n  windows\n}\n\n///|\n/// Splits an array into chunks using a predicate function. Creates chunks by\n/// grouping consecutive elements that do not satisfy the predicate function.\n/// Elements that satisfy the predicate function are excluded from the resulting\n/// chunks and act as delimiters.\n///\n/// Parameters:\n///\n/// * `array` : The array to be split into chunks.\n/// * `predicate` : A function that takes an element and returns `true` if the\n/// element should be used as a delimiter.\n///\n/// Returns an array of arrays, where each inner array is a chunk of consecutive\n/// elements that do not satisfy the predicate.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 0, 2, 0, 3, 0, 4]\n///   inspect(arr.split((x) => { x == 0 }), content=\"[[1], [2], [3], [4]]\")\n///\n///   let arr = [0, 1, 0, 0, 2, 0]\n///   inspect(arr.split((x) => { x == 0 }), content=\"[[], [1], [], [2]]\")\n/// ```\n#locals(pred)\npub fn[T] Array::split(\n  self : Array[T],\n  pred : (T) -> Bool raise?\n) -> Array[Array[T]] raise? {\n  let chunks = []\n  let mut i = 0\n  while i < self.length() {\n    let chunk = []\n    while i < self.length() && !pred(self[i]) {\n      chunk.push(self[i])\n      i = i + 1\n    }\n    chunks.push(chunk)\n    i = i + 1\n  }\n  chunks\n}\n\n///|\n/// Creates an iterator over the elements of the array.\n///\n/// Parameters:\n///\n/// * `array` : The array to create an iterator from.\n///\n/// Returns an iterator that yields each element of the array in order.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   let mut sum = 0\n///   arr.iter().each((x) => { sum = sum + x })\n///   inspect(sum, content=\"6\")\n/// ```\npub fn[T] Array::iter(self : Array[T]) -> Iter[T] {\n  Iter::new(yield_ => for v in self {\n    guard yield_(v) is IterContinue else { break IterEnd }\n  } else {\n    IterContinue\n  })\n}\n\n///|\n/// Returns an iterator that yields elements from the array in reverse order,\n/// from the last element to the first.\n///\n/// Parameters:\n///\n/// * `array` : The array to iterate over in reverse order.\n///\n/// Returns an iterator that yields each element of the array, starting from the\n/// last element and moving towards the first.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   let result = []\n///   arr.rev_iter().each((x) => { result.push(x) })\n///   inspect(result, content=\"[3, 2, 1]\")\n/// ```\npub fn[T] Array::rev_iter(self : Array[T]) -> Iter[T] {\n  Iter::new(yield_ => for i = self.length() - 1; i >= 0; i = i - 1 {\n    guard yield_(self.unsafe_get(i)) is IterContinue else { break IterEnd }\n  } else {\n    IterContinue\n  })\n}\n\n///|\n/// Returns an iterator that provides both indices and values of the array in\n/// order.\n///\n/// Parameters:\n///\n/// * `self` : The array to iterate over.\n///\n/// Returns an iterator that yields tuples of index and value pairs, where\n/// indices start from 0.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [10, 20, 30]\n///   let mut sum = 0\n///   arr.iter2().each((i, x) => { sum = sum + i + x })\n///   inspect(sum, content=\"63\") // (0 + 10) + (1 + 20) + (2 + 30) = 63\n/// ```\npub fn[A] Array::iter2(self : Array[A]) -> Iter2[Int, A] {\n  Iter2::new(yield_ => for i, v in self {\n    guard yield_(i, v) is IterContinue else { break IterEnd }\n  } else {\n    IterContinue\n  })\n}\n\n///|\n/// Creates a new empty array.\n///\n/// Returns an empty array of type `Array[T]`.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr : Array[Int] = Array::default()\n///   inspect(arr.length(), content=\"0\")\n///   inspect(arr.is_empty(), content=\"true\")\n/// ```\npub impl[T] Default for Array[T] with default() {\n  []\n}\n\n///|\n/// Removes a back element from an array.\n///\n/// # Example\n/// ```mbt\n///   let array = [1, 2, 3, 4, 5]\n///   array.unsafe_pop_back()\n///   assert_eq(array.last(), Some(4))\n/// ```\n#internal(unsafe, \"Panic if the array is empty on non-JS backend.\")\npub fn[A] Array::unsafe_pop_back(self : Array[A]) -> Unit {\n  self.unsafe_pop() |> ignore\n}\n\n///|\n/// Truncates the array in-place to the specified length.\n///\n/// If `len` is greater than or equal to the current array length, \n/// the function does nothing. If `len` is 0, the array is cleared.\n/// Otherwise, removes elements from the end until the array reaches the given length.\n///\n/// Parameters:\n///\n/// * `self` : The target array (modified in-place).\n/// * `len` : The new desired length (must be non-negative).\n///\n/// Important: \n///   - If `len` is negative, the function does nothing.\n///   - If `len` exceeds current length, the array remains unchanged.\n///\n/// Example:\n///\n/// ```moonbit\n/// let arr = [1, 2, 3, 4, 5]\n/// arr.truncate(3)\n/// inspect(arr, content=\"[1, 2, 3]\")\n/// ```\npub fn[A] Array::truncate(self : Array[A], len : Int) -> Unit {\n  guard len >= 0 && len < self.length() else { return }\n  self.unsafe_truncate_to_length(len)\n}\n\n///|\n/// In-place filter and map for Array\n///\n/// # Example\n/// ```moonbit\n/// let arr = [1, 2, 3, 4, 5]\n/// arr.retain_map(fn(x) {\n///   if x % 2 == 0 {\n///     Some(x * 2)\n///   } else {\n///     None\n///   }\n/// })\n/// inspect(arr,content = \"[4, 8]\")\n/// ```\npub fn[A] Array::retain_map(self : Array[A], f : (A) -> A?) -> Unit {\n  if self.is_empty() {\n    return\n  }\n  let buf = self.buffer()\n  let len = self.length()\n  let mut write_idx = 0\n  for read_idx in 0..<len {\n    let val = buf[read_idx]\n    match f(val) {\n      Some(new_val) => {\n        buf[write_idx] = new_val\n        write_idx += 1\n      }\n      None => ()\n    }\n  }\n  self.unsafe_truncate_to_length(write_idx)\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn println_mono(s : String) -> Unit = \"%println\"\n\n///|\nfn[T] any_to_string(any : T) -> String = \"%any.to_string\"\n\n///|\n/// Prints any value that implements the `Show` trait to the standard output,\n/// followed by a newline.\n///\n/// Parameters:\n///\n/// * `value` : The value to be printed. Must implement the `Show` trait.\n///\n/// Example:\n///\n/// ```moonbit skip\n///   println(42)\n///   println(\"Hello, World!\")\n///   println([1, 2, 3])\n/// ```\npub fn[T : Show] println(input : T) -> Unit {\n  println_mono(input.to_string())\n}\n\n///|\n/// Represents an error type used by the `inspect` function to indicate failures\n/// in value inspection. Contains a string message describing the nature of the\n/// inspection failure.\n///\n/// Returns a type constructor that creates an error type from a string message.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x : Int = 42\n///   inspect(x, content=\"42\") // Raises InspectError with detailed failure message\n/// ```\npub(all) suberror InspectError String\n\n///|\nfn base64_encode(data : FixedArray[Byte]) -> String {\n  let base64 = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n  let buf = StringBuilder::new()\n  let len = data.length()\n  let rem = len % 3\n  for i = 0; i < len - rem; i = i + 3 {\n    let b0 = data[i].to_int()\n    let b1 = data[i + 1].to_int()\n    let b2 = data[i + 2].to_int()\n    let x0 = base64[(b0 & 0xFC) >> 2]\n    let x1 = base64[((b0 & 0x03) << 4) | ((b1 & 0xF0) >> 4)]\n    let x2 = base64[((b1 & 0x0F) << 2) | ((b2 & 0xC0) >> 6)]\n    let x3 = base64[b2 & 0x3F]\n    buf.write_char(x0.to_char())\n    buf.write_char(x1.to_char())\n    buf.write_char(x2.to_char())\n    buf.write_char(x3.to_char())\n  }\n  if rem == 1 {\n    let b0 = data[len - 1].to_int()\n    let x0 = base64[(b0 & 0xFC) >> 2]\n    let x1 = base64[(b0 & 0x03) << 4]\n    buf.write_char(x0.to_char())\n    buf.write_char(x1.to_char())\n    buf.write_char('=')\n    buf.write_char('=')\n  } else if rem == 2 {\n    let b0 = data[len - 2].to_int()\n    let b1 = data[len - 1].to_int()\n    let x0 = base64[(b0 & 0xFC) >> 2]\n    let x1 = base64[((b0 & 0x03) << 4) | ((b1 & 0xF0) >> 4)]\n    let x2 = base64[(b1 & 0x0F) << 2]\n    buf.write_char(x0.to_char())\n    buf.write_char(x1.to_char())\n    buf.write_char(x2.to_char())\n    buf.write_char('=')\n  }\n  buf.to_string()\n}\n\n///|\nfn base64_encode_string_codepoint(s : String) -> String {\n  // the input string is expected to be valid utf-16 string\n  let codepoint_length = s.char_length()\n  let data : FixedArray[Byte] = FixedArray::make(codepoint_length * 4, 0)\n  for i = 0, utf16_index = 0\n      i < codepoint_length\n      i = i + 1, utf16_index = utf16_index + 1 {\n    let c = s.unsafe_char_at(utf16_index).to_int()\n    if c > 0xFFFF {\n      data[i * 4] = (c & 0xFF).to_byte()\n      data[i * 4 + 1] = ((c >> 8) & 0xFF).to_byte()\n      data[i * 4 + 2] = ((c >> 16) & 0xFF).to_byte()\n      data[i * 4 + 3] = ((c >> 24) & 0xFF).to_byte()\n      continue i + 1, utf16_index + 2\n    } else {\n      data[i * 4] = (c & 0xFF).to_byte()\n      data[i * 4 + 1] = ((c >> 8) & 0xFF).to_byte()\n      data[i * 4 + 2] = 0\n      data[i * 4 + 3] = 0\n    }\n  }\n  base64_encode(data)\n}\n\n///|\ntest {\n  inspect(base64_encode_string_codepoint(\"\"))\n  inspect(base64_encode_string_codepoint(\"a\"), content=\"YQAAAA==\")\n  inspect(base64_encode_string_codepoint(\"ab\"), content=\"YQAAAGIAAAA=\")\n  inspect(base64_encode_string_codepoint(\"abc\"), content=\"YQAAAGIAAABjAAAA\")\n  inspect(\n    base64_encode_string_codepoint(\"abcd\"),\n    content=\"YQAAAGIAAABjAAAAZAAAAA==\",\n  )\n  inspect(\n    base64_encode_string_codepoint(\"abcde\"),\n    content=\"YQAAAGIAAABjAAAAZAAAAGUAAAA=\",\n  )\n  inspect(base64_encode_string_codepoint(\"a‰∏≠\"), content=\"YQAAAC1OAAA=\")\n  inspect(\n    base64_encode_string_codepoint(\"a‰∏≠ü§£\"),\n    content=\"YQAAAC1OAAAj+QEA\",\n  )\n  inspect(\n    base64_encode_string_codepoint(\"a‰∏≠ü§£a\"),\n    content=\"YQAAAC1OAAAj+QEAYQAAAA==\",\n  )\n  inspect(\n    base64_encode_string_codepoint(\"a‰∏≠ü§£‰∏≠\"),\n    content=\"YQAAAC1OAAAj+QEALU4AAA==\",\n  )\n}\n\n///|\n/// Tests if the string representation of an object matches the expected content.\n/// Used primarily in test cases to verify the correctness of `Show`\n/// implementations and program outputs.\n///\n/// Parameters:\n///\n/// * `object` : The object to be inspected. Must implement the `Show` trait.\n/// * `content` : The expected string representation of the object. Defaults to\n/// an empty string.\n/// * `location` : Source code location information for error reporting.\n/// Automatically provided by the compiler.\n/// * `arguments_location` : Location information for function arguments in\n/// source code. Automatically provided by the compiler.\n///\n/// Throws an `InspectError` if the actual string representation of the object\n/// does not match the expected content. The error message includes detailed\n/// information about the mismatch, including source location and both expected\n/// and actual values.\n///\n/// Example:\n///\n/// ```moonbit skip\n///   inspect(42, content=\"42\")\n///   inspect(\"hello\", content=\"hello\")\n///   inspect([1, 2, 3], content=\"[1, 2, 3]\")\n/// ```\npub fn inspect(\n  obj : &Show,\n  content~ : String = \"\",\n  loc~ : SourceLoc = _,\n  args_loc~ : ArgsLoc = _\n) -> Unit raise InspectError {\n  let actual = obj.to_string()\n  if actual != content {\n    let loc = loc.to_string().escape()\n    let args_loc = args_loc.to_json().escape()\n    let expect_escaped = content.escape()\n    let actual_escaped = actual.escape()\n    let expect_base64 = \"\\\"\\{base64_encode_string_codepoint(content)}\\\"\"\n    let actual_base64 = \"\\\"\\{base64_encode_string_codepoint(actual)}\\\"\"\n    raise InspectError(\n      \"@EXPECT_FAILED {\\\"loc\\\": \\{loc}, \\\"args_loc\\\": \\{args_loc}, \\\"expect\\\": \\{expect_escaped}, \\\"actual\\\": \\{actual_escaped}, \\\"expect_base64\\\": \\{expect_base64}, \\\"actual_base64\\\": \\{actual_base64}}\",\n    )\n  }\n}\n\n///|\n/// Represents an error that occurs during snapshot testing. Contains a string\n/// message describing the error.\n///\n/// Used internally by the test driver to handle snapshot-related errors. Not\n/// intended for direct use by end users.\n///\n/// Example:\n///\n/// ```moonbit\n///   let err : SnapshotError = SnapshotError(\"failed to load snapshot\")\n///   match err {\n///     SnapshotError(msg) => assert_eq(msg, \"failed to load snapshot\")\n///   }\n/// ```\npub(all) suberror SnapshotError String\n\n///|\npub(all) suberror BenchError String\n\n///|\ntest \"panic error case of inspect\" {\n  let x : Int = 42\n  inspect(x, content=\"100\")\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nconst GPRIME1 : UInt = 0x9E3779B1\n\n///|\nconst GPRIMES2 : UInt = 0x85EBCA77\n\n///|\nconst GPRIME3 : UInt = 0xC2B2AE3D\n\n///|\nconst GPRIME4 : UInt = 0x27D4EB2F\n\n///|\nconst GPRIME5 : UInt = 0x165667B1\n\n///|\n/// Represents a hasher that implements the xxHash32 algorithm. The hasher\n/// maintains a mutable accumulator that is updated with each value added to the\n/// hash computation.\n///\n/// This struct provides methods for combining different types of values into a\n/// single hash value, making it suitable for implementing hash functions for\n/// custom types.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_int(42)\n///   hasher.combine_string(\"hello\")\n///   inspect(hasher.finalize(), content=\"860601284\")\n/// ```\nstruct Hasher {\n  mut acc : UInt\n}\n\n///|\n/// Creates a new hasher with an optional seed value.\n///\n/// Parameters:\n///\n/// * `seed` : An integer value used to initialize the hasher's internal state.\n/// Defaults to 0.\n///\n/// Returns a new `Hasher` instance initialized with the given seed value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let h1 = Hasher::new() // Create a hasher with default seed\n///   let h2 = Hasher::new(seed=42) // Create a hasher with custom seed\n///   let x = 123\n///   h1.combine(x)\n///   h2.combine(x)\n///   inspect(h1.finalize() != h2.finalize(), content=\"true\") // Different seeds produce different hashes\n/// ```\npub fn Hasher::new(seed~ : Int = 0) -> Hasher {\n  { acc: seed.reinterpret_as_uint() + GPRIME5 }\n}\n\n///|\n/// Combines a hashable value with the current state of the hasher. This is\n/// typically used to incrementally build a hash value from multiple components.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : The value to be combined with the current hash state. Must\n/// implement the `Hash` trait.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine(42)\n///   hasher.combine(\"hello\")\n///   inspect(hasher.finalize(), content=\"860601284\")\n/// ```\npub fn[T : Hash] Hasher::combine(self : Hasher, value : T) -> Unit {\n  value.hash_combine(self)\n}\n\n///|\n/// Combines the unit value (i.e., `()`) into the hasher's internal state by\n/// hashing it as an integer value of 0.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object to combine the unit value into.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_unit()\n///   inspect(hasher.finalize(), content=\"148298089\")\n/// ```\npub fn Hasher::combine_unit(self : Hasher) -> Unit {\n  self.combine_uint(0)\n}\n\n///|\n/// Combines a boolean value into the current hash state. The boolean value is\n/// converted to an integer (1 for true, 0 for false) before being combined with\n/// the hash.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : The boolean value to be combined into the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_bool(true)\n///   inspect(hasher.finalize(), content=\"-205818221\")\n/// ```\npub fn Hasher::combine_bool(self : Hasher, value : Bool) -> Unit {\n  self.combine_uint(if value { 1 } else { 0 })\n}\n\n///|\n/// Combines a 32-bit integer value into the hasher's internal state. The value\n/// is processed\n/// as a 4-byte sequence, and the internal accumulator is updated accordingly.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : A 32-bit integer value to be incorporated into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_int(42)\n///   inspect(hasher.finalize(), content=\"1161967057\")\n/// ```\npub fn Hasher::combine_int(self : Hasher, value : Int) -> Unit {\n  self.combine_uint(value.reinterpret_as_uint())\n}\n\n///|\n/// Combines a 64-bit integer value into the hash state by splitting it into two\n/// 32-bit parts and processing them separately. This method is used internally\n/// by the hash implementation to incorporate 64-bit integers into the hash\n/// computation.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object whose internal state will be updated.\n/// * `value` : The 64-bit integer value to be incorporated into the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_int64(42L)\n///   inspect(hasher.finalize(), content=\"-1962516083\")\n/// ```\npub fn Hasher::combine_int64(self : Hasher, value : Int64) -> Unit {\n  self.acc += 8\n  self.consume4(value.reinterpret_as_uint64().to_uint())\n  self.consume4((value.reinterpret_as_uint64() >> 32).to_uint())\n}\n\n///|\n/// Combines an unsigned 32-bit integer into the hasher's internal state by\n/// reinterpreting it as a signed integer and incorporating it into the hash\n/// computation.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object to update.\n/// * `value` : The unsigned 32-bit integer value to be combined into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_uint(42U)\n///   inspect(hasher.finalize(), content=\"1161967057\")\n/// ```\npub fn Hasher::combine_uint(self : Hasher, value : UInt) -> Unit {\n  self.acc += 4\n  self.consume4(value)\n}\n\n///|\n/// Combines a 64-bit unsigned integer into the hasher's internal state. Useful\n/// for hashing `UInt64` values as part of a larger composite structure.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : The 64-bit unsigned integer value to be incorporated into the\n/// hash.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_uint64(42UL)\n///   inspect(hasher.finalize(), content=\"-1962516083\")\n/// ```\npub fn Hasher::combine_uint64(self : Hasher, value : UInt64) -> Unit {\n  self.combine_int64(value.reinterpret_as_int64())\n}\n\n///|\n/// Combines a double-precision floating-point number into the hasher's internal\n/// state by reinterpreting its bits as a 64-bit integer. Maintains consistent\n/// hashing behavior regardless of the floating-point value's representation.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher to combine the value into.\n/// * `value` : The double-precision floating-point number to be combined into\n/// the hash.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_double(3.14)\n///   inspect(hasher.finalize(), content=\"-428265677\")\n/// ```\npub fn Hasher::combine_double(self : Hasher, value : Double) -> Unit {\n  self.combine_int64(value.reinterpret_as_int64())\n}\n\n///|\n/// Combines a 32-bit floating-point value into the hasher by reinterpreting its\n/// bit pattern as a 32-bit integer. The operation maintains the same hash result\n/// regardless of the floating-point value's representation.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object that maintains the internal state of the\n/// hashing operation.\n/// * `value` : The 32-bit floating-point value to be combined into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_float(3.14)\n///   inspect(hasher.finalize(), content=\"635116317\") // Hash of the bits of 3.14\n/// ```\npub fn Hasher::combine_float(self : Hasher, value : Float) -> Unit {\n  self.combine_uint(value.reinterpret_as_uint())\n}\n\n///|\n/// Combines a byte value into the hash state.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object to update with the byte value.\n/// * `byte` : The byte value to be combined into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_byte(b'\\xFF')\n///   inspect(hasher.finalize(), content=\"1955036104\")\n/// ```\npub fn Hasher::combine_byte(self : Hasher, value : Byte) -> Unit {\n  self.consume1(value)\n}\n\n///|\n/// Combines a byte sequence into the hasher's internal state using xxHash32\n/// algorithm. Processes the input bytes in chunks of 4 bytes for efficiency,\n/// with remaining bytes processed individually.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object to update with the byte sequence.\n/// * `bytes` : The byte sequence to be combined into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_bytes(b\"\\xFF\\x00\\xFF\\x00\")\n///   inspect(hasher.finalize(), content=\"-686861102\")\n/// ```\npub fn Hasher::combine_bytes(self : Hasher, value : Bytes) -> Unit {\n  let mut remain = value.length()\n  let mut cur = 0\n  while remain >= 4 {\n    self.consume4(endian32(value, cur))\n    cur += 4\n    remain -= 4\n  }\n  while remain >= 1 {\n    self.consume1(value[cur])\n    cur += 1\n    remain -= 1\n  }\n}\n\n///|\n/// Combines a string value into the current hash state by processing each\n/// character in the string sequentially.\n///\n/// Parameters:\n///\n/// * `self` : The hasher object whose state will be updated.\n/// * `value` : The string value to be combined into the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_string(\"hello\")\n///   inspect(hasher.finalize(), content=\"-655549713\")\n/// ```\npub fn Hasher::combine_string(self : Hasher, value : String) -> Unit {\n  for i in 0..<value.length() {\n    self.combine_uint(value.unsafe_charcode_at(i).reinterpret_as_uint())\n  }\n}\n\n///|\n/// Combines a character value into the hasher's internal state. The character is\n/// first converted to its Unicode code point (as an integer) before being\n/// combined.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : The character value to be combined into the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_char('A')\n///   inspect(hasher.finalize(), content=\"-1625495534\")\n/// ```\npub fn Hasher::combine_char(self : Hasher, value : Char) -> Unit {\n  self.combine_uint(value.to_uint())\n}\n\n///|\n/// Finalizes the hashing process and returns the computed hash value. Applies an\n/// avalanche function to improve the distribution of the hash value.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object containing the accumulated hash state.\n///\n/// Returns a 32-bit integer representing the final hash value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_byte(b'\\xFF')\n///   inspect(hasher.finalize(), content=\"1955036104\")\n/// ```\npub fn Hasher::finalize(self : Hasher) -> Int {\n  self.avalanche().reinterpret_as_int()\n}\n\n///|\nfn Hasher::avalanche(self : Hasher) -> UInt {\n  let mut acc = self.acc\n  acc = acc ^ (acc >> 15)\n  acc *= GPRIMES2\n  acc = acc ^ (acc >> 13)\n  acc *= GPRIME3\n  acc = acc ^ (acc >> 16)\n  acc\n}\n\n///|\nfn Hasher::consume4(self : Hasher, input : UInt) -> Unit {\n  self.acc = rotl(self.acc + input * GPRIME3, 17) * GPRIME4\n}\n\n///|\nfn Hasher::consume1(self : Hasher, input : Byte) -> Unit {\n  self.acc = rotl(self.acc + input.to_uint() * GPRIME5, 11) * GPRIME1\n}\n\n///|\nfn rotl(x : UInt, r : Int) -> UInt {\n  (x << r) | (x >> (32 - r))\n}\n\n///|\nfn endian32(input : Bytes, cur : Int) -> UInt {\n  input[cur + 0].to_uint() |\n  (\n    (input[cur + 1].to_uint() << 8) |\n    (input[cur + 2].to_uint() << 16) |\n    (input[cur + 3].to_uint() << 24)\n  )\n}\n\n///|\n/// Implements the `Hash` trait for `String` type, providing a method to combine\n/// a string's hash value with a hasher's state.\n///\n/// Parameters:\n///\n/// * `self` : The string value to be hashed.\n/// * `hasher` : The hasher object that will be updated with the string's hash\n/// value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let s1 = \"hello\"\n///   let s2 = \"hello\"\n///   let s3 = \"world\"\n///   inspect(Hash::hash(s1) == Hash::hash(s2), content=\"true\")\n///   inspect(Hash::hash(s1) == Hash::hash(s3), content=\"false\")\n/// ```\npub impl Hash for String with hash_combine(self, hasher) {\n  hasher.combine_string(self)\n}\n\n///|\n/// Implements the `Hash` trait for integer values using a combination of shifts\n/// and multiplications to produce a well-distributed hash value. Based on the\n/// hash algorithm from hash-prospector\n/// (https://github.com/skeeto/hash-prospector).\n///\n/// Parameters:\n///\n/// * `integer` : The integer value to be hashed. The value will be reinterpreted\n/// as an unsigned integer before hashing to ensure consistent behavior across\n/// positive and negative values.\n///\n/// Returns a 32-bit hash value derived from the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 42\n///   inspect(Hash::hash(x), content=\"-1704501356\")\n///   let y = -42\n///   inspect(Hash::hash(y), content=\"1617647962\")\n/// ```\n/// TODO: This implementation is **different** from the default implementation of the hash trait. \n/// So it will be replaced with the default implementation in the future **(breaking change)**, \n/// and users should not rely on this particular hash value\n/// ```moonbit \n///   let x = 42\n///   assert_not_eq(Hash::hash(x),Hasher::new()..combine(x).finalize())\n/// ```\npub impl Hash for Int with hash(self) {\n  let self = self.reinterpret_as_uint()\n  let mut x = self ^ (self >> 17)\n  x = x * 0xed5ad4bb\n  x = x ^ (x >> 11)\n  x = x * 0xac4c1b51\n  x = x ^ (x >> 15)\n  x = x * 0x31848bab\n  x = x ^ (x >> 14)\n  x.reinterpret_as_int()\n}\n\n///|\n/// Implements hash combination for integers by combining the integer value with\n/// a hasher. This implementation ensures that integers can be used as keys in\n/// hash-based collections like hash maps and hash sets.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be hashed.\n/// * `hasher` : A `Hasher` object that accumulates the hash value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_int(42)\n///   inspect(hasher.finalize(), content=\"1161967057\")\n/// ```\npub impl Hash for Int with hash_combine(self, hasher) {\n  hasher.combine_int(self)\n}\n\n///|\n/// Combines the hash value of an unsigned integer with a hasher object. This is\n/// useful when you need to hash a data structure that contains unsigned\n/// integers.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned integer to be combined with the hasher.\n/// * `hasher` : The hasher object that will incorporate the hash value of the\n/// unsigned integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_uint(42U)\n///   inspect(hasher.finalize(), content=\"1161967057\")\n/// ```\npub impl Hash for UInt with hash_combine(self, hasher) {\n  hasher.combine_uint(self)\n}\n\n///|\n/// Implements the `Hash` trait for `UInt64` by combining the hash value of an\n/// unsigned 64-bit integer into a hasher.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 64-bit integer value to be hashed.\n/// * `hasher` : The hasher object used to compute the combined hash value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_uint64(42UL)\n///   inspect(hasher.finalize(), content=\"-1962516083\")\n/// ```\npub impl Hash for UInt64 with hash_combine(self, hasher) {\n  hasher.combine_uint64(self)\n}\n\n///|\n/// Implements the `Hash` trait for `Option` types, allowing them to be used as\n/// keys in hash-based collections.\n///\n/// Parameters:\n///\n/// * `self` : The `Option` value to be hashed.\n/// * `hasher` : The hasher object that accumulates the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   let some_value : Int? = Some(42)\n///   let none_value : Int? = None\n///   hasher.combine(some_value)\n///   inspect(hasher.finalize(), content=\"2103260413\")\n///   let hasher2 = Hasher::new()\n///   hasher2.combine(none_value)\n///   inspect(hasher2.finalize(), content=\"148298089\")\n/// ```\npub impl[X : Hash] Hash for X? with hash_combine(self, hasher) {\n  match self {\n    None => hasher.combine_int(0)\n    Some(x) => hasher..combine_int(1)..combine(x)\n  }\n}\n\n///|\n/// Implements the `Hash` trait for `Result` type, allowing `Result` values to be\n/// used in hash-based collections.\n///\n/// Parameters:\n///\n/// * `self` : The `Result` value to be hashed.\n/// * `hasher` : The hasher object to which the hash value will be combined.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   let ok_result : Result[Int, String] = Ok(42)\n///   let err_result : Result[Int, String] = Err(\"error\")\n///   hasher.combine(ok_result)\n///   inspect(hasher.finalize(), content=\"-1948635851\")\n///   let hasher = Hasher::new()\n///   hasher.combine(err_result)\n///   inspect(hasher.finalize(), content=\"1953766574\")\n/// ```\npub impl[T : Hash, E : Hash] Hash for Result[T, E] with hash_combine(\n  self,\n  hasher\n) {\n  match self {\n    Ok(x) => hasher..combine_int(0)..combine(x)\n    Err(x) => hasher..combine_int(1)..combine(x)\n  }\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn[T] set_null(self : UninitializedArray[T], index : Int) = \"%fixedarray.set_null\"\n\n///|\n/// An `Array` is a collection of values that supports random access and can\n/// grow in size.\nstruct Array[T] {\n  mut buf : UninitializedArray[T]\n  mut len : Int\n}\n\n///|\nfn[T] Array::make_uninit(len : Int) -> Array[T] {\n  { buf: UninitializedArray::make(len), len }\n}\n\n///|\n/// Creates a new empty array with an optional initial capacity.\n///\n/// Parameters:\n///\n/// * `capacity` : The initial capacity of the array. If 0 (default), creates an\n/// array with minimum capacity. Must be non-negative.\n///\n/// Returns a new empty array of type `Array[T]` with the specified initial\n/// capacity.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr : Array[Int] = Array::new(capacity=10)\n///   inspect(arr.length(), content=\"0\")\n///   inspect(arr.capacity(), content=\"10\")\n///\n///   let arr : Array[Int] = Array::new()\n///   inspect(arr.length(), content=\"0\")\n/// ```\npub fn[T] Array::new(capacity~ : Int = 0) -> Array[T] {\n  if capacity == 0 {\n    []\n  } else {\n    { buf: UninitializedArray::make(capacity), len: 0 }\n  }\n}\n\n///|\n/// Returns the number of elements in the array.\n///\n/// Parameters:\n///\n/// * `array` : The array whose length is to be determined.\n///\n/// Returns the number of elements in the array as an integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   inspect(arr.length(), content=\"3\")\n///   let empty : Array[Int] = []\n///   inspect(empty.length(), content=\"0\")\n/// ```\n#intrinsic(\"%array.length\")\npub fn[T] Array::length(self : Array[T]) -> Int {\n  self.len\n}\n\n///|\n/// Truncates the array to the specified length. This function is marked as\n/// `unsafe` because it directly manipulates the internal buffer of the array,\n/// which can lead to undefined behavior if not used carefully.\n///\n/// # Parameters\n///\n/// - `self` : The array to be truncated.\n/// - `new_len` : The new length to which the array should be truncated. Must be\n/// less than or equal to the current length of the array.\n///\n/// # Returns\n///\n/// - `Unit` : This function does not return a value.\n///\n/// # Errors\n///\n/// - This function does not explicitly raise errors, but improper use (e.g.,\n/// setting `new_len` greater than the current length) can lead to undefined\n/// behavior.\n///\n/// TODO: this can be optimized by using the intrinsic to null out the range\nfn[T] Array::unsafe_truncate_to_length(self : Array[T], new_len : Int) -> Unit {\n  let len = self.length()\n  guard new_len <= len\n  for i in new_len..<len {\n    self.buf.set_null(i)\n  }\n  self.len = new_len\n}\n\n///|\ntest \"unsafe_truncate_to_length\" {\n  let arr = [1, 2, 3, 4, 5]\n  arr.unsafe_truncate_to_length(3)\n  inspect(arr, content=\"[1, 2, 3]\")\n}\n\n///|\nfn[T] Array::buffer(self : Array[T]) -> UninitializedArray[T] {\n  self.buf\n}\n\n///|\nfn[T] Array::resize_buffer(self : Array[T], new_capacity : Int) -> Unit {\n  let new_buf = UninitializedArray::make(new_capacity)\n  let old_buf = self.buf\n  let old_cap = old_buf.inner().length()\n  let copy_len = if old_cap < new_capacity { old_cap } else { new_capacity }\n  UninitializedArray::unsafe_blit(new_buf, 0, old_buf, 0, copy_len)\n  self.buf = new_buf\n}\n\n///|\ntest \"array_unsafe_blit_fixed\" {\n  let src = FixedArray::make(5, 0)\n  let dst = UninitializedArray::make(5)\n  for i in 0..<5 {\n    src[i] = i + 1\n  }\n  UninitializedArray::unsafe_blit_fixed(dst, 0, src, 0, 5)\n  for i in 0..<5 {\n    assert_eq(dst[i], src[i])\n  }\n}\n\n///|\ntest \"UninitializedArray::unsafe_blit_fixed\" {\n  let src = FixedArray::make(5, 0)\n  let dst = UninitializedArray::make(5)\n  for i in 0..<5 {\n    src[i] = i + 1\n  }\n  UninitializedArray::unsafe_blit_fixed(dst, 0, src, 0, 5)\n  for i in 0..<5 {\n    assert_eq(dst[i], src[i])\n  }\n}\n\n///|\ntest \"UninitializedArray::unsafe_blit_fixed\" {\n  let src = FixedArray::make(5, 0)\n  let dst = UninitializedArray::make(5)\n  for i in 0..<5 {\n    src[i] = i + 1\n  }\n  UninitializedArray::unsafe_blit_fixed(dst, 0, src, 0, 5)\n  for i in 0..<5 {\n    assert_eq(dst[i], src[i])\n  }\n}\n\n///|\ntest \"Array::resize_buffer\" {\n  let arr = Array::new(capacity=2)\n  arr.push(1)\n  arr.push(2)\n  arr.resize_buffer(4)\n  assert_eq(arr.buffer().inner().length() >= 4, true)\n  arr.push(3)\n  arr.push(4)\n  assert_eq(arr.length(), 4)\n  assert_eq(arr[0], 1)\n  assert_eq(arr[1], 2)\n  assert_eq(arr[2], 3)\n  assert_eq(arr[3], 4)\n}\n\n///|\n/// Reallocate the array with a new capacity.\nfn[T] Array::realloc(self : Array[T]) -> Unit {\n  let old_cap = self.length()\n  let new_cap = if old_cap == 0 { 8 } else { old_cap * 2 }\n  self.resize_buffer(new_cap)\n}\n\n///|\n/// Reserves capacity to ensure that it can hold at least the number of elements\n/// specified by the `capacity` argument.\n///\n/// # Example\n///\n/// ```mbt\n///   let v = [1]\n///   v.reserve_capacity(10)\n///   assert_eq(v.capacity(), 10)\n/// ```\npub fn[T] Array::reserve_capacity(self : Array[T], capacity : Int) -> Unit {\n  if self.capacity() >= capacity {\n    return\n  }\n  self.resize_buffer(capacity)\n}\n\n///|\n/// Shrinks the capacity of the array as much as possible.\n///\n/// # Example\n///\n/// ```mbt\n///   let v = Array::new(capacity=10)\n///   v.push(1)\n///   v.push(2)\n///   v.push(3)\n///   v.shrink_to_fit()\n///   assert_eq(v.capacity(), 3)\n/// ```\npub fn[T] Array::shrink_to_fit(self : Array[T]) -> Unit {\n  if self.capacity() <= self.length() {\n    return\n  }\n  self.resize_buffer(self.length())\n}\n\n///|\n/// Adds an element to the end of the array.\n///\n/// If the array is at capacity, it will be reallocated.\n///\n/// # Example\n/// ```mbt\n///   let v = []\n///   v.push(3)\n/// ```\npub fn[T] Array::push(self : Array[T], value : T) -> Unit {\n  if self.length() == self.buffer().inner().length() {\n    self.realloc()\n  }\n  let length = self.length()\n  self.unsafe_set(length, value)\n  self.len = length + 1\n}\n\n///|\n/// Removes the last element from a array and returns it, or `None` if it is empty.\n///\n/// # Example\n/// ```mbt\n///   let v = [1, 2, 3]\n///   assert_eq(v.pop(), Some(3))\n///   assert_eq(v, [1, 2])\n/// ```\npub fn[T] Array::pop(self : Array[T]) -> T? {\n  let len = self.length()\n  if len == 0 {\n    None\n  } else {\n    let index = len - 1\n    let v = self.unsafe_get(index)\n    self.buf.set_null(index)\n    self.len = index\n    Some(v)\n  }\n}\n\n///|\n/// Removes and returns the last element from the array.\n///\n/// Parameters:\n///\n/// * `array` : The array from which to remove and return the last element.\n///\n/// Returns the last element of the array before removal.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   inspect(arr.unsafe_pop(), content=\"3\")\n///   inspect(arr, content=\"[1, 2]\")\n/// ```\n///\n#internal(unsafe, \"Panic if the array is empty.\")\npub fn[T] Array::unsafe_pop(self : Array[T]) -> T {\n  let len = self.length()\n  guard len != 0\n  let index = len - 1\n  let v = self.unsafe_get(index)\n  self.buf.set_null(index)\n  self.len = index\n  v\n}\n\n///|\n/// Removes and returns the element at position index within the array, \n/// shifting all elements after it to the left.\n/// \n/// This function will panic if the index is out of bounds.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   assert_eq(v.remove(1), 4)\n///   assert_eq(v, [3, 5])\n/// ```\npub fn[T] Array::remove(self : Array[T], index : Int) -> T {\n  guard index >= 0 && index < self.length() else {\n    abort(\n      \"index out of bounds: the len is from 0 to \\{self.length()} but the index is \\{index}\",\n    )\n  }\n  let value = self.unsafe_get(index)\n  UninitializedArray::unsafe_blit(\n    self.buffer(),\n    index,\n    self.buffer(),\n    index + 1,\n    self.length() - index - 1,\n  )\n  self.unsafe_truncate_to_length(self.length() - 1)\n  value\n}\n\n///|\n/// Removes the specified range from the array and returns it.\n///\n/// This functions returns a array range from `begin` to `end` `[begin, end)`\n/// \n/// This function will panic if the index is out of bounds.\n///\n/// # Example\n/// ```mbt\n///   let v = [3, 4, 5]\n///   let vv = v.drain(1, 2) // vv = [4], v = [3, 5]\n///   assert_eq(vv, [4])\n///   assert_eq(v, [3, 5])\n/// ```\npub fn[T] Array::drain(self : Array[T], begin : Int, end : Int) -> Array[T] {\n  guard begin >= 0 && end <= self.length() && begin <= end\n  let num = end - begin\n  let v = Array::make_uninit(num)\n  UninitializedArray::unsafe_blit(v.buffer(), 0, self.buffer(), begin, num)\n  UninitializedArray::unsafe_blit(\n    self.buffer(),\n    begin,\n    self.buffer(),\n    end,\n    self.length() - end,\n  )\n  self.unsafe_truncate_to_length(self.length() - num)\n  v\n}\n\n///|\n/// Inserts an element at a given index within the array.\n/// This function will panic if the index is out of bounds.\n///\n/// # Example\n/// ```mbt\n///   [3, 4, 5].insert(1, 6)\n/// ```\npub fn[T] Array::insert(self : Array[T], index : Int, value : T) -> Unit {\n  guard index >= 0 && index <= self.length() else {\n    abort(\n      \"index out of bounds: the len is from 0 to \\{self.length()} but the index is \\{index}\",\n    )\n  }\n  if self.length() == self.buffer().inner().length() {\n    self.realloc()\n  }\n  UninitializedArray::unsafe_blit(\n    self.buffer(),\n    index + 1,\n    self.buffer(),\n    index,\n    self.length() - index,\n  )\n  let length = self.length()\n  self.unsafe_set(index, value)\n  self.len = length + 1\n}\n\n///|\n/// Resize the array in-place so that `len` is equal to `new_len`.\n///\n/// If `new_len` is greater than `len`, the array will be extended by the\n/// difference, and the values in the new slots are left uninitialized.\n///  If `new_len` is less than `len`, it will panic\n///\nfn[T] Array::unsafe_grow_to_length(self : Array[T], new_len : Int) -> Unit {\n  guard new_len >= self.length()\n  let new_buf = UninitializedArray::make(new_len)\n  UninitializedArray::unsafe_blit(new_buf, 0, self.buf, 0, self.len)\n  self.len = new_len\n  self.buf = new_buf\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n// Types\npriv struct Entry[K, V] {\n  mut prev : Int\n  mut next : Entry[K, V]?\n  mut psl : Int\n  hash : Int\n  key : K\n  mut value : V\n} derive(Show)\n\n///|\n/// Mutable linked hash map that maintains the order of insertion, not thread safe.\n///\n/// # Example\n///\n/// ```mbt\n///   let map = { 3: \"three\", 8 :  \"eight\", 1 :  \"one\"}\n///   assert_eq(map.get(2), None)\n///   assert_eq(map.get(3), Some(\"three\"))\n///   map.set(3, \"updated\")\n///   assert_eq(map.get(3), Some(\"updated\"))\n/// ```\nstruct Map[K, V] {\n  mut entries : FixedArray[Entry[K, V]?]\n  mut size : Int // active key-value pairs count\n  mut capacity : Int // current capacity\n  mut capacity_mask : Int // capacity_mask = capacity - 1, used to find idx\n  mut grow_at : Int // threshold that triggers grow\n  mut head : Entry[K, V]? // head of linked list\n  mut tail : Int // tail of linked list\n}\n\n// Implementations\n\n///|\nfn power_2_above(x : Int, n : Int) -> Int {\n  for i = x {\n    if i >= n {\n      break i\n    }\n    let next = i << 1\n    if next < 0 {\n      // overflow happened\n      break i\n    }\n    continue next\n  }\n}\n\n///|\ntest \"power_2_above\" {\n  inspect(power_2_above(1, 15), content=\"16\")\n  inspect(power_2_above(1, 16), content=\"16\")\n  inspect(power_2_above(1, 17), content=\"32\")\n  inspect(power_2_above(1, 32), content=\"32\")\n  inspect(power_2_above(128, 33), content=\"128\")\n  inspect(power_2_above(1, 2147483647), content=\"1073741824\")\n}\n\n///|\n/// Create a hash map.\n/// The capacity of the map will be the smallest power of 2 that is\n/// greater than or equal to the provided [capacity].\npub fn[K, V] Map::new(capacity~ : Int = 8) -> Map[K, V] {\n  let capacity = power_2_above(8, capacity)\n  {\n    size: 0,\n    capacity,\n    capacity_mask: capacity - 1,\n    grow_at: calc_grow_threshold(capacity),\n    entries: FixedArray::make(capacity, None),\n    head: None,\n    tail: -1,\n  }\n}\n\n///|\n/// Create a hash map from array.\npub fn[K : Hash + Eq, V] Map::from_array(arr : Array[(K, V)]) -> Map[K, V] {\n  let m = Map::new(capacity=arr.length())\n  arr.each(e => m.set(e.0, e.1))\n  m\n}\n\n///|\n/// Set a key-value pair into the hash map.\npub fn[K : Hash + Eq, V] Map::set(self : Map[K, V], key : K, value : V) -> Unit {\n  if self.size >= self.grow_at {\n    self.grow()\n  }\n  let hash = key.hash()\n  let (idx, psl) = for psl = 0, idx = hash & self.capacity_mask {\n    match self.entries[idx] {\n      None => break (idx, psl)\n      Some(curr_entry) => {\n        if curr_entry.hash == hash && curr_entry.key == key {\n          curr_entry.value = value\n          return\n        }\n        if psl > curr_entry.psl {\n          self.push_away(idx, curr_entry)\n          break (idx, psl)\n        }\n        continue psl + 1, (idx + 1) & self.capacity_mask\n      }\n    }\n  }\n  let entry = { prev: self.tail, next: None, psl, key, value, hash }\n  self.add_entry_to_tail(idx, entry)\n}\n\n///|\nfn[K, V] Map::push_away(\n  self : Map[K, V],\n  idx : Int,\n  entry : Entry[K, V]\n) -> Unit {\n  for psl = entry.psl + 1, idx = (idx + 1) & self.capacity_mask, entry = entry {\n    match self.entries[idx] {\n      None => {\n        entry.psl = psl\n        self.set_entry(entry, idx)\n        break\n      }\n      Some(curr_entry) =>\n        if psl > curr_entry.psl {\n          entry.psl = psl\n          self.set_entry(entry, idx)\n          continue curr_entry.psl + 1,\n            (idx + 1) & self.capacity_mask,\n            curr_entry\n        } else {\n          continue psl + 1, (idx + 1) & self.capacity_mask, entry\n        }\n    }\n  }\n}\n\n///|\nfn[K, V] Map::set_entry(\n  self : Map[K, V],\n  entry : Entry[K, V],\n  new_idx : Int\n) -> Unit {\n  self.entries[new_idx] = Some(entry)\n  match entry.next {\n    None => self.tail = new_idx\n    Some(next) => next.prev = new_idx\n  }\n}\n\n///|\npub fn[K : Hash + Eq, V] Map::op_set(\n  self : Map[K, V],\n  key : K,\n  value : V\n) -> Unit {\n  self.set(key, value)\n}\n\n///|\n/// Get the value associated with a key.\npub fn[K : Hash + Eq, V] Map::get(self : Map[K, V], key : K) -> V? {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break None }\n    if entry.hash == hash && entry.key == key {\n      break Some(entry.value)\n    }\n    if i > entry.psl {\n      break None\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n#deprecated(\"Use `get` instead. `op_get` will return `V` instead of `Option[V]` in the future.\")\npub fn[K : Hash + Eq, V] Map::op_get(self : Map[K, V], key : K) -> V? {\n  self.get(key)\n}\n\n///|\n/// Returns the value associated with the key in the map, or computes and returns\n/// a default value if the key does not exist.\n///\n/// Parameters:\n///\n/// * `map` : The map to search in.\n/// * `key` : The key to look up in the map.\n/// * `default` : A function that returns a default value when the key is not\n/// found.\n///\n/// Returns either the value associated with the key if it exists, or the result\n/// of calling the default function.\n///\n/// Example:\n///\n/// ```moonbit\n///   let map = { \"a\": 1, \"b\": 2 }\n///   inspect(map.get_or_default(\"a\", 0), content=\"1\")\n///   inspect(map.get_or_default(\"c\", 42), content=\"42\")\n/// ```\npub fn[K : Hash + Eq, V] Map::get_or_default(\n  self : Map[K, V],\n  key : K,\n  default : V\n) -> V {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    match self.entries[idx] {\n      Some(entry) => {\n        if entry.hash == hash && entry.key == key {\n          break entry.value\n        }\n        if i > entry.psl {\n          break default\n        }\n        continue i + 1, (idx + 1) & self.capacity_mask\n      }\n      None => break default\n    }\n  }\n}\n\n///|\n/// Returns the value for the given key, or sets and returns a default value if the key does not exist.\npub fn[K : Hash + Eq, V] Map::get_or_init(\n  self : Map[K, V],\n  key : K,\n  default : () -> V\n) -> V {\n  match self.get(key) {\n    Some(v) => v\n    None => {\n      let v = default()\n      self.set(key, v)\n      v\n    }\n  }\n}\n\n///|\n/// Check if the hash map contains a key.\npub fn[K : Hash + Eq, V] Map::contains(self : Map[K, V], key : K) -> Bool {\n  // inline Map::get to avoid boxing\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break false }\n    if entry.hash == hash && entry.key == key {\n      break true\n    }\n    if i > entry.psl {\n      break false\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n/// Checks if a map contains a specific key-value pair.\n///\n/// Parameters:\n///\n/// * `map` : A map of type `Map[K, V]` to search in.\n/// * `key` : The key to look up in the map.\n/// * `value` : The value to be compared with the value associated with the key.\n///\n/// Returns `true` if the map contains the specified key and its associated value\n/// equals the given value, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// \n///   let map = { \"a\": 1, \"b\": 2 }\n///   inspect(map.contains_kv(\"a\", 1), content=\"true\")\n///   inspect(map.contains_kv(\"a\", 2), content=\"false\")\n///   inspect(map.contains_kv(\"c\", 3), content=\"false\")\n/// ```\npub fn[K : Hash + Eq, V : Eq] Map::contains_kv(\n  self : Map[K, V],\n  key : K,\n  value : V\n) -> Bool {\n  // inline Map::get to avoid boxing\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break false }\n    if entry.hash == hash && entry.key == key && entry.value == value {\n      break true\n    }\n    if i > entry.psl {\n      break false\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n/// Remove a key-value pair from hash map.\npub fn[K : Hash + Eq, V] Map::remove(self : Map[K, V], key : K) -> Unit {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break }\n    if entry.hash == hash && entry.key == key {\n      self.remove_entry(entry)\n      self.shift_back(idx)\n      self.size -= 1\n      break\n    }\n    if i > entry.psl {\n      break\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\nfn[K, V] Map::add_entry_to_tail(\n  self : Map[K, V],\n  idx : Int,\n  entry : Entry[K, V]\n) -> Unit {\n  match self.tail {\n    -1 => self.head = Some(entry)\n    tail => self.entries[tail].unwrap().next = Some(entry)\n  }\n  self.tail = idx\n  self.entries[idx] = Some(entry)\n  self.size += 1\n}\n\n///|\nfn[K, V] Map::remove_entry(self : Map[K, V], entry : Entry[K, V]) -> Unit {\n  match entry.prev {\n    -1 => self.head = entry.next\n    idx => self.entries[idx].unwrap().next = entry.next\n  }\n  match entry.next {\n    None => self.tail = entry.prev\n    Some(next) => next.prev = entry.prev\n  }\n}\n\n///|\nfn[K, V] Map::shift_back(self : Map[K, V], idx : Int) -> Unit {\n  let next = (idx + 1) & self.capacity_mask\n  match self.entries[next] {\n    None | Some({ psl: 0, .. }) => self.entries[idx] = None\n    Some(entry) => {\n      entry.psl -= 1\n      self.set_entry(entry, idx)\n      self.shift_back(next)\n    }\n  }\n}\n\n///|\nfn[K : Hash + Eq, V] Map::grow(self : Map[K, V]) -> Unit {\n  let old_head = self.head\n  let new_capacity = self.capacity << 1\n  self.entries = FixedArray::make(new_capacity, None)\n  self.capacity = new_capacity\n  self.capacity_mask = new_capacity - 1\n  self.grow_at = calc_grow_threshold(self.capacity)\n  self.size = 0\n  self.head = None\n  self.tail = -1\n  loop old_head {\n    Some({ next, key, value, .. }) => {\n      self.set(key, value)\n      continue next\n    }\n    None => break\n  }\n}\n\n///|\nfn calc_grow_threshold(capacity : Int) -> Int {\n  capacity * 13 / 16\n}\n\n// Utils\n\n///|\npub impl[K : Show, V : Show] Show for Map[K, V] with output(self, logger) {\n  logger.write_string(\"{\")\n  loop (0, self.head) {\n    (_, None) => logger.write_string(\"}\")\n    (i, Some({ key, value, next, .. })) => {\n      if i > 0 {\n        logger.write_string(\", \")\n      }\n      logger..write_object(key)..write_string(\": \")..write_object(value)\n      continue (i + 1, next)\n    }\n  }\n}\n\n///|\n/// Get the number of key-value pairs in the map.\npub fn[K, V] Map::size(self : Map[K, V]) -> Int {\n  self.size\n}\n\n///|\n/// Get the capacity of the map.\npub fn[K, V] Map::capacity(self : Map[K, V]) -> Int {\n  self.capacity\n}\n\n///|\n/// Check if the hash map is empty.\npub fn[K, V] Map::is_empty(self : Map[K, V]) -> Bool {\n  self.size == 0\n}\n\n///|\n/// Iterate over all key-value pairs of the map in the order of insertion.\n#locals(f)\npub fn[K, V] Map::each(\n  self : Map[K, V],\n  f : (K, V) -> Unit raise?\n) -> Unit raise? {\n  loop self.head {\n    Some({ key, value, next, .. }) => {\n      f(key, value)\n      continue next\n    }\n    None => break\n  }\n}\n\n///|\n/// Iterate over all key-value pairs of the map in the order of insertion, with index.\n#locals(f)\npub fn[K, V] Map::eachi(\n  self : Map[K, V],\n  f : (Int, K, V) -> Unit raise?\n) -> Unit raise? {\n  loop (0, self.head) {\n    (i, Some({ key, value, next, .. })) => {\n      f(i, key, value)\n      continue (i + 1, next)\n    }\n    (_, None) => break\n  }\n}\n\n///|\n/// Clears the map, removing all key-value pairs. Keeps the allocated space.\npub fn[K, V] Map::clear(self : Map[K, V]) -> Unit {\n  self.entries.fill(None)\n  self.size = 0\n  self.head = None\n  self.tail = -1\n}\n\n///|\n/// Returns the iterator of the hash map, provide elements in the order of insertion.\npub fn[K, V] Map::iter(self : Map[K, V]) -> Iter[(K, V)] {\n  Iter::new(yield_ => loop self.head {\n    Some({ key, value, next, .. }) => {\n      guard yield_((key, value)) is IterContinue else { break IterEnd }\n      continue next\n    }\n    None => break IterContinue\n  })\n}\n\n///|\npub fn[K, V] Map::iter2(self : Map[K, V]) -> Iter2[K, V] {\n  Iter2::new(yield_ => loop self.head {\n    Some({ key, value, next, .. }) => {\n      guard yield_(key, value) is IterContinue else { break IterEnd }\n      continue next\n    }\n    None => IterContinue\n  })\n}\n\n///|\npub fn[K, V] Map::keys(self : Map[K, V]) -> Iter[K] {\n  Iter::new(yield_ => loop self.head {\n    Some({ key, next, .. }) => {\n      guard yield_(key) is IterContinue else { break IterEnd }\n      continue next\n    }\n    None => IterContinue\n  })\n}\n\n///|\npub fn[K, V] Map::values(self : Map[K, V]) -> Iter[V] {\n  Iter::new(yield_ => loop self.head {\n    Some({ value, next, .. }) => {\n      guard yield_(value) is IterContinue else { break IterEnd }\n      continue next\n    }\n    None => IterContinue\n  })\n}\n\n///|\n/// Converts the hash map to an array.\npub fn[K, V] Map::to_array(self : Map[K, V]) -> Array[(K, V)] {\n  let arr = Array::make_uninit(self.size)\n  let mut i = 0\n  loop self.head {\n    Some({ key, value, next, .. }) => {\n      arr.unsafe_set(i, (key, value))\n      i += 1\n      continue next\n    }\n    None => break\n  }\n  arr\n}\n\n///|\npub impl[K : Hash + Eq, V : Eq] Eq for Map[K, V] with op_equal(\n  self : Map[K, V],\n  that : Map[K, V]\n) -> Bool {\n  guard self.size == that.size else { return false }\n  for k, v in self {\n    guard that.contains_kv(k, v) else { return false }\n  } else {\n    true\n  }\n}\n\n///|\npub fn[K : Hash + Eq, V] Map::of(arr : FixedArray[(K, V)]) -> Map[K, V] {\n  let length = arr.length()\n  let m = Map::new(capacity=length)\n  // arr.iter((e) => { m.set(e.0, e.1) })\n  for i in 0..<length {\n    let e = arr[i]\n    m.set(e.0, e.1)\n  }\n  m\n}\n\n///|\npub fn[K : Hash + Eq, V] Map::from_iter(iter : Iter[(K, V)]) -> Map[K, V] {\n  let m = {}\n  for e in iter {\n    m.set(e.0, e.1)\n  }\n  m\n}\n\n///|\npub impl[K, V] Default for Map[K, V] with default() {\n  Map::new()\n}\n\n///|\n/// Applies a function to each key-value pair in the map and returns a new map with the results, using the original keys.\npub fn[K, V, V2] Map::map(self : Map[K, V], f : (K, V) -> V2) -> Map[K, V2] {\n  // copy structure\n  let other = {\n    capacity: self.capacity,\n    entries: FixedArray::make(self.capacity, None),\n    size: self.size,\n    capacity_mask: self.capacity_mask,\n    grow_at: self.grow_at,\n    head: None,\n    tail: self.tail,\n  }\n  if self.size == 0 {\n    return other\n  }\n  guard self.entries[self.tail] is Some(last)\n  loop (last, self.tail, None) {\n    ({ prev, psl, hash, key, value, .. }, idx, next) => {\n      let new_value = f(key, value)\n      let new_entry = { prev, next, psl, hash, key, value: new_value }\n      other.entries[idx] = Some(new_entry)\n      if prev != -1 {\n        continue (self.entries[prev].unwrap(), prev, Some(new_entry))\n      } else {\n        other.head = Some(new_entry)\n      }\n    }\n  }\n  other\n}\n\n///|\n/// Copy the map, creating a new map with the same key-value pairs and order of insertion.\npub fn[K, V] Map::copy(self : Map[K, V]) -> Map[K, V] {\n  // copy structure\n  let other = {\n    capacity: self.capacity,\n    entries: FixedArray::make(self.capacity, None),\n    size: self.size,\n    capacity_mask: self.capacity_mask,\n    grow_at: self.grow_at,\n    head: None,\n    tail: self.tail,\n  }\n  if self.size == 0 {\n    return other\n  }\n  guard self.entries[self.tail] is Some(last)\n  loop (last, self.tail, None) {\n    ({ prev, psl, hash, key, value, .. }, idx, next) => {\n      let new_entry = { prev, next, psl, hash, key, value }\n      other.entries[idx] = Some(new_entry)\n      if prev != -1 {\n        continue (self.entries[prev].unwrap(), prev, Some(new_entry))\n      } else {\n        other.head = Some(new_entry)\n      }\n    }\n  }\n  other\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\npub impl[X : Eq] Eq for X? with op_equal(self, other) {\n  match (self, other) {\n    (None, None) => true\n    (Some(x), Some(y)) => x == y\n    _ => false\n  }\n}\n\n///|\npub fn[X : Show] Option::to_string(self : X?) -> String {\n  match self {\n    None => \"None\"\n    Some(x) => \"Some(\" + x.to_string() + \")\"\n  }\n}\n\n///|\n/// Extract the value in `Some`.\n/// \n/// If the value is `None`, it throws a panic.\npub fn[X] Option::unwrap(self : X?) -> X {\n  match self {\n    None => panic()\n    Some(x) => x\n  }\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\npub impl Show for Unit with output(_self, logger) {\n  logger.write_string(\"()\")\n}\n\n///|\npub impl Show for Bool with output(self, logger) {\n  if self {\n    logger.write_string(\"true\")\n  } else {\n    logger.write_string(\"false\")\n  }\n}\n\n///|\npub impl Show for Int with output(self, logger) {\n  self.output(logger)\n}\n\n///|\npub impl Show for Int64 with output(self, logger) {\n  self.output(logger)\n}\n\n///|\npub impl Show for UInt with output(self, logger) {\n  self.output(logger)\n}\n\n///|\npub impl Show for UInt64 with output(self, logger) {\n  self.output(logger)\n}\n\n///|\npub impl Show for Byte with output(self, logger) {\n  logger.write_string(self.to_string())\n}\n\n///|\npub impl Show for Int16 with output(self, logger) {\n  logger.write_string(self.to_string())\n}\n\n///|\npub impl Show for UInt16 with output(self, logger) {\n  self.to_int().output(logger)\n}\n\n///|\nfn to_hex_digit(i : Int) -> Char {\n  if i < 10 {\n    (i + '0').unsafe_to_char()\n  } else {\n    (i + 'a' - 10).unsafe_to_char()\n  }\n}\n\n///|\ntest \"to_hex_digit\" {\n  for i in 0..<10 {\n    guard to_hex_digit(i) == ('0'.to_int() + i).unsafe_to_char() else {\n      fail(\"to_hex_digit(\\{i}) does not match\")\n    }\n  }\n  for i in 10..<16 {\n    guard to_hex_digit(i) == ('a'.to_int() + (i - 10)).unsafe_to_char() else {\n      fail(\"to_hex_digit(\\{i}) does not match\")\n    }\n  }\n}\n\n///|\npub impl Show for Bytes with output(self, logger) {\n  logger.write_string(\"b\\\"\")\n  for b in self {\n    let byte = b.to_int()\n    logger\n    ..write_string(\"\\\\x\")\n    ..write_char(to_hex_digit(byte / 16))\n    ..write_char(to_hex_digit(byte % 16))\n  }\n  logger.write_string(\"\\\"\")\n}\n\n///|\npub impl Show for String with output(self, logger) {\n  logger.write_char('\"')\n  let mut segment_start = 0\n  fn flush_segment(i : Int) {\n    if i > segment_start {\n      logger.write_substring(self, segment_start, i - segment_start)\n    }\n    segment_start = i + 1\n  }\n\n  for i in 0..<self.length() {\n    match self.unsafe_charcode_at(i) {\n      '\"' | '\\\\' as c => {\n        flush_segment(i)\n        logger..write_char('\\\\')..write_char(c.unsafe_to_char())\n      }\n      '\\n' => {\n        flush_segment(i)\n        logger.write_string(\"\\\\n\")\n      }\n      '\\r' => {\n        flush_segment(i)\n        logger.write_string(\"\\\\r\")\n      }\n      '\\b' => {\n        flush_segment(i)\n        logger.write_string(\"\\\\b\")\n      }\n      '\\t' => {\n        flush_segment(i)\n        logger.write_string(\"\\\\t\")\n      }\n      code =>\n        if code < ' ' {\n          flush_segment(i)\n          logger\n          ..write_string(\"\\\\u{\")\n          ..write_char(to_hex_digit(code / 16))\n          ..write_char(to_hex_digit(code % 16))\n          ..write_char('}')\n        }\n    }\n  }\n  flush_segment(self.length())\n  logger.write_char('\"')\n}\n\n///|\n/// This is different from `Show::output`,\n/// here it returns the original string without escaping. \n/// The rationale is in string interpolation,\n/// we want to show the original string, not the escaped one.\n/// # Examples\n/// \n/// ```mbt\n///   let str = \"Hello \\n\"\n///   inspect(str.to_string(), content=\"Hello \\n\")\n///   inspect(str.escape(), content=\"\\\"Hello \\\\n\\\"\")\n/// ```\npub impl Show for String with to_string(self) {\n  self\n}\n\n///|\n/// Returns a valid MoonBit string literal representation of a string,\n/// add quotes and escape special characters.\npub fn String::escape(self : String) -> String {\n  let buf = StringBuilder::new()\n  Show::output(self, buf)\n  buf.to_string()\n}\n\n///|\npub impl[X : Show] Show for X? with output(self, logger) {\n  match self {\n    None => logger.write_string(\"None\")\n    Some(arg) =>\n      logger..write_string(\"Some(\")..write_object(arg)..write_string(\")\")\n  }\n}\n\n///|\npub impl[T : Show, E : Show] Show for Result[T, E] with output(self, logger) {\n  match self {\n    Ok(x) => logger..write_string(\"Ok(\")..write_object(x)..write_string(\")\")\n    Err(e) => logger..write_string(\"Err(\")..write_object(e)..write_string(\")\")\n  }\n}\n\n///|\npub impl[X : Show] Show for Ref[X] with output(self, logger) {\n  logger..write_string(\"{val: \")..write_object(self.val)..write_string(\"}\")\n}\n\n///|\npub impl[X : Show] Show for FixedArray[X] with output(self, logger) {\n  logger.write_iter(self.iter())\n}\n\n///|\npub impl[X : Show] Show for Array[X] with output(self, logger) {\n  logger.write_iter(self.iter())\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nstruct StringBuilder {\n  mut data : FixedArray[Byte]\n  mut len : Int\n}\n\n///|\n/// Creates a new string builder with an optional initial capacity hint.\n///\n/// Parameters:\n///\n/// * `size_hint` : An optional initial capacity hint for the internal buffer. If\n/// less than 1, a minimum capacity of 1 is used. Defaults to 0. It is the size of bytes, \n/// not the size of characters. `size_hint` may be ignored on some platforms, JS for example.\n///\n/// Returns a new `StringBuilder` instance with the specified initial capacity.\n///\npub fn StringBuilder::new(size_hint~ : Int = 0) -> StringBuilder {\n  let initial = if size_hint < 1 { 1 } else { size_hint }\n  let data : FixedArray[Byte] = FixedArray::make(initial, 0)\n  { data, len: 0 }\n}\n\n///|\n/// Return whether the given buffer is empty.\npub fn StringBuilder::is_empty(self : StringBuilder) -> Bool {\n  self.len == 0\n}\n\n///|\nfn StringBuilder::grow_if_necessary(\n  self : StringBuilder,\n  required : Int\n) -> Unit {\n  let current_len = self.data.length()\n  if required <= current_len {\n    return\n  }\n  // current_len is at least 1\n  let mut enough_space = current_len\n  // double the enough_space until it larger than required\n  while enough_space < required {\n    enough_space = enough_space * 2\n  }\n  let new_data = FixedArray::make(enough_space, Byte::default())\n  new_data.unsafe_blit(0, self.data, 0, self.len)\n  self.data = new_data\n}\n\n///|\n/// Writes a string to the StringBuilder.\npub impl Logger for StringBuilder with write_string(self, str) {\n  self.grow_if_necessary(self.len + str.length() * 2)\n  self.data.blit_from_string(self.len, str, 0, str.length())\n  self.len += str.length() * 2\n}\n\n///|\n/// Writes a character to the StringBuilder.\npub impl Logger for StringBuilder with write_char(self, ch) {\n  self.grow_if_necessary(self.len + 4)\n  let inc = self.data.set_utf16le_char(self.len, ch)\n  self.len += inc\n}\n\n///|\n/// Writes a part of the given string to the StringBuilder.\n/// \n/// Parameters:\n///\n/// * `self` : The StringBuilder to write to.\n/// * `str` : The given string.\n/// * `start` : The start index of the substring to write.\n/// * `len` : The length of the substring to write.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sb = StringBuilder::new()\n///   sb.write_substring(\"Hello, world!\", 0, 5)\n///   assert_eq(sb.to_string(), \"Hello\")\n/// ```\npub impl Logger for StringBuilder with write_substring(\n  self : StringBuilder,\n  str : String,\n  start : Int,\n  len : Int\n) -> Unit {\n  guard start >= 0 && len >= 0 && start + len <= str.length()\n  self.grow_if_necessary(self.len + len * 2)\n  self.data.blit_from_string(self.len, str, start, len)\n  self.len += len * 2\n}\n\n///| \n/// Returns the current content of the StringBuilder as a string.\npub fn StringBuilder::to_string(self : StringBuilder) -> String {\n  self.data\n  .unsafe_reinterpret_as_bytes()\n  .to_unchecked_string(offset=0, length=self.len)\n}\n\n///|\n/// TODO: improve perf\npub impl Show for StringBuilder with output(self, logger) {\n  logger.write_string(\n    self.data\n    .unsafe_reinterpret_as_bytes()\n    .to_unchecked_string(offset=0, length=self.len),\n  )\n}\n\n///| \n/// Resets the string builder to an empty state.\npub fn StringBuilder::reset(self : StringBuilder) -> Unit {\n  self.len = 0\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nconst ALPHABET : String = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n\n///|\npub fn Int64::to_string(self : Int64, radix~ : Int = 10) -> String {\n  let buf = StringBuilder::new(size_hint=Int64::output_size_hint(radix~))\n  self.output(buf, radix~)\n  buf.to_string()\n}\n\n///|\npub impl Show for Int64 with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\npub fn Int::to_string(self : Int, radix~ : Int = 10) -> String {\n  let buf = StringBuilder::new(size_hint=Int::output_size_hint(radix~))\n  self.output(buf, radix~)\n  buf.to_string()\n}\n\n///|\npub impl Show for Int with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\npub fn UInt::to_string(self : UInt, radix~ : Int = 10) -> String {\n  let buf = StringBuilder::new(size_hint=UInt::output_size_hint(radix~))\n  self.output(buf, radix~)\n  buf.to_string()\n}\n\n///|\npub impl Show for UInt with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\ntest \"UInt::to_string\" {\n  inspect(0U, content=\"0\")\n  inspect(17U, content=\"17\")\n  inspect(4294967295U, content=\"4294967295\")\n}\n\n///|\npub fn UInt64::to_string(self : UInt64, radix~ : Int = 10) -> String {\n  let buf = StringBuilder::new(size_hint=UInt64::output_size_hint(radix~))\n  self.output(buf, radix~)\n  buf.to_string()\n}\n\n///|\npub impl Show for UInt64 with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\npub fn Int16::to_string(self : Int16, radix~ : Int = 10) -> String {\n  self.to_int().to_string(radix~)\n}\n\n///|\npub impl Show for Int16 with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\npub fn UInt16::to_string(self : UInt16, radix~ : Int = 10) -> String {\n  self.to_int().to_string(radix~)\n}\n\n///|\npub impl Show for UInt16 with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\ntest \"to_string\" {\n  assert_eq((0x100).to_string(), \"256\")\n  assert_eq(\"\\{0x100}\", \"256\")\n  assert_eq(0x200U.to_string(), \"512\")\n  assert_eq(\"\\{0x200U}\", \"512\")\n  assert_eq(0x300L.to_string(), \"768\")\n  assert_eq(\"\\{0x300L}\", \"768\")\n  assert_eq(0x400UL.to_string(), \"1024\")\n  assert_eq(\"\\{0x400UL}\", \"1024\")\n}\n\n///|\ntest \"to_string with radix\" {\n  // Binary\n  inspect((0).to_string(radix=2), content=\"0\")\n  inspect((1).to_string(radix=2), content=\"1\")\n  inspect((2).to_string(radix=2), content=\"10\")\n  inspect((255).to_string(radix=2), content=\"11111111\")\n  inspect((-255).to_string(radix=2), content=\"-11111111\")\n\n  // Octal\n  inspect((0).to_string(radix=8), content=\"0\")\n  inspect((8).to_string(radix=8), content=\"10\")\n  inspect((64).to_string(radix=8), content=\"100\")\n  inspect((-64).to_string(radix=8), content=\"-100\")\n\n  // Decimal\n  inspect((0).to_string(radix=10), content=\"0\")\n  inspect((123).to_string(radix=10), content=\"123\")\n  inspect((-123).to_string(radix=10), content=\"-123\")\n  inspect(\n    0x7fff_ffff_ffff_ffffL.to_string(radix=10),\n    content=\"9223372036854775807\",\n  )\n  inspect(\n    0x8000_0000_0000_0000L.to_string(radix=10),\n    content=\"-9223372036854775808\",\n  )\n\n  // Hexadecimal\n  inspect((0).to_string(radix=16), content=\"0\")\n  inspect((0x11).to_string(radix=16), content=\"11\")\n  inspect((0x15ef).to_string(radix=16), content=\"15ef\")\n  inspect((-0xabcd).to_string(radix=16), content=\"-abcd\")\n  inspect(\n    (1.0 : Float).reinterpret_as_int().to_string(radix=16),\n    content=\"3f800000\",\n  )\n\n  // UInt\n  inspect(0U.to_string(radix=16), content=\"0\")\n  inspect(0x1AU.to_string(radix=16), content=\"1a\")\n  inspect(0xabcdU.to_string(radix=16), content=\"abcd\")\n  inspect(\n    (-2.0 : Float).reinterpret_as_uint().to_string(radix=16),\n    content=\"c0000000\",\n  )\n  inspect((-1).reinterpret_as_uint().to_string(radix=16), content=\"ffffffff\")\n\n  // Int64\n  inspect(0L.to_string(radix=16), content=\"0\")\n  inspect(0x2fL.to_string(radix=16), content=\"2f\")\n  inspect(0xf0aeL.to_string(radix=16), content=\"f0ae\")\n  inspect((-0x1234eacbL).to_string(radix=16), content=\"-1234eacb\")\n  inspect(\n    1.0.reinterpret_as_uint64().to_string(radix=16),\n    content=\"3ff0000000000000\",\n  )\n  inspect(0b101L.to_string(radix=2), content=\"101\")\n  inspect(0o17L.to_string(radix=8), content=\"17\")\n\n  // UInt64\n  inspect(0UL.to_string(radix=16), content=\"0\")\n  inspect(0x11UL.to_string(radix=16), content=\"11\")\n  inspect(0x12bdUL.to_string(radix=16), content=\"12bd\")\n  inspect(\n    (-1L).reinterpret_as_uint64().to_string(radix=16),\n    content=\"ffffffffffffffff\",\n  )\n  inspect(\n    2.0.reinterpret_as_uint64().to_string(radix=16),\n    content=\"4000000000000000\",\n  )\n}\n\n///|\ntest \"panic to_string_by_radix/illegal_radix\" {\n  ignore((1).to_string(radix=1))\n  ignore((1).to_string(radix=37))\n  ignore(1L.to_string(radix=0))\n  ignore(1L.to_string(radix=42))\n  ignore(1U.to_string(radix=-1))\n  ignore(1U.to_string(radix=73))\n  ignore(1UL.to_string(radix=-100))\n  ignore(1UL.to_string(radix=100))\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn Int64::output(self : Int64, logger : &Logger, radix~ : Int = 10) -> Unit {\n  fn abs(n : Int64) -> Int64 {\n    if n < 0L {\n      0L - n\n    } else {\n      n\n    }\n  }\n\n  if self < 0L {\n    logger.write_char('-')\n  }\n  let radix : Int64 = radix.to_int64()\n  fn write_digits(num : Int64) {\n    let num2 = num / radix\n    if num2 != 0L {\n      write_digits(num2)\n    }\n    logger.write_char(\n      ALPHABET.charcode_at(abs(num % radix).to_int()).unsafe_to_char(),\n    )\n  }\n\n  write_digits(abs(self))\n}\n\n///|\nfn Int::output(self : Int, logger : &Logger, radix~ : Int = 10) -> Unit {\n  fn abs(n : Int) -> Int {\n    if n < 0 {\n      0 - n\n    } else {\n      n\n    }\n  }\n\n  if self < 0 {\n    logger.write_char('-')\n  }\n  fn write_digits(num : Int) {\n    let num2 = num / radix\n    if num2 != 0 {\n      write_digits(num2)\n    }\n    logger.write_char(ALPHABET.charcode_at(abs(num % radix)).unsafe_to_char())\n  }\n\n  write_digits(abs(self))\n}\n\n///|\nfn UInt::output(self : UInt, logger : &Logger, radix~ : Int = 10) -> Unit {\n  let radix : UInt = radix.reinterpret_as_uint()\n  fn write_digits(num : UInt) {\n    let num2 = num / radix\n    if num2 != 0U {\n      write_digits(num2)\n    }\n    logger.write_char(\n      ALPHABET.charcode_at((num % radix).reinterpret_as_int()).unsafe_to_char(),\n    )\n  }\n\n  write_digits(self)\n}\n\n///|\nfn UInt64::output(self : UInt64, logger : &Logger, radix~ : Int = 10) -> Unit {\n  let radix : UInt64 = radix.to_uint64()\n  fn write_digits(num : UInt64) {\n    let num2 = num / radix\n    if num2 != 0UL {\n      write_digits(num2)\n    }\n    logger.write_char(\n      ALPHABET.charcode_at((num % radix).to_int()).unsafe_to_char(),\n    )\n  }\n\n  write_digits(self)\n}\n\n///|\nfn Int64::output_size_hint(radix~ : Int = 10) -> Int {\n  match radix {\n    2..<7 => 70 // max length is 64, 70 is enough\n    8..<15 => 30 // max length is 23, 30 is enough\n    16..=36 => 20 // max length is 17, 20 is enough\n    _ => abort(\"radix must be between 2 and 36\")\n  }\n}\n\n///|\nfn Int::output_size_hint(radix~ : Int = 10) -> Int {\n  match radix {\n    2..<7 => 36 // max length is 32, 36 is enough\n    8..<15 => 18 // max length is 12, 18 is enough\n    16..=36 => 10 // max length is 8, 10 is enough\n    _ => abort(\"radix must be between 2 and 36\")\n  }\n}\n\n///|\nfn UInt::output_size_hint(radix~ : Int = 10) -> Int {\n  Int::output_size_hint(radix~)\n}\n\n///|\nfn UInt64::output_size_hint(radix~ : Int = 10) -> Int {\n  Int64::output_size_hint(radix~)\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Creates an iterator that iterates over a range of Int with default step 1.\n///\n/// # Arguments\n///\n/// * `start` - The starting value of the range (inclusive).\n/// * `end` - The ending value of the range (exclusive).\n/// * `inclusive` - Whether the ending value is inclusive (default false).\n///\n/// # Returns\n///\n/// Returns an iterator that iterates over the range of Int from `start` to `end - 1`.\n#deprecated(\"Use `..<` in for loop or `until` method instead\")\n#coverage.skip\npub fn Int::upto(self : Int, end : Int, inclusive~ : Bool = false) -> Iter[Int] {\n  yield_ => {\n    let mut i = self\n    while i < end || (inclusive && i == end) {\n      if yield_(i) == IterEnd {\n        break IterEnd\n      }\n      if i == end {\n        break IterContinue\n      }\n      i += 1\n    } else {\n      IterContinue\n    }\n  }\n}\n\n///|\n/// Creates an iterator that iterates over a range of UInt with default step 1U.\n///\n/// # Arguments\n///\n/// * `start` - The starting value of the range (inclusive).\n/// * `end` - The ending value of the range (exclusive).\n/// * `inclusive` - Whether the ending value is inclusive (default false).\n///\n/// # Returns\n///\n/// Returns an iterator that iterates over the range of UInt from `start` to `end - 1`.\n#deprecated(\"Use `..<` in for loop or `until` method instead\")\n#coverage.skip\npub fn UInt::upto(\n  self : UInt,\n  end : UInt,\n  inclusive~ : Bool = false\n) -> Iter[UInt] {\n  yield_ => {\n    let mut i = self\n    while i < end || (inclusive && i == end) {\n      if yield_(i) == IterEnd {\n        break IterEnd\n      }\n      if i == end {\n        break IterContinue\n      }\n      i += 1\n    } else {\n      IterContinue\n    }\n  }\n}\n\n///|\n/// Creates an iterator that iterates over a range of UInt64 with default step 1UL.\n///\n/// # Arguments\n///\n/// * `start` - The starting value of the range (inclusive).\n/// * `end` - The ending value of the range (exclusive).\n/// * `inclusive` - Whether the ending value is inclusive (default false).\n///\n/// # Returns\n///\n/// Returns an iterator that iterates over the range of UInt64 from `start` to `end - 1`.\n#deprecated(\"Use `..<` in for loop or `until` method instead\")\n#coverage.skip\npub fn UInt64::upto(\n  self : UInt64,\n  end : UInt64,\n  inclusive~ : Bool = false\n) -> Iter[UInt64] {\n  yield_ => {\n    let mut i = self\n    while i < end || (inclusive && i == end) {\n      if yield_(i) == IterEnd {\n        break IterEnd\n      }\n      if i == end {\n        break IterContinue\n      }\n      i += 1\n    } else {\n      IterContinue\n    }\n  }\n}\n\n///|\n/// Creates an iterator that iterates over a range of Int64 with default step 1L.\n///\n/// # Arguments\n///\n/// * `start` - The starting value of the range (inclusive).\n/// * `end` - The ending value of the range (exclusive).\n/// * `inclusive` - Whether the ending value is inclusive (default false).\n///\n/// # Returns\n///\n/// Returns an iterator that iterates over the range of Int64 from `start` to `end - 1`.\n#deprecated(\"Use `..<` in for loop or `until` method instead\")\n#coverage.skip\npub fn Int64::upto(\n  self : Int64,\n  end : Int64,\n  inclusive~ : Bool = false\n) -> Iter[Int64] {\n  yield_ => {\n    let mut i = self\n    while i < end || (inclusive && i == end) {\n      if yield_(i) == IterEnd {\n        break IterEnd\n      }\n      if i == end {\n        break IterContinue\n      }\n      i += 1\n    } else {\n      IterContinue\n    }\n  }\n}\n\n///|\n/// Creates an iterator that iterates over a range of Float with default step 1.0 .\n///\n/// # Arguments\n///\n/// * `start` - The starting value of the range (inclusive).\n/// * `end` - The ending value of the range (exclusive).\n/// * `inclusive` - Whether the ending value is inclusive (default false).\n///\n/// # Returns\n///\n/// Returns an iterator that iterates over the range of Float from `start` to `end - 1`.\n#deprecated(\"Use `..<` in for loop or `until` method instead\")\n#coverage.skip\npub fn Float::upto(\n  self : Float,\n  end : Float,\n  inclusive~ : Bool = false\n) -> Iter[Float] {\n  yield_ => {\n    let mut i = self\n    while i < end || (inclusive && i == end) {\n      if yield_(i) == IterEnd {\n        break IterEnd\n      }\n      if i == end {\n        break IterContinue\n      }\n      i += 1\n    } else {\n      IterContinue\n    }\n  }\n}\n\n///|\n/// Creates an iterator that iterates over a range of Double with default step 1.0 .\n///\n/// # Arguments\n///\n/// * `start` - The starting value of the range (inclusive).\n/// * `end` - The ending value of the range (exclusive).\n/// * `inclusive` - Whether the ending value is inclusive (default false).\n///\n/// # Returns\n///\n/// Returns an iterator that iterates over the range of Double from `start` to `end - 1`.\n#deprecated(\"Use `..<` in for loop or `until` method instead\")\n#coverage.skip\npub fn Double::upto(\n  self : Double,\n  end : Double,\n  inclusive~ : Bool = false\n) -> Iter[Double] {\n  yield_ => {\n    let mut i = self\n    while i < end || (inclusive && i == end) {\n      if yield_(i) == IterEnd {\n        break IterEnd\n      }\n      if i == end {\n        break IterContinue\n      }\n      i += 1\n    } else {\n      IterContinue\n    }\n  }\n}\n\n///|\n/// Searches the array for the first element that satisfies the predicate\n/// function.\n///\n/// Parameters:\n///\n/// * `array` : The array to search in.\n/// * `predicate` : A function that takes an element and returns a boolean\n/// indicating whether the element satisfies the search condition.\n///\n/// Returns the index of the first element that satisfies the predicate, or\n/// `None` if no such element is found.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.search_by((x) => { x > 3 }), content=\"Some(3)\")\n///   inspect(arr.search_by((x) => { x > 10 }), content=\"None\")\n/// ```\n///\n#deprecated(\"Use `search_by` instead.\")\n#coverage.skip\npub fn[T] Array::find_index(self : Array[T], f : (T) -> Bool) -> Int? {\n  self.search_by(f)\n}\n\n///|\n/// Search the index of the first element that satisfies the predicate.\n///\n\n///|\n/// Fold out values from an array according to certain rules.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sum = [1, 2, 3, 4, 5].fold(init=0, (sum, elem) => sum + elem)\n///   assert_eq(sum, 15)\n/// ```\n#deprecated(\"Use `fold` instead.\")\n#coverage.skip\npub fn[T, U] Array::fold_left(\n  self : Array[T],\n  f : (U, T) -> U raise?,\n  init~ : U\n) -> U raise? {\n  self.fold(init~, f)\n}\n\n///|\n/// Fold out values from an array according to certain rules in reversed turn.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sum = [1, 2, 3, 4, 5].rev_fold(init=0, (sum, elem) => sum + elem)\n///   assert_eq(sum, 15)\n/// ```\n#deprecated(\"Use `rev_fold` instead.\")\n#coverage.skip\npub fn[T, U] Array::fold_right(\n  self : Array[T],\n  f : (U, T) -> U raise?,\n  init~ : U\n) -> U raise? {\n  self.rev_fold(init~, f)\n}\n\n///|\n/// Fold out values from an array according to certain rules with index.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sum = [1, 2, 3, 4, 5].foldi(init=0, (index, sum, _elem) => sum + index)\n///   assert_eq(sum, 10)\n/// ```\n#deprecated(\"Use `foldi` instead.\")\n#coverage.skip\npub fn[T, U] Array::fold_lefti(\n  self : Array[T],\n  f : (Int, U, T) -> U raise?,\n  init~ : U\n) -> U raise? {\n  self.foldi(init~, f)\n}\n\n///|\n/// Fold out values from an array according to certain rules in reversed turn with index.\n///\n/// Example:\n///\n/// ```moonbit\n///   let sum = [1, 2, 3, 4, 5].rev_foldi(init=0, (index, sum, _elem) => sum + index)\n///   assert_eq(sum, 10)\n/// ```\n#deprecated(\"Use `rev_foldi` instead.\")\n#coverage.skip\npub fn[T, U] Array::fold_righti(\n  self : Array[T],\n  f : (Int, U, T) -> U raise?,\n  init~ : U\n) -> U raise? {\n  self.rev_foldi(init~, f)\n}\n\n///|\n#deprecated(\"Use `unsafe_pop` instead\")\n#coverage.skip\npub fn[T] Array::pop_exn(self : Array[T]) -> T {\n  self.unsafe_pop()\n}\n\n///|\n/// Creates a byte sequence from a UTF-16 encoded string. Each character in the\n/// string is encoded as a pair of bytes in little-endian order.\n///\n/// Parameters:\n///\n/// * `string` : The input string to be converted to a byte sequence.\n///\n/// Returns a new byte sequence containing the UTF-16LE encoded representation of\n/// the input string.\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes = \"ABC\".to_bytes()\n///   inspect(bytes, content=\"b\\\"\\\\x41\\\\x00\\\\x42\\\\x00\\\\x43\\\\x00\\\"\")\n/// ```\n#deprecated(\"Use `str.to_bytes()` instead\")\npub fn Bytes::of_string(str : String) -> Bytes {\n  FixedArray::make(str.length() * 2, Byte::default())\n  ..blit_from_string(0, str, 0, str.length())\n  .unsafe_reinterpret_as_bytes()\n}\n\n///|\n#deprecated(\"Bytes are immutable. Use `FixedArray::blit_from_bytes` if it's really necessary.\")\npub fn Bytes::copy(self : Bytes) -> Bytes {\n  Bytes::makei(self.length(), i => self[i])\n}\n\n///|\n/// positions.\n///\n/// Parameters:\n///\n/// - `byte_value` : The `Byte` value whose bits are to be shifted.\n/// - `shift_count` : The number of bit positions to shift the `byte_value` to\n///   the left.\n///\n/// Returns the resulting `Byte` value after the bitwise left shift operation.\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn Byte::lsl(self : Byte, count : Int) -> Byte {\n  (self.to_int() << count).to_byte()\n}\n\n///|\n/// bits.\n///\n/// Parameters:\n///\n/// - `value` : The `Byte` value to be shifted.\n/// - `count` : The number of bits to shift the `value` to the right.\n///\n/// Returns the result of the logical shift right operation as a `Byte`.\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn Byte::lsr(self : Byte, count : Int) -> Byte {\n  (self.to_uint() >> count).reinterpret_as_int().to_byte()\n}\n\n///|\n/// Prints and returns the value of a given expression for quick and dirty debugging.\n#deprecated(\"This function is for debugging only and should not be used in production\")\npub fn[T] dump(t : T, name? : String, loc~ : SourceLoc = _) -> T {\n  let name = match name {\n    Some(name) => name\n    None => \"\"\n  }\n  println(\"dump(\\{name}@\\{loc}) = \\{any_to_string(t)}\")\n  t\n}\n\n///|\n/// Returns the Unicode code point at the given index.\n///\n/// This method counts Unicode code points (characters) rather than UTF-16 code units.\n/// It properly handles surrogate pairs to return the correct Unicode character.\n///\n/// # Examples\n///\n/// ```mbt\n///   let s = \"Helloü§£\";\n///   inspect(s.iter().nth(0).unwrap(), content=\"H\");\n///   inspect(s.iter().nth(5).unwrap(), content=\"ü§£\"); // Returns full emoji character\n/// ```\n///\n/// # Panics\n///\n/// Panics if:\n/// - The index is out of bounds\n/// - The string contains an invalid surrogate pair\n#deprecated(\"The index will be changed to utf16 index. If you want to access n-th character, use `str.iter().nth(n).unwrap()` instead.\")\npub fn String::codepoint_at(self : String, index : Int) -> Char {\n  let charcode_len = self.length()\n  guard index >= 0 && index < charcode_len else { abort(\"index out of bounds\") }\n  for char_count = 0, utf16_offset = 0\n      char_count < charcode_len && utf16_offset < index\n      char_count = char_count + 1, utf16_offset = utf16_offset + 1 {\n    let c1 = self.unsafe_charcode_at(char_count)\n    if is_leading_surrogate(c1) && char_count + 1 < charcode_len {\n      let c2 = self.unsafe_charcode_at(char_count + 1)\n      if is_trailing_surrogate(c2) {\n        continue char_count + 2, utf16_offset + 1\n      } else {\n        abort(\"invalid surrogate pair\")\n      }\n    }\n  } else {\n    guard utf16_offset == index && char_count < charcode_len else {\n      abort(\"index out of bounds\")\n    }\n    let c1 = self.unsafe_charcode_at(char_count)\n    if is_leading_surrogate(c1) && char_count + 1 < charcode_len {\n      let c2 = self.unsafe_charcode_at(char_count + 1)\n      if is_trailing_surrogate(c2) {\n        code_point_of_surrogate_pair(c1, c2)\n      } else {\n        abort(\"invalid surrogate pair\")\n      }\n    } else {\n      c1.unsafe_to_char()\n    }\n  }\n}\n\n///|\n#deprecated(\"Use `char_length` instead.\")\npub fn String::codepoint_length(\n  self : String,\n  start_offset~ : Int = 0,\n  end_offset? : Int\n) -> Int {\n  self.char_length(start_offset~, end_offset?)\n}\n\n///|\n#deprecated(\"Use `s[i]` instead\")\npub fn String::charcode_at(self : String, index : Int) -> Int {\n  self[index]\n}\n\n///|\n/// Returns the Unicode code point at the given index without bounds checking.\n#deprecated(\"Use `s.get_char(i).unwrap()` instead\")\npub fn String::unsafe_char_at(self : String, index : Int) -> Char {\n  let c1 = self.unsafe_charcode_at(index)\n  if is_leading_surrogate(c1) {\n    let c2 = self.unsafe_charcode_at(index + 1)\n    code_point_of_surrogate_pair(c1, c2)\n  } else {\n    c1.unsafe_to_char()\n  }\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Trait for types whose elements can test for equality\npub(open) trait Eq {\n  op_equal(Self, Self) -> Bool\n}\n\n///|\n/// Trait for types whose elements are ordered\n///\n/// The return value of [compare] is:\n/// - zero, if the two arguments are equal\n/// - negative, if the first argument is smaller\n/// - positive, if the first argument is greater\npub(open) trait Compare: Eq {\n  compare(Self, Self) -> Int\n}\n\n///|\n/// Trait for types that can be hashed\npub(open) trait Hash {\n  hash_combine(Self, Hasher) -> Unit\n  hash(Self) -> Int = _\n}\n\n///|\nimpl Hash with hash(self) {\n  Hasher::new()..combine(self).finalize()\n}\n\n///|\n/// Trait for types with a default value\npub(open) trait Default {\n  default() -> Self\n}\n\n///|\n/// Trait for a logger, where debug logs can be written into\npub(open) trait Logger {\n  write_string(Self, String) -> Unit\n  write_substring(Self, String, Int, Int) -> Unit\n  write_char(Self, Char) -> Unit = _\n}\n\n///|\nimpl Logger with write_char(self, value) {\n  self.write_string([value])\n}\n\n///|\n/// Trait for types that can be converted to `String`\npub(open) trait Show {\n  // `output` is used for composition of aggregate structure.\n  // `output` writes a string representation of `self` to a logger.\n  // `output` should produce a valid MoonBit-syntax representation if possible.\n  // For example, `Show::output` for `String` should be quoted\n  output(Self, &Logger) -> Unit\n  // `to_string` should be used by end users of `Show`,\n  // for printing, interpolation, etc. only, and should not be used for composition.\n  // By default `to_string` is implemented using `output` and a buffer,\n  // but some types, such as `String`, may override `to_string`,\n  // for different (unescaped) behavior when interpolated/printed directly\n  to_string(Self) -> String = _\n}\n\n///|\n// Default implementation for `Show::to_string`, uses a `Buffer`\nimpl Show with to_string(self) {\n  let logger = StringBuilder::new()\n  self.output(logger)\n  logger.to_string()\n}\n\n///|\npub fn[Obj : Show] &Logger::write_object(self : &Logger, obj : Obj) -> Unit {\n  obj.output(self)\n}\n\n///|\npub fn[T : Show] &Logger::write_iter(\n  self : &Logger,\n  iter : Iter[T],\n  prefix~ : String = \"[\",\n  suffix~ : String = \"]\",\n  sep~ : String = \", \",\n  trailing~ : Bool = false\n) -> Unit {\n  self.write_string(prefix)\n  if trailing {\n    for x in iter {\n      self.write_object(x)\n      self.write_string(sep)\n    }\n  } else {\n    // trailing is false\n    let mut first = true\n    for x in iter {\n      if first {\n        first = false\n      } else {\n        self.write_string(sep)\n      }\n      self.write_object(x)\n    }\n  }\n  self.write_string(suffix)\n}\n// TODO: Logger::write_double(self:Logger, val:Double) -> Unit\n\n///|\npub fn[T : Show] repr(t : T) -> String {\n  let logger = StringBuilder::new()\n  t.output(logger)\n  logger.to_string()\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Reinterpret the byte sequence as Bytes.\n/// \n/// Notice that this will make the `Bytes` object to be a view of the original\n/// byte sequence, so any modification to the original byte sequence will be\n/// reflected in the `Bytes` object.\n#internal(unsafe, \"Creating mutable Bytes\")\npub fn FixedArray::unsafe_reinterpret_as_bytes(\n  self : FixedArray[Byte]\n) -> Bytes = \"%identity\"\n\n///| \n/// Creates a new byte sequence of the specified length, where each byte is\n/// initialized using a function that maps indices to bytes.\n///\n/// Parameters:\n///\n/// * `length` : The length of the byte sequence to create. If `length` is less than or\n/// equal to 0, returns an empty byte sequence.\n/// * `value` : A function that takes an index (from 0 to `length - 1`) and\n/// returns a byte for that position.\n///\n/// Returns a new byte sequence containing the bytes produced by applying the\n/// value function to each index.\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes = Bytes::makei(3, (i) => { (i + 65).to_byte() })\n///   assert_eq(bytes, b\"ABC\")\n/// ```\npub fn Bytes::makei(length : Int, value : (Int) -> Byte) -> Bytes {\n  if length <= 0 {\n    return []\n  }\n  let arr = FixedArray::make(length, value(0))\n  for i in 1..<length {\n    arr[i] = value(i)\n  }\n  FixedArray::unsafe_reinterpret_as_bytes(arr)\n}\n\n///|\n/// TODO: support local primitive declaration\nfn unsafe_sub_string(\n  bytes : Bytes,\n  byte_offset : Int,\n  byte_length : Int\n) -> String = \"$moonbit.unsafe_bytes_sub_string\"\n\n///|\n/// Return an unchecked string, containing the subsequence of `self` that starts at \n/// `offset` and has length `length`. Both `offset` and `length` \n/// are indexed by byte.\n/// \n/// Note this function does not validate the encoding of the byte sequence, \n/// it simply copy the bytes into a new String.\npub fn Bytes::to_unchecked_string(\n  self : Bytes,\n  offset~ : Int = 0,\n  length? : Int\n) -> String {\n  let len = self.length()\n  let length = if length is Some(l) { l } else { len - offset }\n  guard offset >= 0 && length >= 0 && offset + length <= len\n  unsafe_sub_string(self, offset, length)\n}\n\n///|\n/// Copies characters from a string to a byte sequence in UTF-16LE encoding. Each\n/// character is converted into two bytes, with the lower byte stored first.\n///\n/// Parameters:\n///\n/// * `self` : The destination byte array to copy the characters into.\n/// * `bytes_offset` : The starting position in the destination array where bytes\n/// will be written.\n/// * `str` : The source string containing the characters to copy.\n/// * `str_offset` : The starting position in the source string from which\n/// characters will be read.\n/// * `length` : The number of characters to copy.\n///\n/// Throws a runtime error if:\n///\n/// * `length` is negative\n/// * `bytes_offset` is negative\n/// * `str_offset` is negative\n/// * The range `[bytes_offset, bytes_offset + length * 2)` exceeds the length of\n/// the destination array\n/// * The range `[str_offset, str_offset + length)` exceeds the length of the\n/// source string\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes = FixedArray::make(6, b'\\x00')\n///   bytes.blit_from_string(0, \"ABC\", 0, 3)\n///   inspect(bytes[0], content=\"b'\\\\x41'\") // 'A'\n///   inspect(bytes[1], content=\"b'\\\\x00'\")\n///   inspect(bytes[2], content=\"b'\\\\x42'\") // 'B'\n/// ```\npub fn FixedArray::blit_from_string(\n  self : FixedArray[Byte],\n  bytes_offset : Int,\n  str : String,\n  str_offset : Int,\n  length : Int\n) -> Unit {\n  let s1 = bytes_offset\n  let s2 = str_offset\n  let e1 = bytes_offset + length - 1\n  let e2 = str_offset + length - 1\n  let len1 = self.length()\n  let len2 = str.length()\n  guard length >= 0 && s1 >= 0 && e1 < len1 && s2 >= 0 && e2 < len2\n  let end_str_offset = str_offset + length\n  for i = str_offset, j = bytes_offset; i < end_str_offset; i = i + 1, j = j + 2 {\n    let c = str.unsafe_charcode_at(i).reinterpret_as_uint()\n    self[j] = (c & 0xff).to_byte()\n    self[j + 1] = (c >> 8).to_byte()\n  }\n}\n\n///|\n/// Copy `length` chars from byte sequence `src`, starting at `src_offset`,\n/// into byte sequence `self`, starting at `bytes_offset`.\npub fn FixedArray::blit_from_bytes(\n  self : FixedArray[Byte],\n  bytes_offset : Int,\n  src : Bytes,\n  src_offset : Int,\n  length : Int\n) -> Unit {\n  let s1 = bytes_offset\n  let s2 = src_offset\n  let e1 = bytes_offset + length - 1\n  let e2 = src_offset + length - 1\n  let len1 = self.length()\n  let len2 = src.length()\n  guard length >= 0 && s1 >= 0 && e1 < len1 && s2 >= 0 && e2 < len2\n  let end_src_offset = src_offset + length\n  for i = src_offset, j = bytes_offset; i < end_src_offset; i = i + 1, j = j + 1 {\n    self[j] = src[i]\n  }\n}\n\n///|\n/// Encodes a Unicode character into UTF-8 bytes and writes them into a fixed\n/// array of bytes at the specified offset.\n///\n/// Parameters:\n///\n/// * `array` : The fixed array of bytes to write into.\n/// * `offset` : The starting position in the array where the encoded bytes will\n/// be written.\n/// * `char` : The Unicode character to be encoded.\n///\n/// Returns the number of bytes written (1 to 4 bytes depending on the\n/// character's code point).\n///\n/// Throws a panic if:\n///\n/// * The character's code point is greater than 0x10FFFF.\n/// ```moonbit\n///   let buf = FixedArray::make(4, b'\\x00')\n///   let written = buf.set_utf8_char(0, '‚Ç¨') // Euro symbol (U+20AC)\n///   inspect(written, content=\"3\") // UTF-8 encoding takes 3 bytes\n///   inspect(buf[0], content=\"b'\\\\xE2'\")\n///   inspect(buf[1], content=\"b'\\\\x82'\")\n///   inspect(buf[2], content=\"b'\\\\xAC'\")\n/// ```\npub fn FixedArray::set_utf8_char(\n  self : FixedArray[Byte],\n  offset : Int,\n  value : Char\n) -> Int {\n  let code = value.to_uint()\n  match code {\n    _..<0x80 => {\n      self[offset] = ((code & 0x7F) | 0x00).to_byte()\n      1\n    }\n    _..<0x0800 => {\n      self[offset] = (((code >> 6) & 0x1F) | 0xC0).to_byte()\n      self[offset + 1] = ((code & 0x3F) | 0x80).to_byte()\n      2\n    }\n    _..<0x010000 => {\n      self[offset] = (((code >> 12) & 0x0F) | 0xE0).to_byte()\n      self[offset + 1] = (((code >> 6) & 0x3F) | 0x80).to_byte()\n      self[offset + 2] = ((code & 0x3F) | 0x80).to_byte()\n      3\n    }\n    _..<0x110000 => {\n      self[offset] = (((code >> 18) & 0x07) | 0xF0).to_byte()\n      self[offset + 1] = (((code >> 12) & 0x3F) | 0x80).to_byte()\n      self[offset + 2] = (((code >> 6) & 0x3F) | 0x80).to_byte()\n      self[offset + 3] = ((code & 0x3F) | 0x80).to_byte()\n      4\n    }\n    _ => abort(\"Char out of range\")\n  }\n}\n\n///|\n/// Fill UTF16LE encoded char `value` into byte sequence `self`, starting at `offset`.\n/// It return the length of bytes has been written.\n/// \n/// This function will panic if the `value` is out of range.\npub fn FixedArray::set_utf16le_char(\n  self : FixedArray[Byte],\n  offset : Int,\n  value : Char\n) -> Int {\n  let code = value.to_uint()\n  if code < 0x10000 {\n    self[offset] = (code & 0xFF).to_byte()\n    self[offset + 1] = (code >> 8).to_byte()\n    2\n  } else if code < 0x110000 {\n    let hi = code - 0x10000\n    let lo = (hi >> 10) | 0xD800\n    let hi = (hi & 0x3FF) | 0xDC00\n    self[offset] = (lo & 0xFF).to_byte()\n    self[offset + 1] = (lo >> 8).to_byte()\n    self[offset + 2] = (hi & 0xFF).to_byte()\n    self[offset + 3] = (hi >> 8).to_byte()\n    4\n  } else {\n    abort(\"Char out of range\")\n  }\n}\n\n///|\n/// Fill UTF16BE encoded char `value` into byte sequence `self`, starting at `offset`.\n/// It return the length of bytes has been written.\n/// \n/// This function will panic if the `value` is out of range.\npub fn FixedArray::set_utf16be_char(\n  self : FixedArray[Byte],\n  offset : Int,\n  value : Char\n) -> Int {\n  let code = value.to_uint()\n  if code < 0x10000 {\n    self[offset] = (code >> 0xFF).to_byte()\n    self[offset + 1] = (code & 0xFF).to_byte()\n    2\n  } else if code < 0x110000 {\n    let hi = code - 0x10000\n    let lo = (hi >> 10) | 0xD800\n    let hi = (hi & 0x3FF) | 0xDC00\n    self[offset] = (lo >> 8).to_byte()\n    self[offset + 1] = (lo & 0xFF).to_byte()\n    self[offset + 2] = (hi >> 8).to_byte()\n    self[offset + 3] = (hi & 0xFF).to_byte()\n    4\n  } else {\n    abort(\"Char out of range\")\n  }\n}\n\n///|\n/// Compares two byte sequences for equality. Returns true only if both sequences\n/// have the same length and contain identical bytes in the same order.\n///\n/// Parameters:\n///\n/// * `self` : The first byte sequence to compare.\n/// * `other` : The second byte sequence to compare.\n///\n/// Returns `true` if the byte sequences are equal, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes1 = b\"\\x01\\x02\\x03\"\n///   let bytes2 = b\"\\x01\\x02\\x03\"\n///   let bytes3 = b\"\\x01\\x02\\x04\"\n///   inspect(bytes1 == bytes2, content=\"true\")\n///   inspect(bytes1 == bytes3, content=\"false\")\n/// ```\npub impl Eq for Bytes with op_equal(self : Bytes, other : Bytes) -> Bool {\n  if self.length() != other.length() {\n    false\n  } else {\n    let len = self.length()\n    for i in 0..<len {\n      if self[i] != other[i] {\n        break false\n      }\n    } else {\n      true\n    }\n  }\n}\n\n///|\n/// Compares two byte sequences lexicographically. First compares the lengths of\n/// the sequences, then compares bytes pairwise until a difference is found or\n/// all bytes have been compared.\n///\n/// Parameters:\n///\n/// * `self` : The first byte sequence to compare.\n/// * `other` : The second byte sequence to compare.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = b\"\\x01\\x02\\x03\"\n///   let b = b\"\\x01\\x02\\x04\"\n///   inspect(a.compare(b), content=\"-1\") // a < b\n///   inspect(b.compare(a), content=\"1\") // b > a\n///   inspect(a.compare(a), content=\"0\") // a = a\n/// \n///   let a = b\"\\x01\\x02\"\n///   let b = b\"\\x01\\x02\\x03\"\n///   inspect(a.compare(b), content=\"-1\") // shorter sequence is less\n///   inspect(b.compare(a), content=\"1\") // longer sequence is greater\n/// ```\npub impl Compare for Bytes with compare(self, other) {\n  let self_len = self.length()\n  let other_len = other.length()\n  let cmp = self_len.compare(other_len)\n  if cmp != 0 {\n    return cmp\n  }\n  for i in 0..<self_len {\n    let b1 = self.unsafe_get(i)\n    let b2 = other.unsafe_get(i)\n    let cmp = b1.compare(b2)\n    if cmp != 0 {\n      break cmp\n    }\n  } else {\n    0\n  }\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n#coverage.skip\npub fn[T : Compare] op_lt(self_ : T, other : T) -> Bool {\n  self_.compare(other).is_neg()\n}\n\n///|\n#coverage.skip\npub fn[T : Compare] op_gt(self_ : T, other : T) -> Bool {\n  self_.compare(other).is_pos()\n}\n\n///|\n#coverage.skip\npub fn[T : Compare] op_le(self_ : T, other : T) -> Bool {\n  self_.compare(other).is_non_pos()\n}\n\n///|\n#coverage.skip\npub fn[T : Compare] op_ge(self_ : T, other : T) -> Bool {\n  self_.compare(other).is_non_neg()\n}\n\n///|\n#coverage.skip\npub fn[T : Eq] op_notequal(x : T, y : T) -> Bool {\n  !(x == y)\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Performs multiplication between two byte values. The result is truncated to\n/// fit within the byte range.\n///\n/// Parameters:\n///\n/// * `self` : The first byte operand in the multiplication.\n/// * `that` : The second byte operand in the multiplication.\n///\n/// Returns the product of the two bytes, truncated to fit within the byte range\n/// (0-255).\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = b'\\x02'\n///   let b = b'\\x03'\n///   inspect(a * b, content=\"b'\\\\x06'\") // 2 * 3 = 6\n///   let c = b'\\xFF'\n///   inspect(c * c, content=\"b'\\\\x01'\") // 255 * 255 = 65025, truncated to 1\n/// ```\npub impl Mul for Byte with op_mul(self : Byte, that : Byte) -> Byte {\n  (self.to_int() * that.to_int()).to_byte()\n}\n\n///|\n/// Performs division operation between two bytes by converting them to integers,\n/// performing the division, and converting the result back to a byte.\n///\n/// Parameters:\n///\n/// * `self` : The dividend byte value.\n/// * `that` : The divisor byte value.\n///\n/// Returns the quotient of the division as a byte.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = b'\\xFF' // 255\n///   let b = b'\\x03' // 3\n///   inspect(a / b, content=\"b'\\\\x55'\") // 255 / 3 = 85 (0x55)\n/// ```\npub impl Div for Byte with op_div(self : Byte, that : Byte) -> Byte {\n  (self.to_int() / that.to_int()).to_byte()\n}\n\n///|\npub impl Mod for Byte with op_mod(self : Byte, that : Byte) -> Byte {\n  (self.to_int() % that.to_int()).to_byte()\n}\n\n///|\n/// Compares two `Byte` values for equality.\n///\n/// Parameters:\n///\n/// - `self` : The first `Byte` value to compare.\n/// - `that` : The second `Byte` value to compare.\n///\n/// Returns `true` if the two `Byte` values are equal, otherwise `false`.\npub impl Eq for Byte with op_equal(self : Byte, that : Byte) -> Bool {\n  self.to_int() == that.to_int()\n}\n\n///|\n/// Adds two `Byte` values together and returns the result as a `Byte`.\n///\n/// Parameters:\n///\n/// - `byte1` : The first `Byte` value to be added.\n/// - `byte2` : The second `Byte` value to be added.\n///\n/// Returns the sum of `byte1` and `byte2` as a `Byte`.\npub impl Add for Byte with op_add(self : Byte, that : Byte) -> Byte {\n  (self.to_int() + that.to_int()).to_byte()\n}\n\n///|\n/// Subtracts the second byte from the first byte and returns the result as a\n/// byte.\n///\n/// Parameters:\n///\n/// - `self` : The byte from which the second byte will be subtracted.\n/// - `that` : The byte to subtract from the first byte.\n///\n/// Returns the result of the subtraction as a byte.\npub impl Sub for Byte with op_sub(self : Byte, that : Byte) -> Byte {\n  (self.to_int() - that.to_int()).to_byte()\n}\n\n///|\n/// Compares two `Byte` values and returns an integer indicating their relative\n/// order.\n///\n/// Parameters:\n///\n/// - `byte1` : The first `Byte` value to compare.\n/// - `byte2` : The second `Byte` value to compare.\n///\n/// Returns an integer where:\n/// - A value less than 0 indicates that `byte1` is less than `byte2`.\n/// - A value of 0 indicates that `byte1` is equal to `byte2`.\n/// - A value greater than 0 indicates that `byte1` is greater than `byte2`.\npub impl Compare for Byte with compare(self : Byte, that : Byte) -> Int {\n  self.to_int().compare(that.to_int())\n}\n\n///|\nfn alphabet(x : Int) -> String {\n  match x {\n    0 => \"0\"\n    1 => \"1\"\n    2 => \"2\"\n    3 => \"3\"\n    4 => \"4\"\n    5 => \"5\"\n    6 => \"6\"\n    7 => \"7\"\n    8 => \"8\"\n    9 => \"9\"\n    10 => \"A\"\n    11 => \"B\"\n    12 => \"C\"\n    13 => \"D\"\n    14 => \"E\"\n    15 => \"F\"\n    _ => abort(\"impossible\")\n  }\n}\n\n///|\n/// Converts a `Byte` to its string representation in hexadecimal format.\n///\n/// Parameters:\n///\n/// - `byte` : The `Byte` value to be converted.\n///\n/// Returns a `String` representing the `Byte` in the format `b'\\xHH'`, where\n/// `HH` is the hexadecimal representation of the byte.\npub fn Byte::to_string(self : Byte) -> String {\n  let i = self.to_int()\n  let hi = alphabet(i / 16)\n  let lo = alphabet(i % 16)\n  \"b'\\\\x\\{hi}\\{lo}'\"\n}\n\n///|\n/// Implements the `Hash` trait for `Byte` type by converting the byte to an\n/// integer and using it as the hash value.\n///\n/// Parameters:\n///\n/// * `self` : The byte value to be hashed.\n///\n/// Returns an integer representing the hash value of the byte.\n///\n/// Example:\n///\n/// ```moonbit\n///   let b = b'\\x42'\n///   inspect(Hash::hash(b), content=\"66\") // ASCII value of 'B'\n/// ```\npub impl Hash for Byte with hash(self) {\n  self.to_int()\n}\n\n///|\n/// Implements the `Hash` trait for `Byte` type by providing a `hash_combine`\n/// method that combines a byte value with a hasher.\n///\n/// Parameters:\n///\n/// * `self` : The byte value to be hashed.\n/// * `hasher` : The hasher object that will be used to combine the byte value\n/// into its internal state.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hasher = Hasher::new()\n///   hasher.combine_byte(b'\\xFF')\n///   inspect(hasher.finalize(), content=\"1955036104\")\n/// ```\npub impl Hash for Byte with hash_combine(self, hasher) {\n  hasher.combine_byte(self)\n}\n\n///|\n/// Returns the default value for a `Byte`, which is `b'\\x00'`.\n///\n/// Parameters:\n///\n/// - None\n///\n/// Returns the default `Byte` value, which is `b'\\x00'`.\npub impl Default for Byte with default() {\n  b'\\x00'\n}\n\n///|\n/// Performs a bitwise NOT operation on the given `Byte` value.\n///\n/// Parameters:\n///\n/// - `value` : The `Byte` value to apply the bitwise NOT operation on.\n///\n/// Returns the result of the bitwise NOT operation as a `Byte`.\npub fn Byte::lnot(self : Byte) -> Byte {\n  self.to_int().lnot().to_byte()\n}\n\n///|\n/// Performs a bitwise AND operation between two `Byte` values.\n///\n/// Parameters:\n///\n/// - `byte1` : The first `Byte` value to perform the bitwise AND operation with.\n/// - `byte2` : The second `Byte` value to perform the bitwise AND operation\n///   with.\n///\n/// Returns the result of the bitwise AND operation as a `Byte`.\npub impl BitAnd for Byte with land(self : Byte, that : Byte) -> Byte {\n  (self.to_int() & that.to_int()).to_byte()\n}\n\n///|\n/// Performs a bitwise OR operation between two `Byte` values.\n///\n/// Parameters:\n///\n/// - `self` : The first `Byte` value.\n/// - `that` : The second `Byte` value.\n///\n/// Returns a new `Byte` value resulting from the bitwise OR operation.\npub impl BitOr for Byte with lor(self : Byte, that : Byte) -> Byte {\n  (self.to_int() | that.to_int()).to_byte()\n}\n\n///|\n/// Performs a bitwise XOR operation between two `Byte` values.\n///\n/// Parameters:\n///\n/// - `self` : The first `Byte` value.\n/// - `that` : The second `Byte` value.\n///\n/// Returns the result of the bitwise XOR operation as a `Byte`.\npub impl BitXOr for Byte with lxor(self : Byte, that : Byte) -> Byte {\n  (self.to_int() ^ that.to_int()).to_byte()\n}\n\n///|\n/// Converts a `Byte` to a `UInt`.\n///\n/// Parameters:\n///\n/// - `byte` : The `Byte` value to be converted.\n///\n/// Returns the `UInt` representation of the `Byte`.\npub fn Byte::to_uint(self : Byte) -> UInt {\n  self.to_int().reinterpret_as_uint()\n}\n\n///|\n/// Shifts the bits of the `Byte` value to the left by the specified number of\n/// positions.\n///\n/// Parameters:\n///\n/// - `byte_value` : The `Byte` value whose bits are to be shifted.\n/// - `shift_count` : The number of bit positions to shift the `byte_value` to\n///   the left.\n///\n/// Returns the resulting `Byte` value after the shift operation.\npub impl Shl for Byte with op_shl(self : Byte, count : Int) -> Byte {\n  (self.to_int() << count).to_byte()\n}\n\n///|\n/// Shifts the bits of the `Byte` value to the right by the specified number of\n/// positions.\n///\n/// Parameters:\n///\n/// - `byte` : The `Byte` value whose bits are to be shifted.\n/// - `count` : The number of bit positions to shift the `byte` value to the\n///   right.\n///\n/// Returns the resulting `Byte` value after the bitwise right shift operation.\npub impl Shr for Byte with op_shr(self : Byte, count : Int) -> Byte {\n  (self.to_uint() >> count).reinterpret_as_int().to_byte()\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Evaluates an expression and discards its result. This is useful when you want\n/// to execute an expression for its side effects but don't care about its return\n/// value, or when you want to explicitly indicate that a value is intentionally\n/// unused.\n///\n/// Parameters:\n///\n/// * `value` : The value to be ignored. Can be of any type.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 42\n///   ignore(x) // Explicitly ignore the value\n///   let mut sum = 0\n///   ignore([1, 2, 3].iter().each((x) => { sum = sum + x })) // Ignore the Unit return value of each()\n/// ```\npub fn[T] ignore(t : T) -> Unit = \"%ignore\"\n\n///|\n/// Tests if two values are physically equal (i.e., point to the same memory\n/// location). Unlike structural equality testing (`==`), this function checks if\n/// two references point to exactly the same object in memory.\n///\n/// Parameters:\n///\n/// * `first` : The first value to compare.\n/// * `second` : The second value to compare.\n/// * `T` : The type parameter representing the type of values being compared.\n///\n/// Returns `true` if both values refer to the same object in memory, `false`\n/// otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr1 = [1, 2, 3]\n///   let arr2 = arr1\n///   let arr3 = [1, 2, 3]\n///   inspect(physical_equal(arr1, arr2), content=\"true\") // Same object\n///   inspect(physical_equal(arr1, arr3), content=\"false\") // Different objects with same content\n/// ```\npub fn[T] physical_equal(a : T, b : T) -> Bool = \"%refeq\"\n\n///|\npub fnalias @abort.abort\n\n///|\npub fn[T] panic() -> T = \"%panic\"\n\n// Bool primitive ops\n\n///|\n/// Performs logical negation on a boolean value.\n///\n/// Parameters:\n///\n/// * `value` : The boolean value to negate.\n///\n/// Returns the logical NOT of the input value: `true` if the input is `false`,\n/// and `false` if the input is `true`.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(not(true), content=\"false\")\n///   inspect(not(false), content=\"true\")\n/// ```\npub fn not(x : Bool) -> Bool = \"%bool_not\"\n\n///|\n/// Compares two boolean values for equality.\n///\n/// Parameters:\n///\n/// * `self` : The first boolean value to compare.\n/// * `other` : The second boolean value to compare.\n///\n/// Returns `true` if both boolean values are equal (either both `true` or both\n/// `false`), `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(true == true, content=\"true\")\n///   inspect(false == true, content=\"false\")\n///   inspect(true == false, content=\"false\")\n///   inspect(false == false, content=\"true\")\n/// ```\npub impl Eq for Bool with op_equal(self : Bool, other : Bool) -> Bool = \"%bool_eq\"\n\n///|\n/// Compares two boolean values and returns their relative order. This is a\n/// deprecated method and users should use `compare` instead.\n///\n/// Parameters:\n///\n/// * `self` : The first boolean value to compare.\n/// * `other` : The second boolean value to compare against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other` (i.e., `self` is `false`\n/// and `other` is `true`)\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other` (i.e., `self` is `true`\n/// and `other` is `false`)\n///\n/// Example:\n///\n/// ```moonbit\n///   let t = true\n///   let f = false\n///   // This usage is deprecated, use compare() instead\n///   inspect(t.compare(f), content=\"1\")\n///   inspect(f.compare(t), content=\"-1\")\n///   inspect(t.compare(t), content=\"0\")\n/// ```\n///\n#deprecated(\"Use `compare` instead\")\n#coverage.skip\npub fn Bool::op_compare(self : Bool, other : Bool) -> Int = \"%bool_compare\"\n\n///|\n/// Compares two boolean values and returns their relative order. The comparison\n/// follows the rule that `false` is less than `true`.\n///\n/// Parameters:\n///\n/// * `self` : The first boolean value to compare.\n/// * `other` : The second boolean value to compare against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is `false` and `other` is `true`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is `true` and `other` is `false`\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(true.compare(false), content=\"1\") // true > false\n///   inspect(false.compare(true), content=\"-1\") // false < true\n///   inspect(true.compare(true), content=\"0\") // true = true\n/// ```\npub impl Compare for Bool with compare(self, other) = \"%bool_compare\"\n\n///|\n/// Returns the default value for the `Bool` type, which is `false`.\n///\n/// Returns a `Bool` value that represents the default state of a boolean value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let b : Bool = Bool::default()\n///   inspect(b, content=\"false\")\n/// ```\npub impl Default for Bool with default() = \"%bool_default\"\n\n// int32 primitive ops\n\n///|\n/// Performs arithmetic negation on an integer value, returning its additive\n/// inverse.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to negate.\n///\n/// Returns the negation of the input value. For all inputs except\n/// `Int::min_value()`, returns the value with opposite sign. When the input is\n/// `Int::min_value()`, returns `Int::min_value()` due to two's complement\n/// representation.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(-42, content=\"-42\")\n///   inspect(42, content=\"42\")\n///   inspect(--2147483647, content=\"2147483647\") // negating near min value\n/// ```\npub impl Neg for Int with op_neg(self) = \"%i32_neg\"\n\n///|\n/// Adds two 32-bit signed integers. Performs two's complement arithmetic, which\n/// means the operation will wrap around if the result exceeds the range of a\n/// 32-bit integer.\n///\n/// Parameters:\n///\n/// * `self` : The first integer operand.\n/// * `other` : The second integer operand.\n///\n/// Returns a new integer that is the sum of the two operands. If the\n/// mathematical sum exceeds the range of a 32-bit integer (-2,147,483,648 to\n/// 2,147,483,647), the result wraps around according to two's complement rules.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(42 + 1, content=\"43\")\n///   inspect(2147483647 + 1, content=\"-2147483648\") // Overflow wraps around to minimum value\n/// ```\npub impl Add for Int with op_add(self, other) = \"%i32_add\"\n\n///|\n/// Performs subtraction between two 32-bit integers, following standard two's\n/// complement arithmetic rules. When the result overflows or underflows, it\n/// wraps around within the 32-bit integer range.\n///\n/// Parameters:\n///\n/// * `self` : The minuend (the number being subtracted from).\n/// * `other` : The subtrahend (the number to subtract).\n///\n/// Returns the difference between `self` and `other`.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 42\n///   let b = 10\n///   inspect(a - b, content=\"32\")\n///   let max = 2147483647 // Int maximum value\n///   inspect(max - -1, content=\"-2147483648\") // Overflow case\n/// ```\npub impl Sub for Int with op_sub(self, other) = \"%i32_sub\"\n\n///|\n/// Multiplies two 32-bit integers. This is the implementation of the `*`\n/// operator for `Int`.\n///\n/// Parameters:\n///\n/// * `self` : The first integer operand.\n/// * `other` : The second integer operand.\n///\n/// Returns the product of the two integers. If the result overflows the range of\n/// `Int`, it wraps around according to two's complement arithmetic.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(42 * 2, content=\"84\")\n///   inspect(-10 * 3, content=\"-30\")\n///   let max = 2147483647 // Int.max_value\n///   inspect(max * 2, content=\"-2\") // Overflow wraps around\n/// ```\npub impl Mul for Int with op_mul(self, other) = \"%i32_mul\"\n\n///|\n/// Performs integer division between two 32-bit integers. The result is\n/// truncated towards zero (rounds down for positive numbers and up for negative\n/// numbers).\n///\n/// Parameters:\n///\n/// * `dividend` : The first integer operand to be divided.\n/// * `divisor` : The second integer operand that divides the dividend.\n///\n/// Returns the quotient of the division operation.\n///\n/// Throws a panic if `divisor` is zero.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(10 / 3, content=\"3\") // truncates towards zero\n///   inspect(-10 / 3, content=\"-3\")\n///   inspect(10 / -3, content=\"-3\")\n/// ```\npub impl Div for Int with op_div(self, other) = \"%i32_div\"\n\n///|\n/// Calculates the remainder of dividing one integer by another. The result\n/// follows the formula `dividend - (dividend / divisor) * divisor`, maintaining\n/// the same sign as the dividend.\n///\n/// Parameters:\n///\n/// * `self` : The dividend (the number being divided).\n/// * `other` : The divisor (the number to divide by).\n///\n/// Returns the remainder of the division. If `other` is 0, the behavior is\n/// undefined.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(7 % 3, content=\"1\")\n///   inspect(-7 % 3, content=\"-1\")\n///   inspect(7 % -3, content=\"1\")\n/// ```\npub impl Mod for Int with op_mod(self, other) = \"%i32_mod\"\n\n///|\n/// Performs a bitwise NOT operation on a 32-bit integer. Flips each bit in the\n/// integer's binary representation (0 becomes 1 and 1 becomes 0).\n///\n/// Parameters:\n///\n/// * `value` : The 32-bit integer on which to perform the bitwise NOT operation.\n///\n/// Returns a new integer with all bits flipped from the input value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = -1 // All bits are 1\n///   let b = 0 // All bits are 0\n///   inspect(a.lnot(), content=\"0\")\n///   inspect(b.lnot(), content=\"-1\")\n/// ```\npub fn Int::lnot(self : Int) -> Int = \"%i32_lnot\"\n\n///|\n/// Performs a bitwise AND operation between two 32-bit integers. Each bit in the\n/// result is set to 1 only if the corresponding bits in both operands are 1.\n///\n/// Parameters:\n///\n/// * `self` : The first 32-bit integer operand.\n/// * `other` : The second 32-bit integer operand.\n///\n/// Returns the result of the bitwise AND operation. The resulting value has a\n/// bit set to 1 at each position where both input integers have a bit set to 1.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0xF0 // 11110000\n///   let y = 0xAA // 10101010\n///   inspect(x & y, content=\"160\") // 10100000 = 160\n/// ```\npub fn Int::land(self : Int, other : Int) -> Int = \"%i32_land\"\n\n///|\n/// Performs a bitwise OR operation between two 32-bit integers. For each bit\n/// position, the result is 1 if at least one of the corresponding bits in either\n/// operand is 1.\n///\n/// Parameters:\n///\n/// * `self` : The first integer operand.\n/// * `other` : The second integer operand.\n///\n/// Returns a new integer where each bit is set to 1 if at least one of the\n/// corresponding bits in either operand is 1, and 0 otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0xF0F0 // 1111_0000_1111_0000\n///   let y = 0x0F0F // 0000_1111_0000_1111\n///   inspect(x | y, content=\"65535\") // 1111_1111_1111_1111 = 65535\n/// ```\npub fn Int::lor(self : Int, other : Int) -> Int = \"%i32_lor\"\n\n///|\n/// Performs a bitwise XOR operation between two integers.\n///\n/// Parameters:\n///\n/// * `self` : The first integer operand.\n/// * `other` : The second integer operand.\n///\n/// Returns a new integer where each bit is set to 1 if the corresponding bits in\n/// the operands are different, and 0 if they are the same.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0xF0F0 // 1111_0000_1111_0000\n///   let y = 0x0F0F // 0000_1111_0000_1111\n///   inspect(x ^ y, content=\"65535\") // 1111_1111_1111_1111\n///   inspect(x ^ x, content=\"0\") // XOR with self gives 0\n/// ```\npub fn Int::lxor(self : Int, other : Int) -> Int = \"%i32_lxor\"\n\n///|\n/// Performs a left shift operation on a 32-bit integer. Shifts each bit in the\n/// integer to the left by the specified number of positions, filling the\n/// rightmost positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift. Must be a non-negative value\n/// less than 32. Values outside this range will be masked with `& 31`.\n///\n/// Returns a new integer with bits shifted left by the specified number of\n/// positions. For each position shifted, the rightmost bit is filled with 0, and\n/// the leftmost bit is discarded.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 1\n///   inspect(x << 3, content=\"8\") // Binary: 1 -> 1000\n///   let y = -4\n///   inspect(y << 2, content=\"-16\") // Binary: 100 -> 10000\n/// ```\npub impl Shl for Int with op_shl(self, other) = \"%i32_shl\"\n\n///|\n/// Performs an arithmetic right shift operation on an integer value. Shifts the\n/// bits of the first operand to the right by the number of positions specified\n/// by the second operand. The sign bit is preserved and copied to the leftmost\n/// positions.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift the bits to the right. Must be\n/// non-negative.\n///\n/// Returns an integer representing the result of the arithmetic right shift\n/// operation.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = -16\n///   inspect(n >> 2, content=\"-4\") // Sign bit is preserved during shift\n///   let p = 16\n///   inspect(p >> 2, content=\"4\") // Regular right shift for positive numbers\n/// ```\npub impl Shr for Int with op_shr(self, other) = \"%i32_shr\"\n\n///|\n/// Performs a left shift operation on a 32-bit integer. Shifts each bit in the\n/// integer to the left by the specified number of positions, filling the vacated\n/// bit positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift the bits to the left.\n///\n/// Returns an integer containing the result of shifting `self` left by `shift`\n/// positions.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 1\n///   inspect(x << 3, content=\"8\") // Binary: 1 -> 1000\n///   let y = 42\n///   inspect(y << 2, content=\"168\") // Binary: 101010 -> 10101000\n/// ```\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn Int::lsl(self : Int, other : Int) -> Int = \"%i32_shl\"\n\n///|\n/// Performs a left shift operation on a 32-bit integer. Shifts the bits of the\n/// first operand to the left by the specified number of positions. The rightmost\n/// positions are filled with zeros.\n///\n/// Parameters:\n///\n/// * `value` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift left. Must be non-negative and\n/// less than 32.\n///\n/// Returns a new integer value after performing the left shift operation. The\n/// value is equal to multiplying the input by 2 raised to the power of the shift\n/// count.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 1\n///   inspect(x << 3, content=\"8\") // Equivalent to x << 3\n/// ```\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn Int::shl(self : Int, other : Int) -> Int = \"%i32_shl\"\n\n///|\n/// Performs a logical right shift operation on a signed 32-bit integer. In a\n/// logical right shift, zeros are shifted in from the left, regardless of the\n/// sign bit. This function is DEPRECATED and users should use `UInt` type with\n/// the infix operator `>>` instead.\n///\n/// Parameters:\n///\n/// * `self` : The signed 32-bit integer value to be shifted.\n/// * `shift` : The number of positions to shift right. Must be non-negative.\n///\n/// Returns a signed 32-bit integer containing the same bits as if the input were\n/// treated as an unsigned integer and shifted right logically.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = -4 // Binary: 11111...11100\n///   let unsigned = x.reinterpret_as_uint() // Convert to UInt first\n///   inspect(unsigned >> 1, content=\"2147483646\") // Using the recommended operator\n/// ```\n///\n#deprecated(\"Use UInt type and infix operator `>>` instead\")\n#coverage.skip\npub fn Int::lsr(self : Int, other : Int) -> Int {\n  (self.reinterpret_as_uint() >> other).reinterpret_as_int()\n}\n\n///|\n/// Performs an arithmetic right shift operation on a 32-bit integer value,\n/// preserving the sign bit by replicating it into the positions vacated by the\n/// shift. This is a deprecated function; use the infix operator `>>` instead.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift right. Must be non-negative.\n///\n/// Returns a new integer value that is the result of arithmetically shifting\n/// `self` right by `shift` positions.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = -16\n///   inspect(x >> 2, content=\"-4\") // Right shift preserves sign bit\n/// ```\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn Int::asr(self : Int, other : Int) -> Int = \"%i32_shr\"\n\n///|\n/// Performs an arithmetic right shift operation on a 32-bit integer by the\n/// specified number of positions. The operation preserves the sign bit,\n/// replicating it into the positions vacated by the shift.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift right.\n///\n/// Returns a new integer representing the result of shifting `self` right by\n/// `shift` positions.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = -1024\n///   inspect(n >> 3, content=\"-128\") // Preserves sign bit during right shift\n/// ```\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn Int::shr(self : Int, other : Int) -> Int = \"%i32_shr\"\n\n///|\n/// Counts the number of consecutive zero bits at the least significant end of\n/// the integer's binary representation.\n///\n/// Parameters:\n///\n/// * `self` : The integer value whose trailing zeros are to be counted.\n///\n/// Returns the number of trailing zero bits (0 to 32). For example, returns 0 if\n/// the value is odd (least significant bit is 1), returns 32 if the value is 0\n/// (all bits are zeros).\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0\n///   inspect(x.ctz(), content=\"32\") // All bits are zero\n///   let y = 1\n///   inspect(y.ctz(), content=\"0\") // No trailing zeros\n///   let z = 16\n///   inspect(z.ctz(), content=\"4\") // Binary: ...10000\n/// ```\npub fn Int::ctz(self : Int) -> Int = \"%i32_ctz\"\n\n///|\npub fn Int::clz(self : Int) -> Int = \"%i32_clz\"\n\n///|\n/// Counts the number of set bits (1s) in the binary representation of a 32-bit\n/// integer.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit integer whose bits are to be counted.\n///\n/// Returns the number of bits set to 1 in the binary representation of the input\n/// integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0b1011 // Binary: 1011 (3 bits set)\n///   inspect(x.popcnt(), content=\"3\")\n///   let y = -1 // All bits set in two's complement\n///   inspect(y.popcnt(), content=\"32\")\n/// ```\npub fn Int::popcnt(self : Int) -> Int = \"%i32_popcnt\"\n\n///|\n/// Compares two integers for equality.\n///\n/// Parameters:\n///\n/// * `self` : The first integer to compare.\n/// * `other` : The second integer to compare.\n///\n/// Returns `true` if both integers have the same value, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(42 == 42, content=\"true\")\n///   inspect(42 == -42, content=\"false\")\n/// ```\npub impl Eq for Int with op_equal(self : Int, other : Int) -> Bool = \"%i32_eq\"\n\n///|\n/// Compares two integers and returns their relative order.\n///\n/// Parameters:\n///\n/// * `self` : The first integer to compare.\n/// * `other` : The second integer to compare against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 42\n///   let b = 24\n///   inspect(a.compare(b), content=\"1\") // 42 > 24\n///   inspect(b.compare(a), content=\"-1\") // 24 < 42\n///   inspect(a.compare(a), content=\"0\") // 42 = 42\n/// ```\npub impl Compare for Int with compare(self, other) = \"%i32_compare\"\n\n///|\npub fn Int::is_pos(self : Int) -> Bool = \"%i32_is_pos\"\n\n///|\n/// Tests whether an integer is negative.\n///\n/// Parameters:\n///\n/// * `self` : The integer to test.\n///\n/// Returns `true` if the integer is negative, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let neg = -42\n///   let zero = 0\n///   let pos = 42\n///   inspect(neg.is_neg(), content=\"true\")\n///   inspect(zero.is_neg(), content=\"false\")\n///   inspect(pos.is_neg(), content=\"false\")\n/// ```\npub fn Int::is_neg(self : Int) -> Bool = \"%i32_is_neg\"\n\n///|\npub fn Int::is_non_pos(self : Int) -> Bool = \"%i32_is_non_pos\"\n\n///|\npub fn Int::is_non_neg(self : Int) -> Bool = \"%i32_is_non_neg\"\n\n///|\n/// Returns the default value for integers, which is 0.\n///\n/// Returns an integer value of 0.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x : Int = Int::default()\n///   inspect(x, content=\"0\")\n/// ```\npub impl Default for Int with default() = \"%i32_default\"\n\n///|\n/// Converts a 32-bit integer to a double-precision floating-point number. The\n/// conversion preserves the exact value since all integers in the range of `Int`\n/// can be represented exactly as `Double` values.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit integer to be converted.\n///\n/// Returns a double-precision floating-point number that represents the same\n/// numerical value as the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 42\n///   inspect(n.to_double(), content=\"42\")\n///   let neg = -42\n///   inspect(neg.to_double(), content=\"-42\")\n/// ```\npub fn Int::to_double(self : Int) -> Double = \"%i32_to_f64\"\n\n///|\n/// Converts a double-precision floating-point number to an unsigned 32-bit\n/// integer by truncating the decimal part. When the input is NaN or negative,\n/// returns 0. When the input exceeds the maximum value of UInt (4294967295),\n/// returns 4294967295.\n///\n/// Parameters:\n///\n/// * `value` : The double-precision floating-point number to be converted.\n///\n/// Returns an unsigned 32-bit integer representing the truncated value.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(UInt::trunc_double(42.75), content=\"42\")\n/// ```\npub fn UInt::trunc_double(val : Double) -> UInt = \"%f64.to_u32\"\n\n///|\n/// reinterpret the signed int as unsigned int, when the value is\n/// non-negative, i.e, 0..=2^31-1, the value is the same. When the\n/// value is negative, it turns into a large number,\n/// for example, -1 turns into 2^32-1\npub fn Int::reinterpret_as_uint(self : Int) -> UInt = \"%i32.to_u32_reinterpret\"\n\n///|\n/// Reinterprets a signed 32-bit integer as an unsigned 32-bit integer. For\n/// numbers within the range \\[0, 2^31-1], the value remains the same. For\n/// negative numbers, they are reinterpreted as large positive numbers in the\n/// range \\[2^31, 2^32-1].\n///\n/// Parameters:\n///\n/// * `value` : The signed 32-bit integer to be reinterpreted.\n///\n/// Returns an unsigned 32-bit integer that has the same bit pattern as the\n/// input.\n///\n/// Example:\n///\n/// ```moonbit\n///   let pos = 42\n///   let neg = -1\n///   inspect(pos.reinterpret_as_uint(), content=\"42\")\n///   inspect(neg.reinterpret_as_uint(), content=\"4294967295\") // 2^32 - 1\n/// ```\n///\n#deprecated(\"Use `reinterpret_as_uint` instead\")\n#coverage.skip\npub fn Int::to_uint(self : Int) -> UInt = \"%i32.to_u32_reinterpret\"\n// Double primitive ops\n\n///|\n/// Converts a 32-bit signed integer to an unsigned 64-bit integer by first\n/// converting it to a signed 64-bit integer and then reinterpreting the bits as\n/// an unsigned value.\n///\n/// Parameters:\n///\n/// * `value` : The 32-bit signed integer to be converted.\n///\n/// Returns an unsigned 64-bit integer representing the same bit pattern as the\n/// input value when extended to 64 bits.\n///\n/// Example:\n///\n/// ```moonbit\n///   let pos = 42\n///   inspect(pos.to_uint64(), content=\"42\")\n///   let neg = -1\n///   inspect(neg.to_uint64(), content=\"18446744073709551615\") // 2^64 - 1\n/// ```\npub fn Int::to_uint64(self : Int) -> UInt64 {\n  self.to_int64().reinterpret_as_uint64()\n}\n\n///|\n/// Negates a double-precision floating-point number. For non-NaN inputs, changes\n/// the sign of the number. For NaN inputs, returns NaN.\n///\n/// Parameters:\n///\n/// * `number` : The double-precision floating-point number to negate.\n///\n/// Returns a new double-precision floating-point number that is the negation of\n/// the input number.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(-42.0, content=\"-42\")\n///   inspect(--42.0, content=\"42\")\n///   inspect(-(0.0 / 0.0), content=\"NaN\") // Negating NaN returns NaN\n/// ```\npub impl Neg for Double with op_neg(self) = \"%f64_neg\"\n\n///|\n/// Adds two double-precision floating-point numbers together following IEEE 754\n/// standards.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point number.\n/// * `other` : The second double-precision floating-point number to add.\n///\n/// Returns the sum of the two numbers. Special cases follow IEEE 754 rules:\n///\n/// * If either operand is NaN, returns NaN\n/// * If adding +‚àû and -‚àû, returns NaN\n/// * If adding ¬±‚àû with any finite number, returns ¬±‚àû\n/// * If adding +0.0 and -0.0, returns +0.0\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(2.5 + 3.7, content=\"6.2\")\n///   inspect(1.0 / 0.0 + -1.0 / 0.0, content=\"NaN\") // Infinity + -Infinity = NaN\n/// ```\npub impl Add for Double with op_add(self, other) = \"%f64_add\"\n\n///|\n/// Performs subtraction between two double-precision floating-point numbers.\n///\n/// Parameters:\n///\n/// * `self` : The first operand (minuend).\n/// * `other` : The second operand (subtrahend).\n///\n/// Returns the difference between the two numbers according to IEEE 754\n/// double-precision arithmetic rules.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 5.0\n///   let b = 3.0\n///   inspect(a - b, content=\"2\")\n///   inspect(0.0 / 0.0 - 1.0, content=\"NaN\") // NaN - anything = NaN\n/// ```\npub impl Sub for Double with op_sub(self, other) = \"%f64_sub\"\n\n///|\n/// Multiplies two double-precision floating-point numbers. This is the\n/// implementation of the `*` operator for `Double` type.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point operand.\n/// * `other` : The second double-precision floating-point operand.\n///\n/// Returns a new double-precision floating-point number representing the product\n/// of the two operands. Special cases follow IEEE 754 standard:\n///\n/// * If either operand is NaN, returns NaN\n/// * If one operand is infinity and the other is zero, returns NaN\n/// * If one operand is infinity and the other is a non-zero finite number,\n/// returns infinity with the appropriate sign\n/// * If both operands are infinity, returns infinity with the appropriate sign\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(2.5 * 2.0, content=\"5\")\n///   inspect(-2.0 * 3.0, content=\"-6\")\n///   let nan = 0.0 / 0.0 // NaN\n///   inspect(nan * 1.0, content=\"NaN\")\n/// ```\npub impl Mul for Double with op_mul(self, other) = \"%f64_mul\"\n\n///|\n/// Performs division between two double-precision floating-point numbers.\n/// Follows IEEE 754 standard for floating-point arithmetic, including handling\n/// of special cases like division by zero (returns infinity) and operations\n/// involving NaN.\n///\n/// Parameters:\n///\n/// * `self` : The dividend (numerator) in the division operation.\n/// * `other` : The divisor (denominator) in the division operation.\n///\n/// Returns the result of dividing `self` by `other`. Special cases follow IEEE\n/// 754:\n///\n/// * Division by zero returns positive or negative infinity based on the\n/// dividend's sign\n/// * Operations involving NaN return NaN\n/// * Division of infinity by infinity returns NaN\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(6.0 / 2.0, content=\"3\")\n///   inspect(-6.0 / 2.0, content=\"-3\")\n///   inspect(1.0 / 0.0, content=\"Infinity\")\n/// ```\npub impl Div for Double with op_div(self, other) = \"%f64_div\"\n\n///|\n/// Calculates the square root of a double-precision floating-point number. For\n/// non-negative numbers, returns the positive square root. For negative numbers\n/// or NaN, returns NaN.\n///\n/// Parameters:\n///\n/// * `self` : The double-precision floating-point number whose square root is to\n/// be calculated.\n///\n/// Returns the square root of the input number, or NaN if the input is negative\n/// or NaN.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(4.0.sqrt(), content=\"2\")\n///   inspect(0.0.sqrt(), content=\"0\")\n///   inspect((-1.0).sqrt(), content=\"NaN\")\n/// ```\npub fn Double::sqrt(self : Double) -> Double = \"%f64_sqrt\"\n\n///|\n/// Compares two double-precision floating-point numbers for equality following\n/// IEEE 754 rules. Returns `true` if both numbers are equal, including when both\n/// are `NaN`. Note that this differs from the standard IEEE 754 behavior where\n/// `NaN` is not equal to any value, including itself.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point number to compare.\n/// * `other` : The second double-precision floating-point number to compare.\n///\n/// Returns `true` if both numbers are equal, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 3.14\n///   let b = 3.14\n///   let c = 2.718\n///   inspect(a == b, content=\"true\")\n///   inspect(a == c, content=\"false\")\n///   let nan = 0.0 / 0.0 // NaN\n///   inspect(nan == nan, content=\"false\") // Note: NaN equals itself in MoonBit\n/// ```\npub impl Eq for Double with op_equal(self : Double, other : Double) -> Bool = \"%f64_eq\"\n\n///|\n/// Tests for inequality between two double-precision floating-point numbers.\n/// Takes into account special cases like NaN, where two NaN values are\n/// considered not equal to each other.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point number to compare.\n/// * `other` : The second double-precision floating-point number to compare.\n///\n/// Returns `true` if the two numbers are not equal according to IEEE 754 rules,\n/// `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(1.0 != 2.0, content=\"true\")\n///   inspect(1.0 != 1.0, content=\"false\")\n///   inspect(0.0 / 0.0 != 0.0 / 0.0, content=\"true\") // NaN != NaN\n/// ```\npub fn Double::op_neq(self : Double, other : Double) -> Bool = \"%f64_ne\"\n\n///|\n/// Compares two double-precision floating-point numbers and returns their\n/// relative order. Follows IEEE 754 rules for floating-point comparisons,\n/// including handling of special values like NaN.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point number to compare.\n/// * `other` : The second double-precision floating-point number to compare\n/// against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n/// * If either value is NaN, returns an implementation-defined value that is\n/// consistent with total ordering\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 3.14\n///   let b = 2.718\n///   inspect(a.compare(b), content=\"1\") // 3.14 > 2.718\n///   inspect(b.compare(a), content=\"-1\") // 2.718 < 3.14\n///   inspect(a.compare(a), content=\"0\") // 3.14 = 3.14\n/// ```\npub impl Compare for Double with compare(self, other) = \"%f64_compare\"\n\n///|\n/// Returns the default value for double-precision floating-point numbers (0.0).\n///\n/// Returns a `Double` value initialized to 0.0.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(Double::default(), content=\"0\")\n/// ```\npub impl Default for Double with default() = \"%f64_default\"\n\n///|\n/// Converts an unsigned 32-bit integer to a double-precision floating-point\n/// number. Since the range of unsigned 32-bit integers is smaller than what can\n/// be precisely represented by a double-precision floating-point number, this\n/// conversion is guaranteed to be exact.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned 32-bit integer to be converted.\n///\n/// Returns a double-precision floating-point number that exactly represents the\n/// input value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 42U\n///   inspect(Double::convert_uint(n), content=\"42\")\n///   let max = 4294967295U // maximum value of UInt\n///   inspect(Double::convert_uint(max), content=\"4294967295\")\n/// ```\npub fn Double::convert_uint(val : UInt) -> Double = \"%u32.to_f64\"\n\n// Char primitive ops\n\n///|\n/// Converts a character to its Unicode code point value as an integer.\n///\n/// Parameters:\n///\n/// * `self` : The character to be converted.\n///\n/// Returns an integer representing the Unicode code point value of the\n/// character.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect('A'.to_int(), content=\"65\") // ASCII value of 'A'\n///   inspect('„ÅÇ'.to_int(), content=\"12354\") // Unicode code point of '„ÅÇ'\n/// ```\npub fn Char::to_int(self : Char) -> Int = \"%char_to_int\"\n\n///|\n/// Converts a Unicode character to its unsigned 32-bit integer code point\n/// representation. The character's code point value is first converted to a\n/// signed integer and then reinterpreted as an unsigned integer.\n///\n/// Parameters:\n///\n/// * `character` : The Unicode character to be converted.\n///\n/// Returns an unsigned 32-bit integer representing the character's Unicode code\n/// point.\n///\n/// Example:\n///\n/// ```moonbit\n///   let c = 'A'\n///   inspect(c.to_uint(), content=\"65\") // ASCII value of 'A'\n///   let emoji = 'ü§£'\n///   inspect(emoji.to_uint(), content=\"129315\") // Unicode code point U+1F923\n/// ```\npub fn Char::to_uint(self : Char) -> UInt {\n  self.to_int().reinterpret_as_uint()\n}\n\n///|\n#deprecated(\"Use `Int::unsafe_to_char` instead, and use `Int::to_char` for safe conversion\")\npub fn Char::from_int(val : Int) -> Char = \"%char_from_int\"\n\n///|\n/// Compares two characters for equality.\n///\n/// Parameters:\n///\n/// * `self` : The first character to compare.\n/// * `other` : The second character to compare.\n///\n/// Returns `true` if both characters represent the same Unicode code point,\n/// `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 'A'\n///   let b = 'A'\n///   let c = 'B'\n///   inspect(a == b, content=\"true\")\n///   inspect(a == c, content=\"false\")\n/// ```\npub impl Eq for Char with op_equal(self : Char, other : Char) -> Bool = \"%char_eq\"\n\n///|\n/// Compares two characters based on their Unicode code points. Returns a\n/// negative value if the first character comes before the second, zero if they\n/// are equal, and a positive value if the first character comes after the\n/// second.\n///\n/// Parameters:\n///\n/// * `self` : The first character to compare.\n/// * `other` : The second character to compare against.\n///\n/// Returns an integer indicating the relative ordering:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect('a'.compare('b'), content=\"-1\")\n///   inspect('b'.compare('a'), content=\"1\")\n///   inspect('a'.compare('a'), content=\"0\")\n/// ```\npub impl Compare for Char with compare(self, other) = \"%char_compare\"\n\n///|\n/// Returns the default value for the `Char` type, which is the null character\n/// (`'\\x00'`).\n///\n/// Returns a `Char` value representing the null character.\n///\n/// Example:\n///\n/// ```moonbit\n///   assert_true(Char::default().to_string() == \"\\u0000\")\n/// ```\npub impl Default for Char with default() = \"%char_default\"\n\n// Bytes primitive ops\n\n///|\n/// Retrieves a byte at the specified index from a byte sequence.\n///\n/// Parameters:\n///\n/// * `bytes` : The byte sequence to access.\n/// * `index` : The position in the byte sequence from which to retrieve the\n/// byte.\n///\n/// Returns a byte value from the specified position in the sequence.\n///\n/// Throws a panic if the index is negative or greater than or equal to the\n/// length of the byte sequence.\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes = b\"\\x01\\x02\\x03\"\n///   inspect(bytes[1], content=\"b'\\\\x02'\")\n/// ```\npub fn Bytes::op_get(self : Bytes, idx : Int) -> Byte = \"%bytes_get\"\n\n///|\n/// Retrieves a byte at the specified index from a byte sequence without\n/// performing bounds checking. This is a low-level operation that should be used\n/// with caution.\n///\n/// Parameters:\n///\n/// * `bytes` : The byte sequence to retrieve the byte from.\n/// * `index` : The position in the byte sequence from which to retrieve the\n/// byte.\n///\n/// Returns a single byte from the specified position in the byte sequence.\n///\n/// Throws a panic if the index is negative or greater than or equal to the\n/// length of the byte sequence.\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes = b\"\\x01\\x02\\x03\"\n///   inspect(bytes.unsafe_get(1), content=\"b'\\\\x02'\")\n/// ```\n///\n#internal(unsafe, \"Panic if index is out of bounds\")\npub fn Bytes::unsafe_get(self : Bytes, idx : Int) -> Byte = \"%bytes.unsafe_get\"\n\n///|\n/// Returns the number of bytes in a byte sequence.\n///\n/// Parameters:\n///\n/// * `bytes` : The byte sequence whose length is to be determined.\n///\n/// Returns an integer representing the length (number of bytes) of the sequence.\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes = b\"\\x01\\x02\\x03\"\n///   inspect(bytes.length(), content=\"3\")\n///   let empty = b\"\"\n///   inspect(empty.length(), content=\"0\")\n/// ```\npub fn Bytes::length(self : Bytes) -> Int = \"%bytes_length\"\n\n///|\n/// Creates a new byte sequence of the specified length, where each byte is\n/// initialized to the given value. Returns an empty byte sequence if the\n/// length is negative.\n///\n/// Parameters:\n///\n/// * `length` : The length of the byte sequence to create. Must be non-negative.\n/// * `initial_value` : The byte value used to initialize each position in the\n/// sequence.\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes = Bytes::make(3, b'\\xFF')\n///   inspect(\n///     bytes, \n///     content=(\n///       #|b\"\\xff\\xff\\xff\"\n///     ),\n///   )\n///   let empty = Bytes::make(0, b'\\x00')\n///   inspect(empty, content=\"b\\\"\\\"\")\n/// ```\npub fn Bytes::make(len : Int, init : Byte) -> Bytes {\n  if len < 0 {\n    return []\n  }\n  Bytes::unsafe_make(len, init)\n}\n\n///|\nfn Bytes::unsafe_make(len : Int, init : Byte) -> Bytes = \"%bytes_make\"\n\n///|\n/// Creates a new byte sequence filled with zero bytes.\n///\n/// Parameters:\n///\n/// * `length` : The length of the byte sequence to create. Must be a\n/// non-negative integer.\n///\n/// Returns a new byte sequence of the specified length, with all bytes\n/// initialized to zero.\n///\n/// Example:\n///\n/// ```moonbit\n///   let bytes = Bytes::new(3)\n///   inspect(bytes, content=\"b\\\"\\\\x00\\\\x00\\\\x00\\\"\")\n///\n///   let bytes = Bytes::new(0)\n///   inspect(bytes, content=\"b\\\"\\\"\")\n/// ```\npub fn Bytes::new(len : Int) -> Bytes {\n  Bytes::make(len, b'\\x00')\n}\n\n///|\n/// Converts a 32-bit signed integer to a byte by taking its least significant 8\n/// bits. Any bits beyond the first 8 bits are truncated.\n///\n/// Parameters:\n///\n/// * `value` : The 32-bit signed integer to be converted. Only the least\n/// significant 8 bits will be used.\n///\n/// Returns a byte containing the least significant 8 bits of the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 258 // In binary: 100000010\n///   inspect(n.to_byte(), content=\"b'\\\\x02'\") // Only keeps 00000010\n///   let neg = -1 // In binary: all 1's\n///   inspect(neg.to_byte(), content=\"b'\\\\xFF'\") // Only keeps 11111111\n/// ```\npub fn Int::to_byte(self : Int) -> Byte = \"%i32_to_byte\"\n\n///|\npub fn Int::unsafe_to_char(self : Int) -> Char = \"%char_from_int\"\n\n///|\npub fn Int::to_char(self : Int) -> Char? {\n  if self is (0..=0xD7FF) || self is (0xE000..=0x10FFFF) {\n    Some(self.unsafe_to_char())\n  } else {\n    None\n  }\n}\n\n///|\n/// Converts an unsigned 64-bit integer to a byte by truncating it to fit within\n/// the byte range (0 to 255).\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 64-bit integer to be converted.\n///\n/// Returns a byte containing the least significant 8 bits of the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 258UL // In binary: 100000010\n///   inspect(n.to_byte(), content=\"b'\\\\x02'\") // Only keeps 00000010\n/// ```\npub fn UInt64::to_byte(self : UInt64) -> Byte {\n  self.to_int().to_byte()\n}\n\n// FixedArray primitive ops\n\n///|\n/// Retrieves an element at the specified index from a fixed-size array. This\n/// function implements the array indexing operator `[]`.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to access.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index.\n///\n/// Throws a runtime error if the index is out of bounds (negative or greater\n/// than or equal to the length of the array).\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = FixedArray::make(3, 42)\n///   inspect(arr[1], content=\"42\")\n/// ```\npub fn[T] FixedArray::op_get(self : FixedArray[T], idx : Int) -> T = \"%fixedarray.get\"\n\n///|\n/// Retrieves an element from a fixed-size array at the specified index without\n/// performing bounds checking. This is an unsafe operation that may cause\n/// undefined behavior if used incorrectly.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to retrieve the element from.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index in the array.\n///\n/// Throws a panic if the index is out of bounds (negative or greater than or\n/// equal to the array's length).\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = FixedArray::make(3, 42)\n///   inspect(arr.unsafe_get(1), content=\"42\")\n/// ```\n///\n#internal(unsafe, \"Panic if index is out of bounds\")\npub fn[T] FixedArray::unsafe_get(self : FixedArray[T], idx : Int) -> T = \"%fixedarray.unsafe_get\"\n\n///|\n#internal(unsafe, \"Panic if index is out of bounds\")\npub fn[T] FixedArray::unsafe_set(\n  self : FixedArray[T],\n  idx : Int,\n  val : T\n) -> Unit = \"%fixedarray.unsafe_set\"\n\n///|\n/// Sets a value at the specified index in a fixed-size array. The original value\n/// at that index is overwritten.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to modify.\n/// * `index` : The position in the array where the value will be set.\n/// * `value` : The new value to assign at the specified index.\n///\n/// Throws a runtime error if the index is out of bounds (less than 0 or greater\n/// than or equal to the length of the array).\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = [1, 2, 3]\n///   arr[1] = 42\n///   inspect(arr, content=\"[1, 42, 3]\")\n/// ```\n///\n#intrinsic(\"%fixedarray.set\")\npub fn[T] FixedArray::op_set(self : FixedArray[T], idx : Int, val : T) -> Unit = \"%fixedarray.set\"\n\n///|\n/// Sets the value at the specified index in a fixed-size array.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to be modified.\n/// * `index` : The index at which to set the value. Must be non-negative and\n/// less than the array's length.\n/// * `value` : The value to be set at the specified index.\n///\n/// Throws a runtime error if the index is out of bounds (less than 0 or greater\n/// than or equal to the array's length).\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = FixedArray::make(3, 0)\n///   arr.set(1, 42)\n///   inspect(arr[1], content=\"42\")\n/// ```\npub fn[T] FixedArray::set(self : FixedArray[T], idx : Int, val : T) -> Unit = \"%fixedarray.set\"\n\n///|\n/// Returns the number of elements in a fixed-size array.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array whose length is to be determined.\n///\n/// Returns an integer representing the number of elements in the array.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = FixedArray::make(3, 42)\n///   inspect(arr.length(), content=\"3\")\n/// ```\npub fn[T] FixedArray::length(self : FixedArray[T]) -> Int = \"%fixedarray.length\"\n\n///|\n/// Creates a new fixed-size array with the specified length, initializing all\n/// elements with the given value.\n///\n/// Parameters:\n///\n/// * `length` : The length of the array to create. Must be non-negative.\n/// * `initial_value` : The value used to initialize all elements in the array.\n///\n/// Returns a new fixed-size array of type `FixedArray[T]` with `length`\n/// elements, where each element is initialized to `initial_value`.\n///\n/// Throws a panic if `length` is negative.\n///\n/// Example:\n///\n/// ```moonbit\n///   let arr = FixedArray::make(3, 42)\n///   inspect(arr[0], content=\"42\")\n///   inspect(arr.length(), content=\"3\")\n/// ```\n/// \n/// WARNING: A common pitfall is creating with the same initial value, for example:\n/// ```moonbit\n///   let two_dimension_array = FixedArray::make(10, FixedArray::make(10, 0))\n///   two_dimension_array[0][5] = 10\n///   assert_eq(two_dimension_array[5][5], 10)\n/// ```\n/// This is because all the cells reference to the same object (the FixedArray[Int] in this case). \n/// One should use makei() instead which creates an object for each index.\npub fn[T] FixedArray::make(len : Int, init : T) -> FixedArray[T] = \"%fixedarray.make\"\n\n// String primitive ops\n\n///|\n/// Returns the number of UTF-16 code units in the string. Note that this is not\n/// necessarily equal to the number of Unicode characters (code points) in the\n/// string, as some characters may be represented by multiple UTF-16 code units.\n///\n/// Parameters:\n///\n/// * `string` : The string whose length is to be determined.\n///\n/// Returns the number of UTF-16 code units in the string.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(\"hello\".length(), content=\"5\")\n///   inspect(\"ü§£\".length(), content=\"2\") // Emoji uses two UTF-16 code units\n///   inspect(\"\".length(), content=\"0\") // Empty string\n/// ```\npub fn String::length(self : String) -> Int = \"%string_length\"\n\n///|\n#deprecated(\"use `length` instead\")\npub fn String::charcode_length(self : String) -> Int = \"%string_length\"\n\n///|\n/// Returns the UTF-16 code unit at the given index.\n///\n/// Parameters:\n///\n/// * `string` : The string to access.\n/// * `index` : The position in the string from which to retrieve the code unit.\n///\n/// This method has O(1) complexity.\npub fn String::op_get(self : String, idx : Int) -> Int = \"%string_get\"\n\n///|\n/// Returns the UTF-16 code unit at a given position in the string without\n/// performing bounds checking. This is a low-level function that provides direct\n/// access to the internal representation of the string.\n///\n/// Parameters:\n///\n/// * `string` : The string from which to retrieve the code unit.\n/// * `index` : The position of the code unit to retrieve.\n///\n/// Returns the UTF-16 code unit at the specified position as an integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let s = \"Helloü§£\"\n///   inspect(s.unsafe_charcode_at(0), content=\"72\") // 'H'\n///   inspect(s.unsafe_charcode_at(5), content=\"55358\") // First surrogate of ü§£\n///   inspect(s.unsafe_charcode_at(6), content=\"56611\") // Second surrogate of ü§£\n/// ```\n///\n#internal(unsafe, \"Panic if index is out of bounds.\")\npub fn String::unsafe_charcode_at(self : String, idx : Int) -> Int = \"%string.unsafe_get\"\n\n///|\n/// Concatenates two strings, creating a new string that contains all characters\n/// from the first string followed by all characters from the second string.\n///\n/// Parameters:\n///\n/// * `self` : The first string to concatenate.\n/// * `other` : The second string to concatenate.\n///\n/// Returns a new string containing the concatenation of both input strings.\n///\n/// Example:\n///\n/// ```moonbit\n///   let hello = \"Hello\"\n///   let world = \" World!\"\n///   inspect(hello + world, content=\"Hello World!\")\n///   inspect(\"\" + \"abc\", content=\"abc\") // concatenating with empty string\n/// ```\npub impl Add for String with op_add(self, other) = \"%string_add\"\n\n///|\n/// Tests whether two strings are equal by comparing their characters.\n///\n/// Parameters:\n///\n/// * `self` : The first string to compare.\n/// * `other` : The second string to compare.\n///\n/// Returns `true` if both strings contain exactly the same sequence of\n/// characters, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let str1 = \"hello\"\n///   let str2 = \"hello\"\n///   let str3 = \"world\"\n///   inspect(str1 == str2, content=\"true\")\n///   inspect(str1 == str3, content=\"false\")\n/// ```\npub impl Eq for String with op_equal(self : String, other : String) -> Bool = \"%string_eq\"\n\n///|\n/// Returns the string itself without any modifications. This method is primarily\n/// used to implement the `Show` trait, which requires a `to_string` function.\n///\n/// Parameters:\n///\n/// * `string` : The string value to be returned.\n///\n/// Returns the same string that was passed in.\n///\n/// Example:\n///\n/// ```moonbit\n///   let s = \"hello\"\n///   inspect(s.to_string(), content=\"hello\")\n/// ```\npub fn String::to_string(self : String) -> String = \"%string_to_string\"\n\n///|\n// For internal use only\npriv type UnsafeMaybeUninit[_]\n\n///|\n/// Converts a byte value to a 32-bit signed integer. The resulting integer will\n/// have the same binary representation as the byte value, preserving the\n/// numerical value in the range \\[0, 255].\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted to an integer.\n///\n/// Returns a 32-bit signed integer representing the same numerical value as the\n/// input byte.\n///\n/// Example:\n///\n/// ```moonbit\n///   let b = b'\\xFF' // byte with value 255\n///   inspect(b.to_int(), content=\"255\")\n///   let zero = b'\\x00'\n///   inspect(zero.to_int(), content=\"0\")\n/// ```\npub fn Byte::to_int(self : Byte) -> Int = \"%byte_to_int\"\n\n///|\n/// Converts a byte value to a character.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted.\n///\n/// Returns the character corresponding to the byte value.\npub fn Byte::to_char(self : Byte) -> Char {\n  self.to_int().unsafe_to_char()\n}\n\n///|\n/// Converts a byte value to a 64-bit signed integer by first converting it to a\n/// 32-bit integer and then extending it to a 64-bit integer.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted.\n///\n/// Returns a 64-bit signed integer representing the same numerical value as the\n/// input byte.\n///\n/// Example:\n///\n/// ```moonbit\n///   let b = b'\\xFF'\n///   inspect(b.to_int64(), content=\"255\")\n/// ```\npub fn Byte::to_int64(self : Byte) -> Int64 {\n  self.to_int().to_int64()\n}\n\n///|\n/// reinterpret the unsigned int as signed int\n/// For number within the range of 0..=2^31-1,\n/// the value is the same. For number within the range of 2^31..=2^32-1,\n/// the value is negative\npub fn UInt::reinterpret_as_int(self : UInt) -> Int = \"%u32.to_i32_reinterpret\"\n\n///|\n/// Reinterprets an unsigned 32-bit integer as a signed 32-bit integer. For\n/// values within the range of 0 to 2^31-1, the value remains the same. For\n/// values within the range of 2^31 to 2^32-1, the value becomes negative due to\n/// two's complement representation.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be reinterpreted.\n///\n/// Returns a signed 32-bit integer that has the same bit pattern as the input\n/// unsigned integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 42U\n///   inspect(a.reinterpret_as_int(), content=\"42\")\n///   let b = 4294967295U // maximum value of UInt (2^32 - 1)\n///   inspect(b.reinterpret_as_int(), content=\"-1\") // becomes -1 when reinterpreted as Int\n/// ```\n///\n#deprecated(\"Use `reinterpret_as_int` instead\")\n#coverage.skip\npub fn UInt::to_int(self : UInt) -> Int = \"%u32.to_i32_reinterpret\"\n\n///|\n/// Performs addition between two unsigned 32-bit integers. If the result\n/// overflows, it wraps around according to the rules of modular arithmetic\n/// (2^32).\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer operand.\n/// * `other` : The second unsigned 32-bit integer operand to be added.\n///\n/// Returns the sum of the two unsigned integers, wrapped around if necessary.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 42U\n///   let b = 100U\n///   inspect(a + b, content=\"142\")\n///\n///   // Demonstrate overflow behavior\n///   let max = 4294967295U // UInt::max_value\n///   inspect(max + 1U, content=\"0\")\n/// ```\npub impl Add for UInt with op_add(self, other) = \"%u32.add\"\n\n///|\n/// Performs subtraction between two unsigned 32-bit integers. When the result\n/// would be negative, the function wraps around using modular arithmetic (2^32).\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer (minuend).\n/// * `other` : The second unsigned 32-bit integer to subtract from the first\n/// (subtrahend).\n///\n/// Returns a new unsigned 32-bit integer representing the difference between the\n/// two numbers. If the result would be negative, it wraps around to a positive\n/// number by adding 2^32 repeatedly until the result is in range.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 5U\n///   let b = 3U\n///   inspect(a - b, content=\"2\")\n///   let c = 3U\n///   let d = 5U\n///   inspect(c - d, content=\"4294967294\") // wraps around to 2^32 - 2\n/// ```\npub impl Sub for UInt with op_sub(self, other) = \"%u32.sub\"\n\n///|\n/// Performs multiplication between two unsigned 32-bit integers. The result\n/// wraps around if it exceeds the maximum value of `UInt`.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned integer operand.\n/// * `other` : The second unsigned integer operand.\n///\n/// Returns the product of the two unsigned integers. If the result exceeds the\n/// maximum value of `UInt` (4294967295), it wraps around to the corresponding\n/// value modulo 2^32.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 3U\n///   let b = 4U\n///   inspect(a * b, content=\"12\")\n///   let max = 4294967295U\n///   inspect(max * 2U, content=\"4294967294\") // Wraps around to max * 2 % 2^32\n/// ```\npub impl Mul for UInt with op_mul(self, other) = \"%u32.mul\"\n\n///|\n/// Performs division between two unsigned 32-bit integers. The operation follows\n/// standard unsigned integer division rules, where the result is truncated\n/// towards zero.\n///\n/// Parameters:\n///\n/// * `self` : The dividend (the number to be divided).\n/// * `other` : The divisor (the number to divide by).\n///\n/// Returns an unsigned 32-bit integer representing the quotient of the division.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 42U\n///   let b = 5U\n///   inspect(a / b, content=\"8\") // Using infix operator\n/// ```\npub impl Div for UInt with op_div(self, other) = \"%u32.div\"\n\n///|\n/// Calculates the remainder of dividing one unsigned integer by another.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned integer dividend.\n/// * `other` : The unsigned integer divisor.\n///\n/// Returns the remainder of the division operation.\n///\n/// Throws a panic if `other` is zero.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 17U\n///   let b = 5U\n///   inspect(a % b, content=\"2\") // 17 divided by 5 gives quotient 3 and remainder 2\n///   inspect(7U % 4U, content=\"3\")\n/// ```\npub impl Mod for UInt with op_mod(self, other) = \"%u32.mod\"\n\n///|\n/// Compares two unsigned 32-bit integers for equality.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned integer operand.\n/// * `other` : The second unsigned integer operand to compare with.\n///\n/// Returns `true` if both integers have the same value, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 42U\n///   let b = 42U\n///   let c = 24U\n///   inspect(a == b, content=\"true\")\n///   inspect(a == c, content=\"false\")\n/// ```\npub impl Eq for UInt with op_equal(self : UInt, other : UInt) -> Bool = \"%u32.eq\"\n\n///|\n/// Checks if two unsigned 32-bit integers are not equal.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned integer to compare.\n/// * `other` : The second unsigned integer to compare.\n///\n/// Returns `true` if the two integers are not equal, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 42U\n///   let b = 24U\n///   inspect(a != b, content=\"true\")\n///   inspect(a != a, content=\"false\")\n/// ```\npub fn UInt::op_neq(self : UInt, other : UInt) -> Bool = \"%u32.ne\"\n\n///|\n/// Compares two unsigned 32-bit integers and returns their relative order.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned integer to compare.\n/// * `other` : The second unsigned integer to compare against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 42U\n///   let b = 24U\n///   inspect(a.compare(b), content=\"1\") // 42 > 24\n///   inspect(b.compare(a), content=\"-1\") // 24 < 42\n///   inspect(a.compare(a), content=\"0\") // 42 = 42\n/// ```\npub impl Compare for UInt with compare(self, other) = \"%u32.compare\"\n\n///|\n/// Performs a bitwise AND operation between two unsigned 32-bit integers. For\n/// each bit position, the result is 1 if the bits at that position in both\n/// operands are 1, and 0 otherwise.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer operand.\n/// * `other` : The second unsigned 32-bit integer operand.\n///\n/// Returns an unsigned 32-bit integer representing the result of the bitwise AND\n/// operation.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 0xF0F0U // 1111_0000_1111_0000\n///   let b = 0xFF00U // 1111_1111_0000_0000\n///   inspect(a & b, content=\"61440\") // 1111_0000_0000_0000 = 61440\n/// ```\npub fn UInt::land(self : UInt, other : UInt) -> UInt = \"%u32.bitand\"\n\n///|\n/// Performs a bitwise OR operation between two unsigned 32-bit integers. For\n/// each bit position, the result is 1 if at least one of the corresponding bits\n/// in either operand is 1.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer operand.\n/// * `other` : The second unsigned 32-bit integer operand.\n///\n/// Returns the result of the bitwise OR operation as an unsigned 32-bit integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 0xF0F0U // Binary: 1111_0000_1111_0000\n///   let b = 0x0F0FU // Binary: 0000_1111_0000_1111\n///   inspect(a | b, content=\"65535\") // Binary: 1111_1111_1111_1111\n/// ```\npub fn UInt::lor(self : UInt, other : UInt) -> UInt = \"%u32.bitor\"\n\n///|\n/// Performs a bitwise XOR (exclusive OR) operation between two unsigned 32-bit\n/// integers. Each bit in the result is set to 1 if the corresponding bits in the\n/// operands are different, and 0 if they are the same.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer operand.\n/// * `other` : The second unsigned 32-bit integer operand.\n///\n/// Returns the result of the bitwise XOR operation.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 0xFF00U // Binary: 1111_1111_0000_0000\n///   let b = 0x0F0FU // Binary: 0000_1111_0000_1111\n///   inspect(a ^ b, content=\"61455\") // Binary: 1111_0000_0000_1111\n/// ```\npub fn UInt::lxor(self : UInt, other : UInt) -> UInt = \"%u32.bitxor\"\n\n///|\n/// Performs a bitwise NOT operation on an unsigned 32-bit integer. Flips all\n/// bits in the number (changes each 0 to 1 and each 1 to 0).\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer value on which to perform the bitwise\n/// NOT operation.\n///\n/// Returns a new unsigned 32-bit integer where each bit is inverted from the\n/// input value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0xFF00U // Binary: 1111_1111_0000_0000\n///   inspect(x.lnot(), content=\"4294902015\") // Binary: ...0000_0000_1111_1111\n/// ```\npub fn UInt::lnot(self : UInt) -> UInt = \"%u32.bitnot\"\n\n///|\n/// Performs a left shift operation on an unsigned 32-bit integer. Shifts each\n/// bit in the number to the left by the specified number of positions, filling\n/// the rightmost positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift the bits. Must be non-negative\n/// and less than 32. Values outside this range are wrapped to fit within it\n/// (i.e., `shift & 31`).\n///\n/// Returns a new `UInt` value representing the result of shifting the bits left\n/// by the specified number of positions. Each position shifted multiplies the\n/// number by 2.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 1U\n///   inspect(x << 3, content=\"8\") // Using the recommended operator\n///   let y = 8U\n///   inspect(y << 1, content=\"16\") // Using the recommended operator\n/// ```\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn UInt::lsl(self : UInt, shift : Int) -> UInt = \"%u32.shl\"\n\n///|\n/// Performs a left shift operation on an unsigned 32-bit integer. Shifts each\n/// bit in the integer to the left by the specified number of positions, filling\n/// the rightmost positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift left. Must be between 0 and 31\n/// inclusive. Values outside this range will be masked with `& 31`.\n///\n/// Returns a new `UInt` value containing the result of the left shift operation.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 1U\n///   inspect(x << 3, content=\"8\") // Binary: 1 -> 1000\n/// ```\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn UInt::shl(self : UInt, shift : Int) -> UInt = \"%u32.shl\"\n\n///|\n/// Performs a logical right shift on an unsigned 32-bit integer. Each bit in the\n/// input value is shifted right by the specified number of positions, with zeros\n/// shifted in from the left. DEPRECATED: Use the `>>` operator instead.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift right. Must be non-negative.\n///\n/// Returns a new `UInt` value representing the result of the logical right shift\n/// operation.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0xF0000000U\n///   inspect(x >> 4, content=\"251658240\") // Using the recommended operator\n/// ```\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn UInt::lsr(self : UInt, shift : Int) -> UInt = \"%u32.shr\"\n\n///|\n/// Performs a logical right shift operation on an unsigned 32-bit integer by a\n/// specified number of positions. All bits shifted in from the left are zeros.\n///\n/// Parameters:\n///\n/// * `number` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift right. Must be non-negative.\n///\n/// Returns a new `UInt` value that represents the result of shifting all bits in\n/// `number` to the right by `shift` positions.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0xFF000000U\n///   inspect(x >> 8, content=\"16711680\") // 0x00FF0000\n/// ```\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn UInt::shr(self : UInt, shift : Int) -> UInt = \"%u32.shr\"\n\n///|\n/// Performs a left shift operation on an unsigned 32-bit integer. Each bit in\n/// the integer is shifted left by the specified number of positions, and zeros\n/// are filled in from the right.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift. Only the least significant 5\n/// bits are used, effectively making the shift count always between 0 and 31.\n///\n/// Returns a new unsigned 32-bit integer that is the result of shifting `self`\n/// left by `shift` positions.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 1U\n///   inspect(x << 3, content=\"8\") // Binary: 1 -> 1000\n///   let y = 0xFFFFFFFFU\n///   inspect(y << 16, content=\"4294901760\") // All bits after position 16 are discarded\n/// ```\npub impl Shl for UInt with op_shl(self, shift) = \"%u32.shl\"\n\n///|\n/// Performs a logical right shift operation on an unsigned 32-bit integer. The\n/// operation shifts all bits to the right by a specified number of positions,\n/// filling the leftmost positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift right. If this value is\n/// negative, the behavior is undefined. Values larger than 31 are masked with `&\n/// 31`.\n///\n/// Returns a new unsigned 32-bit integer containing the result of the right\n/// shift operation.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0xFF000000U\n///   inspect(x >> 8, content=\"16711680\") // 0x00FF0000\n///   inspect(x >> 24, content=\"255\") // 0x000000FF\n///\n///   let x = 0xFF000000U\n///   inspect(x >> 32, content=\"4278190080\") // Same as x >> 0 due to masking\n/// ```\npub impl Shr for UInt with op_shr(self, shift) = \"%u32.shr\"\n\n///|\n/// Counts the number of leading zero bits in an unsigned 32-bit integer,\n/// starting from the most significant bit.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned 32-bit integer whose leading zeros are to be\n/// counted.\n///\n/// Returns the number of consecutive zeros starting from the most significant\n/// bit. For a zero value, returns 32.\n///\n/// Example:\n///\n/// ```moonbit\n///   inspect(0U.clz(), content=\"32\")\n///   inspect(1U.clz(), content=\"31\")\n///   inspect(0x80000000U.clz(), content=\"0\")\n/// ```\npub fn UInt::clz(self : UInt) -> Int = \"%u32.clz\"\n\n///|\n/// Counts the number of trailing zero bits in an unsigned 32-bit integer,\n/// starting from the least significant bit. For a zero input, returns 32.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer whose trailing zeros are to be\n/// counted.\n///\n/// Returns the number of consecutive zeros at the least significant end of the\n/// binary representation. Returns 32 if the input is zero.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 24U // Binary: ...011000\n///   inspect(x.ctz(), content=\"3\") // 3 trailing zeros\n///   let y = 0U\n///   inspect(y.ctz(), content=\"32\") // All bits are zero\n/// ```\npub fn UInt::ctz(self : UInt) -> Int = \"%u32.ctz\"\n\n///|\n/// Counts the number of 1 bits (population count) in the binary representation\n/// of an unsigned 32-bit integer.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer whose bits are to be counted.\n///\n/// Returns an integer representing the count of set bits (1s) in the binary\n/// representation.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 0xF0F0U // Binary: 1111 0000 1111 0000\n///   inspect(x.popcnt(), content=\"8\") // Has 8 bits set to 1\n/// ```\npub fn UInt::popcnt(self : UInt) -> Int = \"%u32.popcnt\"\n\n///|\n/// Converts an unsigned 32-bit integer to an unsigned 64-bit integer by\n/// zero-extending it. The resulting value preserves the original number's\n/// magnitude while using 64 bits to represent it.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer (`UInt`) to be converted.\n///\n/// Returns an unsigned 64-bit integer (`UInt64`) representing the same numerical\n/// value as the input.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 42U\n///   inspect(n.to_uint64(), content=\"42\")\n///   let max = 4294967295U // Maximum value of UInt\n///   inspect(max.to_uint64(), content=\"4294967295\")\n/// ```\npub fn UInt::to_uint64(self : UInt) -> UInt64 {\n  UInt64::extend_uint(self)\n}\n\n///|\n/// Converts an unsigned 32-bit integer to a byte by taking its least significant\n/// 8 bits. Any bits beyond the first 8 bits are truncated.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be converted. Only the least\n/// significant 8 bits will be used.\n///\n/// Returns a byte containing the least significant 8 bits of the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 258U // In binary: 100000010\n///   inspect(n.to_byte(), content=\"b'\\\\x02'\") // Only keeps 00000010\n///   let big = 4294967295U // Maximum value of UInt\n///   inspect(big.to_byte(), content=\"b'\\\\xFF'\") // Only keeps 11111111\n/// ```\npub fn UInt::to_byte(self : UInt) -> Byte {\n  self.reinterpret_as_int().to_byte()\n}\n\n///|\n/// Converts an unsigned 32-bit integer to a double-precision floating-point\n/// number. Since the range of unsigned 32-bit integers is smaller than what can\n/// be precisely represented by a double-precision floating-point number, this\n/// conversion is guaranteed to be exact.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned 32-bit integer to be converted.\n///\n/// Returns a double-precision floating-point number that exactly represents the\n/// input value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 42U\n///   inspect(n.to_double(), content=\"42\")\n///   let max = 4294967295U // maximum value of UInt\n///   inspect(max.to_double(), content=\"4294967295\")\n/// ```\npub fn UInt::to_double(self : UInt) -> Double = \"%u32.to_f64\"\n\n///|\n/// Performs unary negation on a 32-bit floating-point number. Returns the\n/// arithmetic inverse of the operand.\n///\n/// Parameters:\n///\n/// * `self` : The floating-point number to negate.\n///\n/// Returns a new floating-point number with the same magnitude but opposite sign\n/// as the input. Special cases:\n///\n/// * Negating NaN returns NaN\n/// * Negating +0.0 returns -0.0\n/// * Negating -0.0 returns +0.0\n/// * Negating +Infinity returns -Infinity\n/// * Negating -Infinity returns +Infinity\n///\n/// Example:\n///\n/// ```moonbit\n///   let f = 3.14.to_float()\n///   inspect((-f).to_double(), content=\"-3.140000104904175\")\n///   let zero = 0.0.to_float()\n///   inspect((-zero).to_double(), content=\"0\")\n/// ```\npub impl Neg for Float with op_neg(self) = \"%f32.neg\"\n\n///|\n/// Performs addition between two single-precision floating-point numbers.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point operand.\n/// * `other` : The second floating-point operand to be added to the first\n/// operand.\n///\n/// Returns a single-precision floating-point number representing the sum of the\n/// two operands.\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 3.14.to_float()\n///   let b = 2.86.to_float()\n///   let sum = a + b\n///   inspect(sum.to_double(), content=\"6\")\n/// ```\npub impl Add for Float with op_add(self, other) = \"%f32.add\"\n\n///|\n/// Performs subtraction between two single-precision floating-point numbers.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number (minuend).\n/// * `other` : The second floating-point number (subtrahend).\n///\n/// Returns a new floating-point number representing the difference between\n/// `self` and `other`.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 3.14.to_float()\n///   let y = 1.0.to_float()\n///   let result = x - y\n///   inspect(result.to_double(), content=\"2.140000104904175\")\n/// ```\npub impl Sub for Float with op_sub(self, other) = \"%f32.sub\"\n\n///|\n/// Performs multiplication between two single-precision floating-point numbers\n/// according to IEEE 754 rules.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number operand.\n/// * `other` : The second floating-point number operand to multiply with the\n/// first.\n///\n/// Returns a single-precision floating-point number that is the product of the\n/// two operands.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = Int::to_float(2)\n///   let y = Int::to_float(3)\n///   let z = x * y\n///   inspect(z.to_double(), content=\"6\")\n/// ```\npub impl Mul for Float with op_mul(self, other) = \"%f32.mul\"\n\n///|\n/// Performs division between two 32-bit floating-point numbers according to IEEE\n/// 754 rules.\n///\n/// Parameters:\n///\n/// * `self` : The dividend floating-point number.\n/// * `other` : The divisor floating-point number.\n///\n/// Returns a new floating-point number representing the quotient of the\n/// division. Special cases follow IEEE 754 rules:\n///\n/// * Division by zero returns infinity (with the appropriate sign)\n/// * Division of zero by zero returns NaN\n/// * Division of infinity by infinity returns NaN\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 6.0.to_float()\n///   let b = 2.0.to_float()\n///   let result = (a / b).to_double()\n///   inspect(result, content=\"3\")\n///   inspect((0.0.to_float() / 0.0.to_float()).to_double(), content=\"NaN\")\n/// ```\npub impl Div for Float with op_div(self, other) = \"%f32.div\"\n\n///|\n/// Calculates the square root of a floating-point number. For non-negative\n/// numbers, returns the principal square root. For negative numbers or NaN,\n/// returns NaN.\n///\n/// Parameters:\n///\n/// * `self` : The floating-point number whose square root is to be calculated.\n///\n/// Returns a 32-bit floating-point number representing the square root of the\n/// input value:\n///\n/// * For a positive number, returns its principal square root\n/// * For zero (positive or negative), returns zero with the same sign\n/// * For NaN or negative numbers, returns NaN\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 16.0.to_float()\n///   let root = x.sqrt()\n///   inspect(root.to_double(), content=\"4\")\n///   let neg = (-4.0).to_float()\n///   let neg_root = neg.sqrt()\n///   inspect(neg_root.to_double(), content=\"NaN\")\n/// ```\npub fn Float::sqrt(self : Float) -> Float = \"%f32.sqrt\"\n\n///|\n/// Tests two floating-point numbers for equality. Follows IEEE 754 equality\n/// comparison rules, where NaN values are not equal to any value, including\n/// themselves.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number to compare.\n/// * `other` : The second floating-point number to compare.\n///\n/// Returns `true` if both numbers are equal, `false` otherwise. Note that `-0.0`\n/// and `+0.0` are considered equal.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 3.14\n///   let y = 3.14\n///   let z = 0.0 / 0.0 // NaN\n///   inspect(x == y, content=\"true\")\n///   inspect(z == z, content=\"false\") // NaN is not equal to itself\n/// ```\npub impl Eq for Float with op_equal(self : Float, other : Float) -> Bool = \"%f32.eq\"\n\n///|\n/// Tests if two single-precision floating-point numbers are not equal. This\n/// operation follows IEEE 754 rules for floating-point comparison, including\n/// special handling of NaN values.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number to compare.\n/// * `other` : The second floating-point number to compare.\n///\n/// Returns `true` if the two floating-point numbers are not equal, `false` if\n/// they are equal. Note that if either operand is NaN, the result is `true`.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = 1.0.to_float()\n///   let y = 2.0.to_float()\n///   let nan = (0.0 / 0.0).to_float()\n///   inspect(x != y, content=\"true\")\n///   inspect(x != x, content=\"false\")\n///   inspect(nan != nan, content=\"true\") // NaN is not equal to itself\n/// ```\npub fn Float::op_neq(self : Float, other : Float) -> Bool = \"%f32.ne\"\n\n///|\n/// Compares two 32-bit floating-point numbers and returns their relative order.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number to compare.\n/// * `other` : The second floating-point number to compare.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n///   let a = 3.14\n///   let b = 2.718\n///   inspect(a.compare(b), content=\"1\") // 3.14 > 2.718\n///   inspect(b.compare(a), content=\"-1\") // 2.718 < 3.14\n///   inspect(a.compare(a), content=\"0\") // 3.14 = 3.14\n/// ```\npub impl Compare for Float with compare(self, other) = \"%f32.compare\"\n\n///|\n/// Converts a 32-bit floating-point number to a double-precision (64-bit)\n/// floating-point number.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit floating-point number to be converted.\n///\n/// Returns a double-precision floating-point number that preserves the exact\n/// value of the input. Since double-precision has more bits than\n/// single-precision, this conversion is always exact and never loses precision.\n///\n/// Example:\n///\n/// ```moonbit\n///   let f = 3.14.to_float()\n///   inspect(f.to_double(), content=\"3.140000104904175\")\n/// ```\npub fn Float::to_double(self : Float) -> Double = \"%f32.to_f64\"\n\n///|\n/// Reinterprets the bits of a 32-bit floating-point number as a 32-bit signed\n/// integer without performing any numeric conversion. The bit pattern is\n/// preserved exactly, only the type interpretation changes.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit floating-point number whose bits are to be\n/// reinterpreted.\n///\n/// Returns a 32-bit signed integer that has the same bit pattern as the input\n/// floating-point number.\n///\n/// Example:\n///\n/// ```moonbit\n///   let f = 1.0.to_float()\n///   // IEEE 754 representation of 1.0 is 0x3F800000\n///   inspect(f.reinterpret_as_int(), content=\"1065353216\")\n/// ```\npub fn Float::reinterpret_as_int(self : Float) -> Int = \"%f32.to_i32_reinterpret\"\n\n///|\n/// Reinterprets the bits of a 32-bit floating-point number as an unsigned 32-bit\n/// integer without performing any numeric conversion. Preserves the exact bit\n/// pattern of the input value, only changing how these bits are interpreted.\n///\n/// Parameters:\n///\n/// * `float` : The 32-bit floating-point number whose bits are to be\n/// reinterpreted.\n///\n/// Returns an unsigned 32-bit integer (`UInt`) that has the same bit pattern as\n/// the input floating-point number.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x : Float = 1.0\n///   inspect(x.reinterpret_as_uint(), content=\"1065353216\") // Decimal representation of 0x3F800000\n/// ```\npub fn Float::reinterpret_as_uint(self : Float) -> UInt = \"%f32.to_i32_reinterpret\"\n\n///|\n/// Converts an integer to a 32-bit floating-point number. The conversion is\n/// exact for small integers, but may lose precision for large integers due to\n/// the limited precision of the floating-point format.\n///\n/// Parameters:\n///\n/// * `number` : The integer value to be converted to a floating-point number.\n///\n/// Returns a 32-bit floating-point number representing the same value as the\n/// input integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 42\n///   let f = n.to_float()\n///   // Convert back to double for comparison since Float doesn't implement Show\n///   inspect(f.to_double(), content=\"42\")\n/// ```\npub fn Int::to_float(self : Int) -> Float = \"%i32.to_f32\"\n\n///|\n/// Reinterprets the bits of a 32-bit integer as a single-precision\n/// floating-point number according to IEEE 754 standard. The bit pattern of the\n/// input is preserved, only the type interpretation changes.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit integer whose bits are to be reinterpreted as a\n/// single-precision floating-point number.\n///\n/// Returns a 32-bit floating-point number (`Float`) that has the same bit\n/// pattern as the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   // 0x3F800000 represents 1.0 in IEEE 754 single-precision format\n///   let n = 1065353216 // 0x3F800000\n///   inspect(n.reinterpret_as_float().to_double(), content=\"1\")\n/// ```\npub fn Int::reinterpret_as_float(self : Int) -> Float = \"%i32.to_f32_reinterpret\"\n\n///|\n/// Reinterprets the bits of an unsigned 32-bit integer as a single-precision\n/// floating-point number (IEEE 754). The bit pattern is preserved exactly, only\n/// the type interpretation changes.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer whose bits are to be reinterpreted as\n/// a single-precision floating-point number.\n///\n/// Returns a single-precision floating-point number (`Float`) whose bit pattern\n/// is identical to the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 0x3F800000U // Bit pattern for 1.0f\n///   inspect(n.reinterpret_as_float().to_double(), content=\"1\")\n/// ```\npub fn UInt::reinterpret_as_float(self : UInt) -> Float = \"%i32.to_f32_reinterpret\"\n\n///|\n/// Converts a byte value to a 32-bit floating-point number (IEEE 754\n/// single-precision format). The byte value is treated as an unsigned 8-bit\n/// integer during the conversion.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted to a float.\n///\n/// Returns a 32-bit floating-point number representing the byte value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let b = b'\\xFF' // 255 in decimal\n///   let f = b.to_float()\n///   // Convert to double for comparison since Float doesn't implement Show\n///   inspect(f.to_double(), content=\"255\")\n/// ```\npub fn Byte::to_float(self : Byte) -> Float = \"%byte.to_f32\"\n\n///| TODO: use intrinsics implement this\npub fn Byte::to_double(self : Byte) -> Double {\n  self.to_int().to_double()\n}\n\n///|\n/// Converts a double-precision floating-point number to a single-precision\n/// floating-point number. The conversion may result in a loss of precision due\n/// to the reduced number of bits available in the single-precision format.\n///\n/// Parameters:\n///\n/// * `value` : The double-precision floating-point number to be converted.\n///\n/// Returns a single-precision floating-point number that represents the closest\n/// possible value to the input double-precision number.\n///\n/// Example:\n///\n/// ```moonbit\n///   let d = 3.14159265359\n///   inspect(d.to_float().to_double(), content=\"3.1415927410125732\") // Note the loss of precision\n/// ```\npub fn Double::to_float(self : Double) -> Float = \"%f64.to_f32\"\n\n///|\n/// Converts an unsigned 32-bit integer to a single-precision floating-point\n/// number. Due to the limited precision of the 32-bit floating-point format,\n/// values above 16777216 (2^24) may lose precision during conversion.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be converted.\n///\n/// Returns a 32-bit floating-point number that represents the same numerical\n/// value as the input unsigned integer.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 42U\n///   inspect(n.to_float().to_double(), content=\"42\")\n///   let big = 16777216U // 2^24\n///   inspect(big.to_float().to_double(), content=\"16777216\") // Last precisely representable integer\n/// ```\npub fn UInt::to_float(self : UInt) -> Float = \"%u32.to_f32\"\n\n///|\n/// Converts a 16-bit signed integer to a 32-bit signed integer by sign\n/// extension.\n///\n/// Parameters:\n///\n/// * `value` : The 16-bit signed integer to be converted.\n///\n/// Returns a 32-bit signed integer that has the same value as the input.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = Int::to_int16(42)\n///   inspect(n.to_int(), content=\"42\")\n///   let neg = Int::to_int16(-42)\n///   inspect(neg.to_int(), content=\"-42\")\n/// ```\npub fn Int16::to_int(self : Int16) -> Int = \"%i16_to_i32\"\n\n///|\n/// Converts a 16-bit signed integer to a byte by truncating its value to fit\n/// within the byte range (0 to 255). Only the least significant 8 bits of the\n/// integer are retained.\n///\n/// Parameters:\n///\n/// * `value` : The 16-bit signed integer to be converted to a byte.\n///\n/// Returns a byte containing the least significant 8 bits of the input value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = Int::to_int16(258) // In binary: 0000_0001_0000_0010\n///   inspect(x.to_byte(), content=\"b'\\\\x02'\") // Only keeps 0000_0010\n/// ```\npub fn Int16::to_byte(self : Int16) -> Byte = \"%i16_to_byte\"\n\n///|\npub fn Int::to_int16(self : Int) -> Int16 = \"%i32_to_i16\"\n\n///|\n/// Converts a byte value to a 16-bit signed integer. The byte value is\n/// sign-extended to 16 bits during the conversion.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted to an `Int16`.\n///\n/// Returns a 16-bit signed integer representing the same value as the input\n/// byte.\n///\n/// Example:\n///\n/// ```moonbit\n///   let b = b'\\xFF' // -1 as a signed byte\n///   inspect(b.to_int16(), content=\"255\") // Sign is preserved\n///   let p = b'\\x7F' // 127 as a signed byte\n///   inspect(p.to_int16(), content=\"127\")\n/// ```\npub fn Byte::to_int16(self : Byte) -> Int16 = \"%byte_to_i16\"\n\n///|\n/// Converts an unsigned 16-bit integer to a 32-bit signed integer. The value is\n/// zero-extended to fill the higher bits.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned 16-bit integer to be converted.\n///\n/// Returns a 32-bit signed integer. Since the input value is always non-negative\n/// and less than 65536, the conversion never results in overflow.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = Int::to_uint16(42)\n///   inspect(x.to_int(), content=\"42\")\n///   let max = Int::to_uint16(65535) // maximum value of UInt16\n///   inspect(max.to_int(), content=\"65535\")\n/// ```\npub fn UInt16::to_int(self : UInt16) -> Int = \"%u16_to_i32\"\n\n///|\n/// Converts a 16-bit unsigned integer to an 8-bit byte by truncating the higher\n/// bits.\n///\n/// Parameters:\n///\n/// * `value` : The 16-bit unsigned integer to be converted.\n///\n/// Returns a byte containing the least significant 8 bits of the input value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let x = Int::to_uint16(258) // Binary: 0000_0001_0000_0010\n///   inspect(x.to_byte(), content=\"b'\\\\x02'\") // Only keeps 0000_0010\n/// ```\npub fn UInt16::to_byte(self : UInt16) -> Byte = \"%u16_to_byte\"\n\n///|\n/// Converts a 32-bit signed integer to a 16-bit unsigned integer by truncating\n/// its value to fit within the range of 0 to 65535.\n///\n/// Parameters:\n///\n/// * `integer` : The 32-bit signed integer to be converted. Values outside the\n/// range of UInt16 will be truncated to fit.\n///\n/// Returns a 16-bit unsigned integer containing the lower 16 bits of the input\n/// value.\n///\n/// Example:\n///\n/// ```moonbit\n///   let n = 42\n///   inspect(n.to_uint16(), content=\"42\")\n///   let neg = -1\n///   inspect(neg.to_uint16(), content=\"65535\") // -1 becomes max value of UInt16\n///   let large = 65536\n///   inspect(large.to_uint16(), content=\"0\") // Values wrap around\n/// ```\npub fn Int::to_uint16(self : Int) -> UInt16 = \"%i32_to_u16\"\n\n///|\n/// Converts a byte value to a 16-bit unsigned integer by zero-extending it.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted.\n///\n/// Returns a 16-bit unsigned integer (`UInt16`) representing the same value as\n/// the input byte.\n///\n/// Example:\n///\n/// ```moonbit\n///   let b = b'\\xFF' // byte with value 255\n///   inspect(b.to_uint16(), content=\"255\")\n///   let zero = b'\\x00'\n///   inspect(zero.to_uint16(), content=\"0\")\n/// ```\npub fn Byte::to_uint16(self : Byte) -> UInt16 = \"%byte_to_u16\"\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\ntype UninitializedArray[T] FixedArray[UnsafeMaybeUninit[T]]\n\n///|\n/// Creates an uninitialized array of the specified size.\n///\n/// Parameters:\n///\n/// - `size` : The number of elements the array should hold.\n///\n/// Returns an uninitialized array of type `T` with the specified size.\npub fn[T] UninitializedArray::make(size : Int) -> UninitializedArray[T] = \"%fixedarray.make_uninit\"\n\n///|\n/// Retrieves the element at the specified index from an uninitialized array.\n///\n/// Parameters:\n///\n/// - `array` : The uninitialized array from which to retrieve the element.\n/// - `index` : The index of the element to retrieve.\n///\n/// Returns the element at the specified index.\npub fn[T] UninitializedArray::op_get(\n  self : UninitializedArray[T],\n  index : Int\n) -> T = \"%fixedarray.get\"\n\n///|\n/// Sets the value at the specified index in an uninitialized array.\n///\n/// Parameters:\n///\n/// - `array` : The uninitialized array where the value will be set.\n/// - `index` : The position in the array where the value will be set.\n/// - `value` : The value to be set at the specified index.\npub fn[T] UninitializedArray::op_set(\n  self : UninitializedArray[T],\n  index : Int,\n  value : T\n) = \"%fixedarray.set\"\n\n///|\n/// Creates a view into a portion of the uninitialized array.\n///\n/// Parameters:\n///\n/// * `array` : The uninitialized array to create a view from.\n/// * `start` : The starting index of the view (inclusive). Defaults to 0.\n/// * `end` : The ending index of the view (exclusive). If not provided, defaults\n/// to the length of the array.\n///\n/// Returns an `ArrayView` that provides a window into the specified portion of\n/// the array.\n///\n/// Throws an error if the indices are out of bounds or if `start` is greater\n/// than `end`.\npub fn[T] UninitializedArray::op_as_view(\n  self : UninitializedArray[T],\n  start~ : Int = 0,\n  end? : Int\n) -> ArrayView[T] {\n  let len = self.length()\n  let end = match end {\n    None => len\n    Some(end) => end\n  }\n  guard start >= 0 && start <= end && end <= len else {\n    abort(\"View start index out of bounds\")\n  }\n  { buf: self, start, len: end - start }\n}\n\n///|\n/// Returns the length of an uninitialized array.\n///\n/// Parameters:\n///\n/// - `array` : The uninitialized array whose length is to be determined.\n///\n/// Returns the length of the uninitialized array as an integer.\npub fn[A] UninitializedArray::length(self : UninitializedArray[A]) -> Int {\n  let UninitializedArray(self) = self\n  self.length()\n}\n\n///|\n#internal(unsafe, \"For internal use only.\")\npub fn[T] UninitializedArray::unsafe_blit(\n  dst : UninitializedArray[T],\n  dst_offset : Int,\n  src : UninitializedArray[T],\n  src_offset : Int,\n  len : Int\n) -> Unit {\n  FixedArray::unsafe_blit(dst.inner(), dst_offset, src.inner(), src_offset, len)\n}\n\n///|\ntest \"op_as_view with valid_range\" {\n  let arr : UninitializedArray[Int] = UninitializedArray::make(5)\n  let view = arr[1:4]\n  inspect(view.start, content=\"1\")\n  inspect(view.len, content=\"3\")\n}\n\n///|\ntest \"panic op_as_view with invalid_start\" {\n  let arr : UninitializedArray[Int] = UninitializedArray::make(5)\n  ignore(arr[-1:])\n}\n\n///|\ntest \"panic op_as_view with invalid_end\" {\n  let arr : UninitializedArray[Int] = UninitializedArray::make(5)\n  ignore(arr[2:10])\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\npub impl Hash for Char with hash(self) {\n  self.to_int()\n}\n\n///|\npub impl Hash for Char with hash_combine(self, hasher) -> Unit {\n  hasher.combine_char(self)\n}\n\n///| Checks if the value is within the ASCII range.\npub fn is_ascii(self : Char) -> Bool {\n  self is ('\\u{00}'..='\\u{7F}')\n}\n\n///| Checks if the value is an ASCII alphabetic  character:\n/// - U+0041 'A' ..= U+005A 'Z'\n/// - U+0061 'a' ..= U+007A 'z'\npub fn is_ascii_alphabetic(self : Char) -> Bool {\n  self is ('A'..='Z' | 'a'..='z')\n}\n\n///| Checks if the value is an ASCII control character:\n/// U+0000 NUL ..= U+001F UNIT SEPARATOR, or U+007F DELETE.\n/// Note that most ASCII whitespace characters are control characters, but SPACE is not.\npub fn is_ascii_control(self : Char) -> Bool {\n  self is ('\\u{00}'..='\\u{1F}' | '\\u{7F}')\n}\n\n///| Checks if the value is an ASCII decimal digit:\n/// U+0030 '0' ..= U+0039 '9'\npub fn is_ascii_digit(self : Char) -> Bool {\n  self is ('0'..='9')\n}\n\n///| Checks if the value is an ASCII graphic character:\n/// U+0021 '!' ..= U+007E '~'\npub fn is_ascii_graphic(self : Char) -> Bool {\n  self is ('\\u{21}'..='\\u{7E}')\n}\n\n///| Checks if the value is an ASCII hexadecimal digit:\n/// - U+0030 '0' ..= U+0039 '9'\n/// - U+0041 'A' ..= U+0046 'F'\n/// - U+0061 'a' ..= U+0066 'f'\npub fn is_ascii_hexdigit(self : Char) -> Bool {\n  self is ('0'..='9' | 'A'..='F' | 'a'..='f')\n}\n\n///| Checks if the value is an ASCII lowercase character:\n/// U+0061 'a' ..= U+007A 'z'.\npub fn is_ascii_lowercase(self : Char) -> Bool {\n  self is ('a'..='z')\n}\n\n///| Checks if the value is an ASCII octal digit:\n/// U+0030 '0' ..= U+0037 '7'\npub fn is_ascii_octdigit(self : Char) -> Bool {\n  self is ('0'..='7')\n}\n\n///| Checks if the value is an ASCII punctuation character:\n/// - U+0021 ..= U+002F ! \" # $ % & ' ( ) * + , - . /\n/// - U+003A ..= U+0040 : ; < = > ? @\n/// - U+005B ..= U+0060 [ \\ ] ^ _ `\n/// - U+007B ..= U+007E { | } ~\npub fn is_ascii_punctuation(self : Char) -> Bool {\n  self\n  is ('\\u{21}'..='\\u{2F}'\n  | '\\u{3A}'..='\\u{40}'\n  | '\\u{5B}'..='\\u{60}'\n  | '\\u{7B}'..='\\u{7E}')\n}\n\n///| Checks if the value is an ASCII uppercase character:\n/// U+0041 'A' ..= U+005A 'Z'\npub fn is_ascii_uppercase(self : Char) -> Bool {\n  self is ('A'..='Z')\n}\n\n///| Checks if the value is an ASCII whitespace character:\n/// U+0020 SPACE, U+0009 HORIZONTAL TAB, U+000A LINE FEED, U+000C FORM FEED, or U+000D CARRIAGE RETURN.\npub fn is_ascii_whitespace(self : Char) -> Bool {\n  self is ('\\u{20}' | '\\u{09}' | '\\u{0A}' | '\\u{0C}' | '\\u{0D}')\n}\n\n///| Returns true if this char has the general category for control codes.\npub fn is_control(self : Char) -> Bool {\n  self is ('\\u0000'..='\\u001F' | '\\u007F'..='\\u009F')\n}\n\n///| \n/// Checks if a char is a digit in the given radix (range from 2 to 36).\n/// \n/// panic if the radix is invalid.\npub fn is_digit(self : Char, radix : UInt) -> Bool {\n  let v = self.to_uint()\n  match radix {\n    2..=10 => v >= 48 && v <= radix + 47\n    11..=36 =>\n      (v >= 48 && v <= 57) ||\n      (v >= 65 && v <= radix + 54) ||\n      (v >= 97 && v <= radix + 86)\n    _ => panic()\n  }\n}\n\n///| Returns true if this char has the White_Space property.\npub fn is_whitespace(self : Char) -> Bool {\n  self\n  is ('\\u0009'..='\\u000D'\n  | '\\u0020'\n  | '\\u0085'\n  | '\\u00A0'\n  | '\\u1680'\n  | '\\u2000'..='\\u200A'\n  | '\\u2028'\n  | '\\u2029'\n  | '\\u202F'\n  | '\\u205F'\n  | '\\u3000')\n}\n\n///| Returns true if this char has one of the general categories for numbers.\npub fn is_numeric(self : Char) -> Bool {\n  self\n  is ('\\u0030'..='\\u0039'\n  | '\\u00B2'\n  | '\\u00B3'\n  | '\\u00B9'\n  | '\\u00BC'\n  | '\\u00BD'\n  | '\\u00BE'\n  | '\\u0660'..='\\u0669'\n  | '\\u06F0'..='\\u06F9'\n  | '\\u07C0'..='\\u07F9'\n  | '\\u0966'..='\\u096F'\n  | '\\u09E6'..='\\u09EF'\n  | '\\u09F4'..='\\u09F9'\n  | '\\u0A66'..='\\u0A6F'\n  | '\\u0AE6'..='\\u0AEF'\n  | '\\u0B66'..='\\u0B6F'\n  | '\\u0B72'..='\\u0B77'\n  | '\\u0BE6'..='\\u0BEF'\n  | '\\u0BF0'..='\\u0BF2'\n  | '\\u0C66'..='\\u0C6F'\n  | '\\u0C78'..='\\u0C7E'\n  | '\\u0CE6'..='\\u0CEF'\n  | '\\u0D58'..='\\u0D5E'\n  | '\\u0D66'..='\\u0D6F'\n  | '\\u0D70'..='\\u0D78'\n  | '\\u0DE6'..='\\u0DEF'\n  | '\\u0E50'..='\\u0E59'\n  | '\\u0ED0'..='\\u0ED9'\n  | '\\u0F20'..='\\u0F33'\n  | '\\u1040'..='\\u1049'\n  | '\\u1090'..='\\u1099'\n  | '\\u1369'..='\\u137C'\n  | '\\u16EE'..='\\u16F0'\n  | '\\u17E0'..='\\u17E9'\n  | '\\u17F0'..='\\u17F9'\n  | '\\u1810'..='\\u1819'\n  | '\\u1946'..='\\u194F'\n  | '\\u19D0'..='\\u19DA'\n  | '\\u1A80'..='\\u1A89'\n  | '\\u1A90'..='\\u1A99'\n  | '\\u1B50'..='\\u1B59'\n  | '\\u1BB0'..='\\u1BB9'\n  | '\\u1C40'..='\\u1C49'\n  | '\\u1C50'..='\\u1C59'\n  | '\\u2070'\n  | '\\u2074'..='\\u2079'\n  | '\\u2080'..='\\u2089'\n  | '\\u2150'..='\\u2189'\n  | '\\u2460'..='\\u249B'\n  | '\\u24EA'..='\\u24FF'\n  | '\\u2776'..='\\u2793'\n  | '\\u2CFD'\n  | '\\u3007'\n  | '\\u3021'..='\\u3029'\n  | '\\u3038'..='\\u303A'\n  | '\\u3192'..='\\u3195'\n  | '\\u3220'..='\\u3229'\n  | '\\u3248'..='\\u324F'\n  | '\\u3251'..='\\u325F'\n  | '\\u3280'..='\\u3289'\n  | '\\u32B1'..='\\u32BF'\n  | '\\uA620'..='\\uA629'\n  | '\\uA6E6'..='\\uA6EF'\n  | '\\uA830'..='\\uA835'\n  | '\\uA8D0'..='\\uA8D9'\n  | '\\uA900'..='\\uA909'\n  | '\\uA9D0'..='\\uA9D9'\n  | '\\uA9F0'..='\\uA9F9'\n  | '\\uAA50'..='\\uAA59'\n  | '\\uABF0'..='\\uABF9'\n  | '\\uFF10'..='\\uFF19'\n  | '\\u{10107}'..='\\u{10133}'\n  | '\\u{10140}'..='\\u{10178}'\n  | '\\u{1018A}'..='\\u{1018B}'\n  | '\\u{102E1}'..='\\u{102FB}'\n  | '\\u{10320}'..='\\u{10323}'\n  | '\\u{10341}'\n  | '\\u{1034A}'\n  | '\\u{103D1}'..='\\u{103D5}'\n  | '\\u{104A0}'..='\\u{104A9}'\n  | '\\u{10858}'..='\\u{1085F}'\n  | '\\u{10879}'..='\\u{1087F}'\n  | '\\u{108A7}'..='\\u{108AF}'\n  | '\\u{108FB}'..='\\u{108FF}'\n  | '\\u{10916}'..='\\u{1091B}'\n  | '\\u{109BC}'..='\\u{109BD}'\n  | '\\u{109C0}'..='\\u{109CF}'\n  | '\\u{10A40}'..='\\u{10A48}'\n  | '\\u{10A7D}'..='\\u{10A7E}'\n  | '\\u{10A9D}'..='\\u{10A9F}'\n  | '\\u{10AEB}'..='\\u{10AEF}'\n  | '\\u{10B58}'..='\\u{10B5F}'\n  | '\\u{10B78}'..='\\u{10B7F}'\n  | '\\u{10BA9}'..='\\u{10BAF}'\n  | '\\u{10CFA}'..='\\u{10CFF}'\n  | '\\u{10D30}'..='\\u{10D39}'\n  | '\\u{10D40}'..='\\u{10D49}'\n  | '\\u{10E60}'..='\\u{10E7E}'\n  | '\\u{10F1D}'..='\\u{10F26}'\n  | '\\u{10F51}'..='\\u{10F54}'\n  | '\\u{10FC5}'..='\\u{10FCB}'\n  | '\\u{11052}'..='\\u{1106F}'\n  | '\\u{110F0}'..='\\u{110F9}'\n  | '\\u{11136}'..='\\u{1113F}'\n  | '\\u{111D0}'..='\\u{111D9}'\n  | '\\u{111E1}'..='\\u{111F4}'\n  | '\\u{112F0}'..='\\u{112F9}'\n  | '\\u{11450}'..='\\u{11459}'\n  | '\\u{114D0}'..='\\u{114D9}'\n  | '\\u{11650}'..='\\u{11659}'\n  | '\\u{116C0}'..='\\u{116C9}'\n  | '\\u{116D0}'..='\\u{116E3}'\n  | '\\u{11730}'..='\\u{1173B}'\n  | '\\u{118E0}'..='\\u{118F2}'\n  | '\\u{11950}'..='\\u{11959}'\n  | '\\u{11BF0}'..='\\u{11BF9}'\n  | '\\u{11C50}'..='\\u{11C6C}'\n  | '\\u{11D50}'..='\\u{11D59}'\n  | '\\u{11DA0}'..='\\u{11DA9}'\n  | '\\u{11F50}'..='\\u{11F59}'\n  | '\\u{11FC0}'..='\\u{11FD4}'\n  | '\\u{12400}'..='\\u{1246E}'\n  | '\\u{16130}'..='\\u{16139}'\n  | '\\u{16A60}'..='\\u{16A69}'\n  | '\\u{16AC0}'..='\\u{16AC9}'\n  | '\\u{16B50}'..='\\u{16B59}'\n  | '\\u{16B5B}'..='\\u{16B61}'\n  | '\\u{16D70}'..='\\u{16D79}'\n  | '\\u{16D80}'..='\\u{16E96}'\n  | '\\u{1CCF0}'..='\\u{1CCF9}'\n  | '\\u{1D2C0}'..='\\u{1D2F3}'\n  | '\\u{1D360}'..='\\u{1D378}'\n  | '\\u{1D7CE}'..='\\u{1D7FF}'\n  | '\\u{1E140}'..='\\u{1E149}'\n  | '\\u{1E2F0}'..='\\u{1E2F9}'\n  | '\\u{1E4F0}'..='\\u{1E4F9}'\n  | '\\u{1E5F1}'..='\\u{1E5FA}'\n  | '\\u{1E8C7}'..='\\u{1E8CF}'\n  | '\\u{1E950}'..='\\u{1E959}'\n  | '\\u{1EC71}'..='\\u{1ECB4}'\n  | '\\u{1ED01}'..='\\u{1ED3D}'\n  | '\\u{1F100}'..='\\u{1F10C}'\n  | '\\u{1FBF0}'..='\\u{1FBF9}')\n}\n\n///| Returns true if this character is printable (visible when displayed).\n/// Aligns with Unicode standard categories for printable characters.\n/// Characters are considered printable if they are:\n/// - Letters (L*)\n/// - Marks (M*)\n/// - Numbers (N*)\n/// - Punctuation (P*)\n/// - Symbols (S*)\n/// - Spaces (Zs), with some exceptions\n/// Characters are considered non-printable if they are:\n/// - Control characters (Cc)\n/// - Format characters (Cf)\n/// - Line/paragraph separators (Zl, Zp)\n/// - Private use (Co)\n/// - Unassigned (Cn)\n/// - Surrogates (Cs)\npub fn is_printable(self : Char) -> Bool {\n  // Check for control characters (Cc)\n  if self.is_control() {\n    return false\n  }\n  let self = self.to_int()\n\n  // Private use areas (Co)\n  if self is (0xE000..=0xF8FF | 0xF0000..=0xFFFFD | 0x100000..=0x10FFFD) {\n    return false\n  }\n\n  // Format characters (Cf)\n  if self\n    is ('\\u{00AD}'\n    | '\\u{0600}'..='\\u{0605}'\n    | '\\u{061C}'\n    | '\\u{06DD}'\n    | '\\u{070F}'\n    | '\\u{0890}'..='\\u{0891}'\n    | '\\u{08E2}'\n    | '\\u{180E}'\n    | '\\u{200B}'..='\\u{200F}'\n    | '\\u{202A}'..='\\u{202E}'\n    | '\\u{2060}'..='\\u{2064}'\n    | '\\u{2066}'..='\\u{206F}'\n    | '\\u{feff}'\n    | '\\u{FFF9}'..='\\u{FFFB}'\n    | '\\u{110BD}'\n    | '\\u{110CD}'\n    | '\\u{13430}'..='\\u{1343F}'\n    | '\\u{1BCA0}'..='\\u{1BCA3}'\n    | '\\u{1D173}'..='\\u{1D17A}'\n    | '\\u{E0001}'\n    | '\\u{E0020}'..='\\u{E007F}') {\n    return false\n  }\n  // Surrogate (Cs)\n  if self >= 0xD800 && self <= 0xDFFF {\n    return false\n  }\n\n  // Line and paragraph separators (Zl, Zp)\n  if self == '\\u{2028}' || self == '\\u{2029}' {\n    return false\n  }\n\n  // Noncharacter\n  if self\n    is (0xFDD0..=0xFDEF\n    | 0xFFFE..=0xFFFF\n    | 0x1FFFE..=0x1FFFF\n    | 0x2FFFE..=0x2FFFF\n    | 0x3FFFE..=0x3FFFF\n    | 0x4FFFE..=0x4FFFF\n    | 0x5FFFE..=0x5FFFF\n    | 0x6FFFE..=0x6FFFF\n    | 0x7FFFE..=0x7FFFF\n    | 0x8FFFE..=0x8FFFF\n    | 0x9FFFE..=0x9FFFF\n    | 0xAFFFE..=0xAFFFF\n    | 0xBFFFE..=0xBFFFF\n    | 0xCFFFE..=0xCFFFF\n    | 0xDFFFE..=0xDFFFF\n    | 0xEFFFE..=0xEFFFF\n    | 0xFFFFE..=0xFFFFF\n    | 0x10FFFE..=0x10FFFF) {\n    return false\n  }\n  true\n}\n\n///| Makes a copy of the value in its ASCII lower case equivalent.\n/// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n/// but non-ASCII letters are unchanged.\npub fn to_ascii_lowercase(self : Char) -> Char {\n  if self.is_ascii_uppercase() {\n    return (self.to_int() + 32).unsafe_to_char()\n  }\n  self\n}\n\n///| Makes a copy of the value in its ASCII upper case equivalent.\n/// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n/// but non-ASCII letters are unchanged.\npub fn to_ascii_uppercase(self : Char) -> Char {\n  if self.is_ascii_lowercase() {\n    return (self.to_int() - 32).unsafe_to_char()\n  }\n  self\n}\n\n///| Convert Char to String\npub impl Show for Char with to_string(self : Char) -> String {\n  char_to_string(self)\n}\n\n///| TODO: support attributes for impl\n#intrinsic(\"%char.to_string\")\nfn char_to_string(char : Char) -> String {\n  [char]\n}\n\n///|\npub impl Show for Char with output(self, logger) {\n  fn to_hex_digit(i : Int) -> Char {\n    if i < 10 {\n      (i + '0').unsafe_to_char()\n    } else {\n      (i + 'a' - 10).unsafe_to_char()\n    }\n  }\n\n  logger.write_char('\\'')\n  match self {\n    '\\'' | '\\\\' => logger..write_char('\\\\')..write_char(self)\n    '\\n' => logger.write_string(\"\\\\n\")\n    '\\r' => logger.write_string(\"\\\\r\")\n    '\\b' => logger.write_string(\"\\\\b\")\n    '\\t' => logger.write_string(\"\\\\t\")\n    ' '..='~' => logger.write_char(self)\n    _ =>\n      if !self.is_printable() {\n        let code = self.to_int()\n        let hex_len = if code <= 0xFF {\n          2\n        } else if code <= 0xFFF {\n          3\n        } else if code <= 0xFFFF {\n          4\n        } else if code <= 0xFFFFF {\n          5\n        } else {\n          6\n        }\n        logger.write_string(\"\\\\u{\")\n        if hex_len >= 6 {\n          logger.write_char(to_hex_digit((code >> 20) & 0xF))\n        }\n        if hex_len >= 5 {\n          logger.write_char(to_hex_digit((code >> 16) & 0xF))\n        }\n        if hex_len >= 4 {\n          logger.write_char(to_hex_digit((code >> 12) & 0xF))\n        }\n        if hex_len >= 3 {\n          logger.write_char(to_hex_digit((code >> 8) & 0xF))\n        }\n        if hex_len >= 2 {\n          logger.write_char(to_hex_digit((code >> 4) & 0xF))\n        }\n        logger.write_char(to_hex_digit(code & 0xF))\n        logger.write_char('}')\n      } else {\n        logger.write_char(self)\n      }\n  }\n  logger.write_char('\\'')\n}\n\n///|\npub impl ToJson for Char with to_json(self : Char) -> Json {\n  Json::string(self.to_string())\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Aborts the program with an error message. Always causes a panic, regardless\n/// of the message provided.\n///\n/// Parameters:\n///\n/// * `message` : A string containing the error message to be displayed when\n/// aborting.\n///\n/// Returns a value of type `T`. However, this function never actually returns a\n/// value as it always causes a panic.\npub fn[T] abort(msg : String) -> T {\n  let _ = msg\n  panic_impl()\n}\n\n///|\nfn[T] panic_impl() -> T = \"%panic\"\n"],"mappings":"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"}